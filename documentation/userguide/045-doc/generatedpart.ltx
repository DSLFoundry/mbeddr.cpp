

 \section{Introduction}
 \label{introduction}


 When writing prose documents that integrate with code, it is tough to actually create this integration between the prose text and the code. You can either put the prose in JavaDoc-like comments, but then it is hard to tell a story. Alternatively, you can write a Word or Latex document, but then the integration with the code artifacts is tough, boiling down essentially to copy and paste and screenshots.

 The mbeddr documentation language provdides a better alternative. It supports writing prose inside of MPS, supporting a tight integration between the prose and the code. In this document we explain how this works. Of course, this document is itself written in the documentation language.

 As you can see from the document you are reading, the documentation language supports rendering to Latex. It also supports rendering to HTML.

 The documentation language supports several different extensions, each supporting the integration with differnet code artifacts. We will explain all of this in this document. The languages that support these features are all named  \ic{com.mbeddr.doc.*} , the devkit you may want to include is called  \ic{com.mbeddr.documentation} . 


 \section{Writing Regular Documents}
 \label{normalDocs}


 \subsection{Simple Text}
 \label{normalDocs.simpleText}


 The most fundamental concept is the  \ic{document} . It has a name and 
references a  \ic{configuration} , about which we will take some more later.

 Inside a document, the basic document structure consists of sections  
and various kinds of paragraphs. The simplest kind of paragraph is 
the text paragraph (entered by typing a  \ic{p} ). It has vertical brackets 
on both sides to denote its boundary. Below in fig  Fig. \ref{B_SimpleDocuments.normalDocs.simpleText.exSection}  is an 
example, that also embeds this same paragraph as an image.

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section8730648445432874248.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{An example section from a document. It is embedded as an image.}
 \label{B_SimpleDocuments.normalDocs.simpleText.exSection}
 \end{figure}


 \subsection{Formatting Text}
 \label{normalDocs.formatting}


 Of course, it is possible to format words as  \emph{emphasized}  as well as as
 \ic{code} , and more formatting options will show up over time. You can press
 \ic{Ctrl-Space}  in the text paragraph to see which formatting options are 
available. Formatting options all start with a backslash.  Fig. \ref{B_SimpleDocuments.normalDocs.formatting.formatting}  shows 
the paragraph you're reading here as a screenshot so you can see the way to 
format words. 

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section8730648445433240114.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{This paragraph shows how to format text.}
 \label{B_SimpleDocuments.normalDocs.formatting.formatting}
 \end{figure}


 \subsection{Embedding Figures}
 \label{normalDocs.figures}


 You can also embed images that are not rendered from within MPS, but are supplied
externally. Below, im  Fig. \ref{B_SimpleDocuments.normalDocs.figures.glider} , is an example. 
The code to embed an image is shown in  Fig. \ref{B_SimpleDocuments.normalDocs.figures.figures} .

 \begin{figure}[h]
 \includegraphics[width=1.0\columnwidth]{figures/doc/ash26.png}
 \caption{An ASH 26E glider.}
 \label{B_SimpleDocuments.normalDocs.figures.glider}
 \end{figure}


 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section8730648445433243102.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{The code that embeds an image}
 \label{B_SimpleDocuments.normalDocs.figures.figures}
 \end{figure}


 When embedding an image, you have to specify a name (so the image can be referenced
from within the document), a path (defined via a path definition in the document
configuration), the actual image file (code completion is available in the editor),
as well as a size specification (among others, a scaling factor or a specification
relative to page size). 

 The path definitions are made in the document configuration, and include a path
that is valid while the document is edited; MPS path variables can be used. When
the document is exported (see below), these are mapped to paths relative to the
location at which the document is located.  Fig. \ref{B_SimpleDocuments.normalDocs.figures.config}  shows the document config
for this document. Note that you can also define size specifications there that
can be referenced from images within the document (to reuse the size specs).

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section8730648445433247956.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{An example document configuration with path definitions.}
 \label{B_SimpleDocuments.normalDocs.figures.config}
 \end{figure}


 \subsection{Embedding Other Things}
 \label{normalDocs.otherEmbeddings}


 Other artifacts can also be embedded, not just images. The approach is always the
same, in particular, you typically specify a path and a size, as well as a name so
it can be referenced. The embeddings of the document sources (as screenshots) are
examples. In many cases, the artifacts are actually
only created during the creation of the document. For example, the screenshots that
represent the document source code are created  \emph{from the live code}  during the
generation of the document. This way, they are always up to date. Other extensions to
the basic documentation language can contribute their own embedded resources. We will
see examples below.

 \subsection{Exporting Documents}
 \label{normalDocs.exporting}


 Exporting the document (as HTML, PDF, or possibly in other formats) involves two
steps. First, you likely wrote the overall text in several actual documents. To 
create a big, contiguous HTML or Latex document you probably want to join them.
You can do this by creating another document and including others.  Fig. \ref{B_SimpleDocuments.normalDocs.exporting.root}  shows
an example how to do that. Note that you can only include documents for which you 
specify a dependency in the document header.

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[scale=0.55]{figures/doc/section8730648445433281660.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{A root document that includes other documents in a specific order.}
 \label{B_SimpleDocuments.normalDocs.exporting.root}
 \end{figure}


 The second ingredient is the actual export configuration, as shown in  Fig. \ref{B_SimpleDocuments.normalDocs.exporting.doc} .
There, you specify a document title, optionally an abstract, a root document, as 
well as a renderer. You also specify path mappings: the path definitions from the
configuration ( Fig. \ref{B_SimpleDocuments.normalDocs.figures.config} ) now have to be mapped to paths relative to the output
folder of the generated document (most likely you have to manually create a script 
that copies these resources into this directory). 

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section8730648445433284820.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{The export configuration for this document.}
 \label{B_SimpleDocuments.normalDocs.exporting.doc}
 \end{figure}


 To create the document, you simply generate the respective MPS model. The HTML or
Latex file(s) will be generated. 

 \begin{itemize}
 \item For Latex, you specify a document class as well as a prolog file. 
The prolog file is included at the beginning of the document, and it
can define all the style customizations you want.
 \item For HTML, you specify a style sheet. This style sheet can format the
HTML code in any way you want. Take a look at the generated HTML to 
learn about the style classes used in the generated HTML.
 \end{itemize}

 \subsection{Embedding Documents}
 \label{normalDocs.docEmbedding}


 The documentation language is extensible. It can embed all kinds of other things.
In the previous section  Section \ref{normalDocs}  we have already implictly seen how to 
embed screenshots of documentation artifacts. This is probably a bit weird and 
meta, but it is useful for documenting the documentation language. It also shows
off the flexibility of the approach itself.

 \subsection{Tables}
 \label{normalDocs.tables}


 The documentation language supports tables. The table below
shows an example. This is an  \ic{inline table} , there are also
 \ic{floating table} , that can be referenced with the  \ic{@fig} 
reference. The code for tables is shown in  Fig. \ref{B_SimpleDocuments.normalDocs.tables.tables} .

\vspace{3mm}
\noindent
\begin{minipage}{0.96\columnwidth}
\footnotesize
\begin{tabular}{|l|l|l|}
\hline
 \textbf{Name} & \textbf{Alter} & \textbf{Adresse}\\
\hline
 Markus & 38 & voelter@acm.org\\
 Bernd & 30 & kolb@itemis.de\\
 Peter & 30 & peter@friese.de\\
\hline
\end{tabular}
\normalsize
\end{minipage}


 \noindent
 In a table, you specify the number of columns (and a name for floating
tables). You then add rows and cells. Currently we support only text
cells (denoted by the parens) and text block cells (denoted by the angle
bracket, just as in text paragaphs in general). Additional cell types 
will be supported in the future.

 For each cell, you set if it is a header using a setting in the inspector.
For each row, you can specify whether there should be lines above or 
below the line. Currently, there is  \emph{always}  a line between the 
columns; this may be changed in the future.

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section5785245534400438821.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{The code for writing tables.}
 \label{B_SimpleDocuments.normalDocs.tables.tables}
 \end{figure}



 \section{Embedding mbeddr Artifacts}
 \label{workingWithMbeddr}


 A more interesting use case is the ability to work with mbeddr code. In fact, 
the ability to tightly integrate with mebddr code was the reason for building
this documentation language, as we have said in  Section \ref{introduction} . In this
section we explain how it works.

 \subsection{Referencing Code}
 \label{workingWithMbeddr.referencingCode}


 The simplest way of integrating documentation prose is to use references
to mbeddr code. Why would you do this? Of course to be refactoring-safe: as
you rename the referenced element, the text in the documentation changes with it.
If you delete the element, the reference breaks, and you know you have to change
something. 

 For example, you reference the interface  \ic{Calculator}  using the  \ic{@cc} 
embedded node. You can also refer to any named child of a top level content by
selecting that child after the slash in the  \ic{@cc}  element. For example, you
can refer to an argument  \ic{x} . If you want to reference things that
do not have a name, you can attach a name label to an element (using the 
 \ic{Attach  Name}  intention; you need to use the  \ic{com.mbeddr.doc.c}  language
in the respective mbeddr model to get the intention. For example, we can refer to
 a precondition .  Fig. \ref{C_EmbeddingMbeddr.workingWithMbeddr.referencingCode.calculator}  shows how this looks in the code.

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[scale=0.55]{figures/doc/C_EmbeddingMbeddr_calculator.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{An interface with a marker on a precondition, so it can be referenced. }
 \label{C_EmbeddingMbeddr.workingWithMbeddr.referencingCode.calculator}
 \end{figure}


 In addition, you can also refer to modules using the  \ic{@cm}  node. For example,
here we refer to the  \ic{ExampleCode}  module.

 Fig. \ref{C_EmbeddingMbeddr.workingWithMbeddr.referencingCode.refCode}  shows the source for the referencing examples.

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section8730648445433628194.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{Example code for referencing C code from documents. }
 \label{C_EmbeddingMbeddr.workingWithMbeddr.referencingCode.refCode}
 \end{figure}


 \subsection{Embedding Code}
 \label{workingWithMbeddr.embddingCode}


 \parhead{Embed as Image} You have already seen in the previous paragraph how to embed mbeddr code as an image
into the document. In that example,  Fig. \ref{C_EmbeddingMbeddr.workingWithMbeddr.referencingCode.calculator}  embedded a complete top level
construct, an interface in this case. But what if you wanted to embed only a smaller
section, such as a state in a state machine or a single operation in an interface?
 Fig. \ref{C_EmbeddingMbeddr.workingWithMbeddr.embddingCode.addOp}  shows an example of embedding only an operation. The code to do that is 
shown in  Fig. \ref{C_EmbeddingMbeddr.workingWithMbeddr.embddingCode.embedding1} ; essentially you mention the  \ic{add}  operation after 
the slash in the  \ic{embed  image}  tag.

 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[scale=0.55]{figures/doc/C_EmbeddingMbeddr_addOp.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{An example of how to embed only a part of a module content as an image.}
 \label{C_EmbeddingMbeddr.workingWithMbeddr.embddingCode.addOp}
 \end{figure}


 \parhead{Embedding as Text} You can also embed mbeddr code as text. This is interesting in particular for Latex
export, since you can configure the  \ic{listings}  package to provide syntax 
highlighting for your code. The following paragraph shows how to embed the interface
as text; not that this is not a floating entity and cannot be referenced, it is 
inlined with the text. Also note that in the inspector for the  \ic{embed  as text}  
tag you can specify the language name used for highlighting. By default, it is 
 \ic{mbeddr} .

 \begin{lstlisting}[language=mbeddr]
exported cs interface Calculator { 
  int8 add(int8 x, int8 y) 
    post(0) result == x + y 
  int8 divide(int8 x, int8 y) 
    pre(0) y != 0 // ^aPreCondition 
    post(1) result == x / y 
}

 \end{lstlisting}


 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section8730648445433631470.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{An example of how to embed only the  \ic{add}  operation as an image.}
 \label{C_EmbeddingMbeddr.workingWithMbeddr.embddingCode.embedding1}
 \end{figure}


 \subsection{Embedding Visualizations}
 \label{workingWithMbeddr.visualizations}


 Some elements in mbeddr implement the  \ic{IVisualizable}  interface, so they can
provide one or more visualizations. You can see these visualizations by selecting
the  \ic{Visualize}  menu item from the context menu. Alternatively you can also
embed such visualizations into a generated document; the visualization is rendered
on the fly (like the code screenshots discussed in  Section \ref{workingWithMbeddr.embddingCode} . 

 An example for such a visualization is shown in  Fig. \ref{C_EmbeddingMbeddr.workingWithMbeddr.visualizations.vis} . As with other images,
you have to specify the size/scaling, and the location of the temporary files. 
Obviously, you have to reference the visualizable element, and you also have to
select which of its visualizations you want to render. You can select them via
code completion after the slash in the  \ic{visualize}  element.

 \begin{figure}[h]
 \begin{center}
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[scale=0.6]{figures/doc/C_EmbeddingMbeddrworkingWithMbeddrvisualizationstl.png}
\end{minipage}
}
 \end{center}
\vspace{-3mm}
 \caption{The  \ic{TrafficLights}  state machine as a graph.}
 \label{C_EmbeddingMbeddr.workingWithMbeddr.visualizations.tl}
 \end{figure}


 \begin{figure}[h]
\fbox {
\begin{minipage}{0.96\columnwidth}
 \includegraphics[width=1.0\columnwidth]{figures/doc/section8730648445433858418.png}
\end{minipage}
}
\vspace{-3mm}
 \caption{Example document code to embed a visualization.}
 \label{C_EmbeddingMbeddr.workingWithMbeddr.visualizations.vis}
 \end{figure}


 Note that (at least as of now) you have to manually render the images with 
 \ic{plantuml} . The following listing shows how we render the images using
 \ic{plantuml}  and how we copy them into a an  \ic{images}  folder. This 
folder is the one from which the images are read by the generated Latex file.

 \begin{lstlisting}[language=bash]
echo ===== Rendering Visualizations using plantuml
cd temp
java -jar ../plantuml.jar *.puml
cd ..

echo ===== Copying Rendered Images and Screenshots
cd source_gen/main
mkdir doc_images
cd ../..
cp temp/*.png source_gen/main/doc_images
 \end{lstlisting}


 \noindent
 The above example also shows how to embed a listing as text. You can add a 
 \ic{listing}  paragraph and paste the actual textual code into a text area
in the inspector.


 \section{Extending the Documentation Language}
 \label{extending}


 Just as any other mbeddr language, the documentation language is extensible. There are two main extension points: enw kinds of paragraphs and new embedded nodes.

 \subsection{New Paragraphs}
 \label{extending.para}


 To create new paragraphs, you should extend the  \ic{AbstractParagraph}  concept from the  \ic{com.mbeddr.doc}  language. For example, the regular text paragraphs as well as the sections and images are subconcepts of  \ic{AbstractParagraph} .

 \subsection{New Embeddable Nodes}
 \label{extending.words}


 Concepts that should be embeddable in "regular" text paragraphs (such as the one your are reading right now) must implement the  \ic{IWord}  concept interface. This way they can be embedded in any text paragraph. Of course, this is not what you might want; if you want to restrict their usability to within actual  \ic{Document} , you have to write a  \ic{can be child}  constraint, or, alternatively, extend the  \ic{DocumentWord}  abstract concept.

 In addition to extending the respective interface or concept, embeddable concepts must also define a  \ic{transformationKey}  property. It is the text that is used to instantite the node from the code completion menu.

 As an example, take a look at the following paragraph. It uses an extension that can be used for embedding variables and equations. 

 \parhead{The Drake Equation} The Drake equation calculates the number of civilizations  $ N $  in the galaxy. As input, it uses the average rate of star formation  $ SF $ , the fractios of those stars that have planets  $ fp $  and the average number of planets that can potentially support life  $ ne $ . The number of civilizations can be calculated as  $ N = SF * fp * ne $

 Note that the variables are typed, the equations are type checked and you can directly use the variables and equations from mbeddr code if you want to. To learn how this works, take a look at the  \ic{com.mbeddr.doc.expressions}  language.

