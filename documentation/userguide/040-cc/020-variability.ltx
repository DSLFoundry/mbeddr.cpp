\section{Variability}

\label{details_ple}

Product line engineering involves the coordinated construction of several
related, but different products. Each product is typically referred to as a
\emph{variant}. The product variants within a product line have a lot in common,
but also exhibit a set of well-defined differences. Managing these differences
over the sets of products in a product line is non trivial. This document
explains how to do it in the context of mbeddr.




A devkit \ic{com.mbeddr.cc.variability} is defined that comprises the following
three languages:

\begin{itemize}
  \item \ic{com.mbeddr.cc.var.fm} supports the definition of feature models.
  Feature models are a well-known formalism for expressing variability on a
  high-level, independent of the realization of the variability in software.
  \item \ic{com.mbeddr.cc.var.annotations} allows the connection of
  implementation artifacts (any MPS model) to feature models as a way of mapping
  the high-level variability to implementation code. This is done by attaching
  presence conditions to program elements (this is mbeddr's replacement for
  \ic{\#ifdef}s).
  \item \ic{com.mbeddr.cc.var.buildconfig} ties the processing of annotations
  into mbeddr's build process.
\end{itemize}


\subsection{Feature Models and Configurations}

\parhead{Defining a Feature Model} Feature models express configuration options
and the constraints between them. They are usually represented with a graphical
notation. An example is below.


\begin{center} 
  \includegraphics[width=100mm]{figures/cc/examplefm.png}
\end{center}




The following four kinds of constraints are supported between the features in a
feature model:

\begin{itemize}
  \item \textbf{mandatory}, the filled circle: mandatory features have to be in
  each product variant. In the above example, each \ic{Stack} has to have the
  feature \ic{ElementType}.
  \item \textbf{optional}, the hollow circle: optional features may or may not
  be in a product variant. In the example, \ic{Counter} and \ic{Optimization}
  are examples of optional features.
  \item \textbf{or}, the filled arc: a product variant may include zero, one or
  any number of the features grouped into a an or group. For example, a product
  may include any number of features from \ic{ThreadSafety}, \ic{BoundsCheck}
  and \ic{TypeCheck}.
  \item \textbf{xor}, the hollow arc: a product variant must include exactly one
  of the features grouped into a xor group. In the example, the \ic{ElementType}
  must either \ic{int}, \ic{float}, or \ic{String}.
\end{itemize} 

The figure below shows the textual notation for feature models used in mbeddr.
Note how the constraint affects all children! We had to introduce the
intermediate feature \ic{options} to separate the mandatory stuff from the
optional stuff. Features can have configuration attributes (of any type!).
Children and attributes can be added to a feature via an intention. You can also
use a surround intention to wrap a new feature around an existing one.


\begin{center} 
  \includegraphics[width=130mm]{figures/cc/fminmbeddr.png}
\end{center}



\parhead{Defining Configurations} The point of a feature model is to define and
constrain the configuration space of a product. If a product configuration would
just be expressed by a bunch of boolean variables, the configuration space would
grow quickly, with $2^n$, where $n$ is the number of boolean config switches.
With feature models, constraints are expressed over the features, defining what
are valid configurations. This limits the space explosion and allows interesting
analyses that will be provided in later releases.

Let us now look at how to define a product variant as a set of selected
features. Below are two examples:

\begin{center} 
  \includegraphics[width=130mm]{figures/cc/twoconfigs.png}
\end{center}


Note that, if you create invalid configurations by selecting feature
combinations that are prohibited by the constraints expressed in the feature
model, errors will be shown.

Feature models and configurations can be defined in a root concept called
\ic{Variability- Support}. It lives in the \ic{com.mbeddr.cc.var.fm} language.


\subsection{Connecting implementation Artifacts Statically}

Static connection to artifacts means that artifacts are varied \emph{during the
generation process}. The mechanism provided by mbeddr is generic in that it can
be used with arbitrary artifacts expressed in arbitraray (MPS-based) languages.


\parhead{Presence Conditions} A presence condition is an annotation on a program
element that specifies, under which conditions the program element is part of a
product variant. To do so, the presence condition contains a boolean expression
over the configuration features. For example the two \ic{report} statements and
the message list in the screenshot below are only in the program, if the
\ic{logging} feature is selected. \ic{logging} is a feature defined in the
feature model \ic{FM} that is referenced by this root node.

\begin{center} 
  \includegraphics[width=8cm]{figures/cc/examplecode1.png}
\end{center}

To use presence conditions, the root note (here: an implementation module) as to
have a \ic{FeatureModelConfiguration} annotation. It can be added via an
intention if the \ic{com.mbeddr.cc.var.annotations} language is used in the
respective model. The annotation points to the feature model whose features
the respective presence conditions should be able to reference. The
configuration and the presence conditions are attached via intentions.

An existing presence condition can be \emph{pulled up} to a suitable parent
element by pressing \keystroke{Ctrl-Shift-P} on the presence condition.

The background color of an annotated note is computed from the expression.
Several annotated nodes that use the same expression will have the same color
(an idea borrowed from Christian Kaestner's CIDE).

\parhead{Replacements} A presence condition is basically like an \ic{\#ifdef}:
the node to which it is attached will \emph{not} be in the resulting system if
the presence condition is \emph{false}. But sometimes you want to \emph{replace}
something with something else if a certain feature condition is met. You can use
replacements for that.


\begin{center} 
  \includegraphics[width=8cm]{figures/cc/examplecode2.png}
\end{center}

A replacement replaces the node to which it is attached with an alternative node
if the condition is \emph{true}. In the example in the figure below the
function call and the \ic{10} are both replaced with a \ic{42}. Note that you'll
get an error if you try to replace a node with something that is not
structurally compatible, or has the wrong type.

\parhead{Attribute Injection} We have seen that features can have attributes and
configurations specify values for these attributes. These values can be injected
into programs. The attributes of those features that are used in ancestors of
the current node are in scope and can be used. A type check is performed and
errors are reported if the type is not compatible.

\begin{center} 
  \includegraphics[width=8cm]{figures/cc/examplecode3.png}
\end{center}

\greyboxnote{At this time, this can only be done for expressions. This may be
generalized later.}


\parhead{Projection Magic} It is possible to show and edit the program as a
product line (with the annotations), undecorated (with no annotations) as well
as in a given variant. The figure below shows an example. Note that due to a
limitation in MPS, it is currently not possible to show the values of attributes
directly in the program in variant mode. The projection mode can be changed in
the configuration annotation on the root node.


\begin{center} 
  \includegraphics[width=15cm]{figures/cc/projection.png}
\end{center}




\parhead{Building Variable Systems} Building variable systems is a little bit
tricky. The problem is that you will want to build different variants at the
same time. To make the C build simple, each variant should live in its own
module. This results in the following setup:

You create one or more models that contains your product line artifacts, i.e.
the program code, the feature models and the configurations. Then, for each
variant you want to build, you create yet another model. This model imports the
models that contain the product line artifacts. 


In each variant model you will have a build configuration that determines the
variant that will be built. It does so by including a configuration item:

\begin{lstlisting}[language=mbeddr]
Build System: 
  ... 

Configuration Items 
  variability mappings { 
    fm DeploymentConfiguration -> Debug 
  } 
 
Binaries 
  executable App isTest: true { 
    ... 
  }
\end{lstlisting} 


This configuration item determines which configuration should be used for each
feature model (\ic{Debug} in the example). To add this item, you need to use
the \ic{com.mbeddr.cc.var. buildconfig} language in your model.



\subsection{Implementing Variability in C code at Runtime}

Runtime variability means that the code in the binary can implement all products
of the product line (in some sense, it is the superset of all of them). The
decision as to which alternative to run is performed at runtime. Connecting a
program to a feature model this way is more invasive. The code has to be written
to take the variability into account explicitly. Also, the language used to
express the variable program has to provide constructs that connect to the
feature models. 

\greyboxnote{Currently, support is provided for C statements. Support for
additional languages will be provided later.}

\parhead{Representing Feature Models and Configurations at runtime} To be able
to make a variability decision at runtime, the information about the feature
model and the configurations must be made available at runtime. A C data
structure is used to represent the feature models. As of now, this data
structure is a \ic{struct} that has a boolean member for each
feature\footnote{A later generator will use bit fields to reduce the size of
the data in the running C program.}. 

The decision as to where (i.e. into which module) this data structure should go
must be made by the developer. To do so, a new language construct is available.
Consider the following feature model:

\begin{lstlisting}[language=mbeddr, morekeywords={Variability, Support,
feature, model}] 
Variability Support FeatureModels                                                                                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                                                                                                                         
feature model someFM 
  root ? { 
    f1             
    f2                                                                                                                                                                                                                                                                                                                 
    f3 [int8 attr]                                                                                                                                                                                                                                                                                                     
  }                                                                                                                                                                                                                                                                                                
\end{lstlisting}

To embed the corresponding data structure into a module, use the following code
(like any other module content, this element can be exported to make it visible
from other (importing) modules):

\begin{lstlisting}[language=mbeddr, morekeywords={feature, model, @, runtime,
for}] 
module TestFeaturesOnly { 
  feature model @ runtime for someFM 
}
\end{lstlisting}

Once this has been embedded, a new type \ic{fmconfig<..>} is available that can
be used whereever types are supported (local variables, arguments, global variables, component
fields). The type takes a \ic{feature model @ runtime} as an argument:

\begin{lstlisting}[language=mbeddr, morekeywords={feature, model, @, runtime,
for, fmconfig}]
module TestFeaturesOnly { 
  feature model @ runtime for someFM;
  fmconfig<someFM> currentConfig;
}
\end{lstlisting}

Variables of type \ic{fmconfig<..>} can hold the runtime representation of a
particular configuration model. Assigning a particular configuration to a
variable types as \ic{fmconfig<..>} happens via another special
construct. Assuming you have a configuration model \ic{Cfg3} for the \ic{someFM}
feature model, you can write:

\begin{lstlisting}[language=mbeddr, morekeywords={feature, model, @, runtime,
for, fmconfig, store, config, into}]
module TestFeaturesOnly { 
  feature model @ runtime for someFM;
  fmconfig<someFM> currentConfig;
  
  exported test case testAttribute { 
    store config<someFM, Cfg3> into currentConfig; 
  } 
}
\end{lstlisting}

The \ic{currentConfig} variable holds this configuration now; it can be
passed around like any other data using the \ic{fmconfig<someFM>} type.

\parhead{Writing Variant-Aware Code} As of now, variant-aware code relies on
using a \ic{switch}-like statement that switches over variants. In its simplest
form it looks like this:

\begin{lstlisting}[language=mbeddr, morekeywords={feature, model, @, runtime,
for, fmconfig, store, config, into, variant}]
module TestFeaturesOnly { 
  exported test case testAttribute {
    int8 x = 0; 
    variant<currentConfig>(f1) { x = 1; }  
  } 
}
\end{lstlisting}

The \ic{variant} statement refers to the configuration it depends on
(\ic{currentConfig} in the example) and then contains a boolean expression over
features in the underlying feature model. In the example above we just check if
the feature \ic{f1} is selected in the configuration, but we could write more
complex expressions as well. Also, arbitrary code can be put into the body of
the statement:

\begin{lstlisting}[language=mbeddr, morekeywords={feature, model, @, runtime,
for, fmconfig, store, config, into, variant}]
variant<currentConfig>(f1 || f2 && !f3) { 
  x = 1;
  int8 morestuff = x; 
  callAFunction(x); 
}  
\end{lstlisting}

This example looks more like an \ic{if} --- and in fact, this is exactly how it
works\footnote{The reason why we don't just use an \ic{if} is the support for
verification described below.}. Using an intention, more cases and a default can
be added\footnote{No \ic{break} is needed in this construct. Only one
\ic{case} will ever by executed. The first one that matches wins.}:

\begin{lstlisting}[language=mbeddr, morekeywords={feature, model, @, runtime,
for, fmconfig, store, config, into, variant, default}]
variant<currentConfig> { 
  case (f2) { x = 2; } 
  case (f1) { x = 3; } 
  default { x = 4; } 
}
\end{lstlisting}

It is also possible to access the values of feature attributes from the code:

\begin{lstlisting}[language=mbeddr, morekeywords={feature, model, @, runtime,
for, fmconfig, store, config, into, variant, default}]
variant<currentConfig>(f3) { x = f3.attr; }
\end{lstlisting}

Note that using the \ic{feature.attr} notation is only possible inside a
\ic{variant} statement.

\parhead{Configuring Components} A particularly useful case for runtime
variability is the configuration of component instances. In this case you define
a feature model for a component, and each instance has its own configuration
model that determines the instance's configuration. Here is an example of a
component:

\begin{lstlisting}[language=mbeddr, morekeywords={feature, model, @, runtime,
for, fmconfig, store, config, into, variant, default, init, internal}]
exported component C extends nothing { 
  
  init fmconfig<CompFeatures> cfg; 
  
  internal int8 getNumber() <- no trigger { 
    int8 x = 0; 
    variant<cfg>(returnTheBigNumber) { x = 10; } 
    return x; 
  }  
}
\end{lstlisting}
 
We have defined an init field for the component that is typed with an
\ic{fmconfig<..>} type that references a feature model. We can then use the
well-known \ic{variant} statement to make the code depend on features. 

So far this is very similar to what we have described for non-component code
earlier. The next step would be to use the \ic{store config} to assign an
instance configuration. However, \ic{store config} is a \ic{Statement}, and it
cannot be used where instances are created. Instead, we have created special
support (\ic{CfgBig} and \ic{CfgSmall} are two configuration models for the
\ic{CompFeatures} feature model):

\begin{lstlisting}[language=mbeddr, morekeywords={instances, instance}]
instances exampleInstances { 
  instance C cbig(config = CfgBig) 
  instance C csmall(config = CfgSmall) 
}
\end{lstlisting}

To use this additional construct, you have to use the
\ic{com.mbeddr.cc.var.rt.comp} language in your model.


\parhead{Verifying the Code} As of now, no verification for the code is
available. However, in the future, the following verification will be supported:

\begin{itemize}
  \item Is an expression in a \ic{case} actually allowed based on the
  constraints expressed in the underlying feature models?
  \item Are the various cases mutually exclusive?
  \item If no \ic{default} is given, are all other cases explicitly taken care
  of? 
  \item When accessing a feature attribute: is the respective feature actually
  selected in the current context
\end{itemize}









