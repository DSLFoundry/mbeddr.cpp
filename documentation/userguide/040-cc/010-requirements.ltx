\chapter{mbeddr.cc --- Cross-Cutting Concerns} 

\section{Requirements}
\label{details_reqs}

\todo{Aktualisieren}

The requirements package supports the collection of requirements and
traceability from arbitrary code back to the requirements.

\begin{center} 
  \includegraphics[width=12cm]{figures/cc/requirements1.png}
\end{center}

\subsection{Specifying Requirements}

Requirements can be collected in instances of \ic{RequirementsModule}, a root
concept defined by the \ic{com.mbeddr.cc.requirements} language. An example is
shown above. Each requirement has an ID, a short prose summary,
and a kind. (\ic{functional}, \ic{timing}). The kind, however, is more than just
a text; each kind comes with its own additional specifications. For example, a
\ic{timing} requirement requires users to enter a \ic{timing} specification.
This way, additional formal data can be collected for each kind of requirement.
 

In addition to the summary information discussed above, requirements can also
contains details. The details editor can be opened on a requirement with an
intention or with \keystroke{Ctrl-Shift-D}:

\todo{new figures?}

\begin{center} 
  \includegraphics[width=10cm]{figures/cc/requirements2.png}
\end{center}


In the details, a requirement can be described with additional prose, with the
kind-specific formal descriptions as well as with additional constraints among
requirements. The default hierarchical structure represents refinement: child
requirements refine the parent requirements. In addition, each requirement can
have typed links relative to other requirement, such as \ic{conflicts with} or
\ic{requires also}.


Requirements modules can import other reqirements modules using the \ic{import}
section. This way, large sets of requirements can be modularized.

\parhead{Searching Requirements} It is possible to search whole models for text
substrings, including the contents of requirements. This facility is discussed
in \sect{searching}.



\parhead{Filtering and Summarizing} It is possible to filter requirements when
viewing them in a requirements module. At the top right of a requirements module you can select from a set of
filters, including filtering by \ic{summary}, \ic{name}, or \ic{trace status}.
Filters are and'ed together by default. However, explicit \ic{and} and \ic{or}
filters are available as well. New filters (which may filter on project
specific additional data) can be created by extending the
\ic{RequirementsFilter} concept and implementing its \ic{matches} behavior
method. As an example, here is the code for the \ic{name contains substring}
filter:

\begin{lstlisting}[language=mps]
public boolean matches(node<Requirement> r) 
  overrides RequirementsFilter.matches { 
  if (this.substring == null || this.substring.equals("")) { return true; } 
  r.name.contains(this.substring); 
}                                                                                                                                                                                                        
\end{lstlisting}

A similar facility exists for summarizing requirements. The only currently
implemented summarizer counts the requirements (taking the filters into
account). Custom summarizers may be used, for example, to sum up efforts.

\parhead{CSV Import} Requirements can be imported from a CSV file. To do this,
use the \ic{requirements.csv} language in your program and use the respective
intention to attache a \ic{CsvImportAnnotation} to your requirements module:

\begin{center} 
  \includegraphics[width=10cm]{figures/cc/csvImport.png}
\end{center}

There, you can specify the CSV file from which to import (you can use MPS path
variables there!), as well as the element separator (defaults to \ic{;}) and the
quotation character (defaults to \ic{"}). To run the actual import, use the
\ic{(Re-)Import} intention. 

The mapping from the CSV file fields to the contents of a \ic{Requirement} node
is of course project specific. Hence this mapping is modularized by an
\ic{IRequirementsMapper}. You have to create an implementing concept for your
project. In the respective behavior you have to implement the following method:

\begin{lstlisting}[language=mps]
public virtual abstract boolean map(string[] elements, node<Requirement> req);                                                                           
\end{lstlisting}

The framework passes in a CSV line (as an string array) as well as a new
\ic{Requirement}. The implementation of the method has to fill the requirement
with the data from the \ic{elements} array. Two additional optional methods are
available. \ic{extractID} returns the identifying string from the \ic{elements}
array (this is what will become the requirement ID). It defaults to the first
element\footnote{The ID is important because when you reimport a CSV file, the
\ic{Requirement} nodes for existing requirements are kept the same so references
to it do not break.}:

\begin{lstlisting}[language=mps]
public virtual string extractID(string[] elements, boolean dummy) { 
  elements[0]; 
}
\end{lstlisting}

The second optional method \ic{getParentRequirement} returns the requirement
under which the newly created one should be attached. This is the way to
construct requirement trees. It defaults to \ic{null} which means that the new
requirement has no parent --- it is added to the requirements module on top
level.

\begin{lstlisting}[language=mps]
public virtual node<Requirement> getParentRequirement(
     node<RequirementsModule> rm, node<Requirement> req, string[] elements) { 
  return null; 
}
\end{lstlisting}



\subsection{Extending the Requirements Language}

To extend the requirements framework, create a new language that extends
\ic{com.mbeddr. cc.requirements}. Then, use this language in the project that
manages your requirements.

\parhead{A new Link} To create a new link, create a concept that extends
\ic{RequirementsLink}. It base class already comes with a pointer to the target
requirement. Just define the concept and an alias.

\parhead{A new Kind} To create a new requirements kind, extend
\ic{RequirementsKind} and define an alias. 

\begin{center} 
  \includegraphics[width=12cm]{figures/cc/reqkind.png}
\end{center}

\parhead{A new Additional Specification} Defining new additional
specifications (such as the \ic{timing} specification mentioned above) happens
in two steps. First you have to create a new concept that extends
\ic{RequirementsData}. It should contain any additional structure you need
(this can be a complete MPS DSL, or just a set of pointers to other
nodes). You should also define an alias. The second step requires enforcing that
a certain requirements kind also requires that particular additional
specification. In the respective kind, use the \ic{requiredDataKind} concept
link to point to the concept whose instance is required. 









\subsection{Tracing}
\label{reqtrace}

Tracing establishes links between implementation artifacts (i.e. arbitrary MPS
nodes) and requirements. The trace facilities are implemented in the 
\ic{com.mbeddr.cc.trace} language. Below is an example of requirements
traces.

\begin{center} 
  \includegraphics[width=7cm]{figures/cc/trace.png}
\end{center}


Traces can be attached to any MPS node using an intention. However, for this to
work, the root owning the current node has to have a reference to a requirements
module. This can be added using an intention. Only the requirements in the
referenced modules can be referred to from a trace. 

There is a second way to attach a trace to a program element: go to the target
requirement and copy it (\keystroke{Ctrl-C}). Then select one or more program
nodes and press \keystroke{Ctrl-Shift-R}. This will attach a trace from each of
these elements to the copied requirement.

A trace can have a kind. By default, the kind is \ic{trace}. However, the kind
can be changed (\keystroke{Ctrl-Space} on the \ic{trace} keyword.)
 
\parhead{Extending the Trace Facilities} New trace kinds can be added by
creating a new language that extends \ic{com.mbeddr.cc.trace}, using that
language from your application code, and defining a new concept that extends
\ic{TraceKind}.


\subsection{Other Traceables}
\label{otherTraceables}

The tracing framework cannot just trace to requirements, but to any concept that
implements \ic{ITraceTarget}. For example, a functional model may be used as a
trace target for implementation artifacts. In this section we explain briefly
how new trace targets can be implemented. We suggest you also take a look at
implementation of \ic{com.mbeddr.cc.requirements}, since this uses the same
facilities.

\begin{itemize}
  \item Concepts that should act as a trace target must implement the
  \ic{ITraceTarget} interface (e.g. \ic{Requirement})
  \item The root concept that contains the \ic{ITraceTarget}s must implement the
  \ic{ITrace- TargetProvider} and implement the method \ic{allTraceTargets}.
  \item In addition, you have to create a concept that extends
  \ic{TraceTargetProvider-\\RefAttr}. It references \ic{ITraceTargetProvider}s.
  \item Finally you have to implement a subconcept of \ic{TraceTargetRef} that
  represents the actual reference to the new kind of target. 
\end{itemize}

Here is how the whole system works: You attach a \ic{TraceAnnotation} to a
program element. It contains a set of \ic{TranceTargetRef}s which in turn
reference \ic{ITraceTarget}s. To find the candidate trace targets, the scoping
rule of \ic{TranceTargetRef} ascends the tree to the current root and checks if
it has something in the \ic{traceTargetProviderAttr} attribute. That would have
to be a subtype of \ic{TraceTargetProviderRefAttr}. It then follows the
\ic{ref}s references to a set of \ic{ITraceTargetProvider} and asks those for
the candidate \ic{ITraceTarget}.



\subsection{Evaluating the Traces in Reverse}

The traces can be evaluated in reverse order. For example, as shown in the
figure below, requirements can be color-coded to reflect their state. Traced
requirements are grey, implemented ones are blue, and tested ones are green and
untraced requirements are red. The color codes must be updated explicitly (may
take a while) by the \ic{Update Trace Stats} intention on the requirement
module.

In addition, MPS Find Usages functionality has been enhanced for requirements.
If the user executes Find Usages for requirements, the various kinds of traces
are listed separately in the result (see below, right side).

\begin{center} 
  \includegraphics[width=130mm]{figures/cc/traceReverse.png}
\end{center}

























 