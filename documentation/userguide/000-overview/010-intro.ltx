\chapter{Overview over mbeddr} 
\label{mbeddrintro}

\section{Introduction and Motivation for mbeddr}

Embedded software is software that is embedded in some kind of mechanical or
electronic device, often controlling most of the functionality of that
device. Today, embedded software is one of the main innovation
drivers and differentiation factors in many kinds of products~\cite{ABB+09}.
 
Embedded systems are highly diverse, ranging from rather
small systems such as refrigerators, vending machines or intelligent sensors
over building automation to highly complex and distributed systems such as
aerospace or automotive control systems.
This diversity is also reflected in the constraints on their respective
software development approaches and cost models. For example, flight control
software is developed over many years, has a large budget, an expert team and
emphasizes safety and reliability. The less sophisticated kinds of embedded
systems mentioned above are developed in a few months, often with severe budget
constraints and by smaller teams. The requirements for safety and reliability
are much less pronounced.

\parhead{Today's Development Tools} The tools used to develop these systems
reflect these differences. Highly safety-critical systems are often developed
with tools such as
SCADE\footnote{\url{http://www.esterel-technologies.com/products/scade-suite/}}.
Systems that are based on a standardized architecture or middleware, such as
AUTOSAR in the automotive domain, are often developed with tools that are
specific to the standard (such as Artop\footnote{\url{http://www.artop.org/}}).
Model-based development and automatic code generation is particularly well
suited for systems that are highly structured in terms of state-based behavior
or control algorithms. Tools like ASCET-SD\footnote{\url{http://www.etas.com/}}
or Simulink\footnote{\url{http://www.mathworks.com/products/simulink}} provide
suitable predefined, high-level abstractions (e.g. state machines or data flow
diagrams). Using higher-level abstractions leads to more concise programs and
simplified fault detection using static analysis and model checking (for example
using the Simulink Design
Verifier\footnote{\url{http://www.mathworks.com/products/sldesignverifier}}).


However, the state of the practice
\cite{2009_ebertc_embedded_software_facts_figures_future} is that 80\% of
companies implement embedded software in C, particularly systems that are
\emph{not} safety-critical or implement control algorithms. While C is good at
expressing low-level algorithms and produces efficient binaries, its limited
support for defining custom abstractions can lead to code that is hard to
understand, maintain and extend.

Empirical studies found out that there is a need for tools that are more
specific for an application domain yet flexible enough to allow adaptation
\cite{2003_graaf_embedded_software_engineering_state_of_practice,2009_liggesmeyer_trends_in_embedded_software_engineering}.
Domain-specific languages (DSLs) are increasingly used for
embedded software
\cite{2010_axelsson_feldspar_dsl_for_dsp,2003_hammond_hume_dsl_for_rt_embedded_systems,2009_andalam_pret_c_language_for_programming_timed_architectures}.
Studies such as~\cite{Altran:2011} and
\cite{2009_liggesmeyer_trends_in_embedded_software_engineering} show that
DSLs substantially increase productivity in embedded
software development. Examples include Feldspar,
\cite{2010_axelsson_feldspar_dsl_for_dsp} a DSL embedded in Haskell for digital
signal processing; Hume~\cite{2003_hammond_hume_dsl_for_rt_embedded_systems}, a
DSL for real-time embedded systems as well
as~\cite{2008_gokhale_model_driven_middleware}, which uses DSLs for addressing
quality of service concerns in middleware for distributed real-time systems.
All these DSLs are \emph{external} DSLs. While
they typically generate C code, the DSL program is not syntactically integrated  with
C. This is useful for some cases, but it is a limitation for others.
Extending C to adapt it to a particular problem domain is not new:
\cite{PalopoliAB99} describes an extension of C for real time applications,
\cite{Boussinot91} proposes an extension for reactive systems,
\cite{Ben-AsherFR96} describes an extension for shared memory parallel systems.
However, these are all \emph{specific} extensions of C, typically created by
invasively changing the C grammar, and they typically do not include IDE
support.

\parhead{The mbeddr Approach} mbeddr is fundamentally different. While it builds
heavily on domain-specific abstractions, mbeddr is an \emph{open framework} and
tool for defining \emph{modular} extensions of C, based on the underlying MPS
language workbench (\fig{screenshot} shows an example). In contrast to
essentially all other embedded development tools we are aware of, third parties can use \emph{the same} mechanisms for
building their own extensions that were used to implement C and the existing
extensions. Third parties are \emph{not} at a disadvantage from having to use
limited second-class language extension constructs. This is a fundamental shift
in the design of tools.

\begin{figure} \centering
\includegraphics[width=140mm]{figures/overview/screenshot3.png} 
\caption{An
mbeddr example program using five separate but integrated languages. It contains
a module with an \ic{enum}, a state machine (\ic{Counter}) and a function
(\ic{nextMode}) that contains a decision table. Inside both of them developers
can write regular C code. The IDE provides code completion
for all language extensions (see the \ic{start}/\ic{stop} suggestions) as well
as static error validation (\ic{Error\ldots} hover).
The green \ic{trace} annotations are traces to requirements that can be attached
to arbitrary program elements. The red parts with the \ic{\{resettable\}} next
to them are presence conditions: the respective elements are only in a program
variant if the configuration feature \ic{resettable} is selected. }
\label{screenshot}
\vspace{-3mm}
\end{figure} 


mbeddr also directly integrates formal analyses based on the domain-specific
extensions. Even though formal analysis tools for C programs exist (\eg\
deductive verification and abstract interpretation with different plugins for
Frama-C\footnote{\url{http://frama-c.com}}; model checkers like
SLAM\footnote{\url{http://research.microsoft.com/en-us/projects/slam/}} and
BLAST\footnote{\url{http://mtc.epfl.ch/software-tools/blast/index-epfl.php}}, or
commercial tools such as the Escher C
Verifier\footnote{\url{http://www.eschertech.com/products/ecv.php}} or
Klocwork\footnote{\url{http://www.klocwork.com/}}), they are considered by many
practitioners as hard-to-use expert tools and are often avoided.
This is because verifying \emph{domain-level} properties (as opposed to low
level properties of the code such as read-before-write errors) requires complex
code annotations (\eg\ Frama-C) or the use of tool-specific property
specification languages. It is also difficult to re-interpret the analysis
results on the domain
level~\cite{2002_loer_usable_and_relevant_model_checking_technique_for_analysis_of_dependable_systems}.
mbeddr makes formal analyses more accessible by relying on high-level,
domain-specific language constructs (such as state machines or decision
tables), making it easier to specify verification properties and interpret
results.



 

Language extension is much more
powerful than the alternatives available to C programmers today. In contrast to
libraries, language extensions can lead to low runtime overhead because they are
statically translated to C.
They also provide extensions to the type system and the IDE. Macros can have
similarly low overhead, but extensions of the type system and the IDE are not
supported. Also, since macros are text transformations, all kinds of
maintainability problems can result from excessive use of macros.
Nevertheless, many macro libraries, such as
Protothreads~\cite{2006_dunkels_protothreads} (which implements lightweight
threads), SynchronousC~\cite{2009_hanxleden_synccharts_in_c} and
PRET-C\cite{2010_andalam_predictable_multithreading_pretc} (both adding
constructs for deterministic concurrency and preemption), are good candidates
for abstractions that could be reified as language extensions based on mbeddr.

In private communication with the authors, a potential user from a major vendor
of heating systems told us that he likes mbeddr because it is right in the
middle between programming in C and high-level, rigid modeling tools, with the
added benefit of extensibility. He argued that mbeddr lets him add
language-level support for the abstractions relevant for his platform ("I can
build my own AUTOSAR-like infrastructure for the heating systems domain with
very little effort"). This is a nice summary of how mbeddr is to be
used.


\section{The mbeddr Stack}
\label{stack}

As \fig{mbeddr-stack} shows, mbeddr can be seen as a matrix. On the
horizontal axis it is separated into an implementation concern (left) and
an analysis concern (right). On the vertical axis it consists of a number
of layers. 

\begin{figure}
\vspace{-3mm}
\centering   
\includegraphics[width=\columnwidth]{figures/overview/mbeddr-stack.png}  
\caption{The mbeddr stack at a glance. Details are explained in the running
text (\sect{stack}).}
\label{mbeddr-stack}
\vspace{-3mm}
\end{figure}

\noindent At the center is the MPS language workbench. On top of MPS, mbeddr
ships with a number of core languages. On the implementation side the core
language is C. On the analysis side, the core comprises languages that represent
different analysis formalisms, currently SMT (satisfiability modulo theories)
solving~\cite{SMTBasics} and model checking~\cite{ModelChecking}.
The next layer up consists of default extensions. On the implementation side
mbeddr ships C extensions for interfaces and components, physical units, state
machines plus various smaller ones, such as decision tables (an example is at
the bottom of \fig{screenshot}). These build on top of C and also translate back
to C during generation. On the analysis side the default extensions include
support for model checking state machines and for checking the completeness and
determinism of decision tables. Below the common platform JetBrains MPS, mbeddr
integrates existing tools: a C compiler for the implementation side (\ic{gcc} by
default, but it can be exchanged), as well as the
CBMC\footnote{\url{http://www.cprover.org/cbmc/}} C-model checker. On top of the
default extensions, users can develop their own application level DSLs. These
typically rely on the core and default extensions either by directly
extending (and translating back to) languages from those layers or by embedding
subsets of the languages from these layers into new application level DSLs.





 