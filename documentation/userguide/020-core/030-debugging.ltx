\section{Debugging}
\label{details_debugging}

mbeddr comes with a Debugger for core C. The debugger can also debug the
standard extensions and is extensible for user-defined extensions. In this
section we describe how to debug C programs.

\greyboxnote{We assume the default configuration, where we use \ic{gdb} as the
debug backed. Debugging on some target device is not yet supported.}

The Hello World project contains a model called \ic{Debugger.Example} that
contains a simple program that makes use of a number of C extensions. We will
use this program to illustrate debugging.

\begin{lstlisting}[language=mbeddr, morekeywords={}]
module DebuggerExample from Debugger.Example imports nothing { 
   
  int8 add(int8 x, int8 y) { 
    return x + y; 
  } 
   
  exported test case testAdding { 
    assert(0) add(1, 2) == 3; 
    assert(1) add(2, 4) == 6; 
  } 
   
  int32 main(int32 argc, int8*[ ] argv) { 
    return test testAdding; 
  } 
}
\end{lstlisting}

\subsection{Creating a Debug Configuration}

We start out by creating a new debug configuration as shown in the figure below:

\vspace{-4mm}

\begin{center} 
  \includegraphics[width=11cm]{figures/core/debugger2.png}
\end{center}

\vspace{-4mm}

In the resulting dialog, name the new configuration \ic{DebuggerExampleConfig}
and select the \ic{Debugger.Example.DebuggerExample} executable via the \ic{...}
button (this executable is defined in the build configuration of the debugger
example). \ic{Launch timeout} control in \emph{ms} how long the debugger should
wait for a connection setup to the underlying C debugger, \ic{command timeout} 
does the same for the execution of debug commands (increase this value,
if your experience problems). \ic{Run Make} creates a executable
with debug symbols in it (necessary for the debugger).

\vspace{-4mm}
\begin{center} 
  \includegraphics[width=11cm]{figures/core/debugger3.png}
\end{center}
\vspace{-4mm}
The launch configurations drop down at the top of the MPS screen should now
show this new configuration:

\begin{center} 
  \includegraphics[width=6cm]{figures/core/debugger4.png}
\end{center}


\subsection{Running a Debug Session}

Before we can run the debugger, we have to make sure the C code for the program
has been generated. So select \ic{Rebuild} from the context menu of the
\ic{Debugger.Example} model or press \ic{Ctrl-F9}.

Now set a breakpoint in the first line of the test case. You can set breakpoints
by clicking into the gutter of the editor. The result should look like this:

\begin{center} 
  \includegraphics[width=11cm]{figures/core/debugger1.png}
\end{center}

Next, run the previously created debug configuration by pressing
\keystroke{Shift-F9} or by selecting the debugger button in the MPS title bar
(see next figure).

\begin{center} 
  \includegraphics[width=6cm]{figures/core/debugger5.png}
\end{center}

The debugger should start up and stop at the breakpoint we had set before.

\begin{center} 
  \includegraphics[width=11cm]{figures/core/debugger6.png}
\end{center}

Next, press \ic{F8} to \emph{step over} the current line and then press \ic{F7}
to \emph{step into} the \ic{add} function on the second line of the test case.
Once inside the function, you can see the nested stack frames as well as the
local variables \ic{x} and \ic{y}.

\begin{center} 
  \includegraphics[width=11cm]{figures/core/debugger7.png}
\end{center}


