\section{Importing existing Header Files}
\label{headerimport}

To be able to call into existing libraries you have to be able to access the
contents defined in their header files. As we have discussed in \sect{modules},
the way to do this is to create an external module. However, typing the contents
into MPS is obviously not productive. This section explains how to automatically
import them. 

\greyboxnote{MPS provides a built-in way for accessing external code. This
mechanism is called stubs. However, we decided not to use it since importing C
code is much more sophisticated than Java, and all kinds of configurations have
to be performed that cannot be easily integrated into MPS' stub mechanism.}

\subsection{An Example}

In this section we import the \ic{stdio} header file. The code for this example
is also in the Hello World project, in the \ic{HeaderImport} solution. We first
create a new, empty model. In the model we create a \ic{HeaderImportSpec} object
(from the \ic{cstubs} language). Initially it looks as follows:

\begin{center}  
  \includegraphics[width=11cm]{figures/core/headerImport1.png}
\end{center}

In the \ic{path} property we set the path to a directory that contains the set
of header files we want to import. Note that you can use the \ic{...} button to
bring up a directory selection dialog. You can also use MPS' path variables in
the path specification, using the familiar \ic{\$\{the.var.name\}}
notation\footnote{Note that the example application ships with \ic{stdio.h} in
the solution's \ic{inc} directory.}.

Once you have specified the path, you can press the \ic{(Re-)import Headers}
button. This will import the headers in the specified directory. A result dialog
will report any problems with the import.

If you then open the resulting external module in MPS, you will see a number of
errors. They result from the fact that no type size configuration is in you
model yet. If you add one, the errors should go away.

Let us now create a program that uses the imported header. Create a new model
and open its properties. Add the model that contains the imported header files
to its \ic{Imported Models} section:

\begin{center}  
  \includegraphics[width=11cm]{figures/core/importedModel.png}
\end{center}


You can now create a minimal program ($Code \rightarrow Make Minimal System$) in
the \emph{importing} model. In the \ic{imports} section of the resulting
implementation module you can now add \ic{stdio}. In the main function you can
now use, for example, \ic{printf}:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
module UsingIO imports stdio { 
   
  int32 main(int32 argc, int8*[] argv) { 
    printf("Hello World"); 
    return 0; 
  } main (function) 
} 
\end{lstlisting}

To make the program run, you also have to add the \ic{stdio} external module to
the build configuration:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
executable UsingIO isTest: false { 
  used libraries 
    << ... >> 
  included modules 
    UsingIO (HeaderImport/HeaderImport.main) 
    stdio (HeaderImport/HeaderImport.imported) 
} 
\end{lstlisting}

You can now rebuild the solution and run the generated \ic{make} file from the
command line:

\begin{lstlisting}
HelloWorld/solutions/HeaderImport/source_gen/HeaderImport/main (master)$ make
rm -rf ./bin 
mkdir -p ./bin 
gcc    -c -o bin/UsingIO.o UsingIO.c -std=c99 
gcc -o UsingIO bin/UsingIO.o   -std=c99  
\end{lstlisting}

Finally, you can run \ic{UsingIO}. It should print \ic{Hello World} onto the
command line.


Note that this header file was special in the sense that it doesn't require to
link some library or object file that contains the implementation for the
functions defined in the header file. This is because it is part of the standard
library. If you were to import arbitrary other header files, you may have to add
a \ic{linkable} to the external module's \ic{resources}. 
 

\subsection{Tweaking the Import}

Importing header files is not as simple as it may seem initially. In this
section we discuss some of the things you can do when importing headers that
"don't look right".

\parhead{Defined \#defines} Header files can express product line variability
using \ic{\#ifdef}s. These use preprocessor constants as in 
\ic{\#ifdef SOMETHING}. To import a header file correctly you may have to define
a number of these constants. This can be done in this section:

\begin{center}  
  \includegraphics[scale=0.6]{figures/core/defineddefines.png}
\end{center}

\parhead{Mappings} Some header files use platform-specific directives that
cannot be parsed by the Eclipse CDT parser that underlies the header file
import. These must be removed (or changed) before parsing the file. The header
file importer comes with a preprocessor that can remove or change such
unparsaeble code\footnote{Note that this is not a problem in the final system,
since the C code generated from mbeddr will include the actual header file,
not a generated version of the external module. So the final system (which is
assumed to be processed by a compiler that understands the platform-specific
stuff) will see these things unchanged.}.

\parhead{Regular Expression Mappings} This is the same as in the previous
paragraph, except that the a regular expression can be used.

\parhead{Header Files} This sections shows all header files located in the
directory defined in the \ic{Include Path} property. Sometimes a header file
does not include some other header file explicitly, although it should. The
compiler seems to not care ... mbeddr, does care, however. By marking a header
file as \ic{default include}, this header will be added to the \ic{import}
section of all other headers. 



\subsection{Limitations}

Importing header files is not as simple as it may seem (heard that before :-)?),
and our current importer still has some limitations.

\parhead{\#ifdef Variability} At this point we cannot yet map product line
variability expressed with \ic{\#ifdef}s onto the product line variability
mechanism of mbeddr. Hence, as discussed above, \emph{only a particular variant}
can be imported, which is why we have the \emph{Defined \#defines} section
above.

\greyboxnote{Note that we will be working on improving this situation.}

\parhead{Complex Expressions} We cannot parse complex expressions used in
\ic{\#defines} at this point. Assume the following example:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
#define SOMETHING 10 + SOME_OTHER_DEFINE + 3
\end{lstlisting}

Since we cannot parse such expressions, we represent them as an opaque string in
the external module, like this:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported #define SOMETHING = (void) 10 + SOME_OTHER_DEFINE + 3 
\end{lstlisting}

Since we cannot parse the expression, MPS cannot calculate the type, so
\ic{SOMETHING} is typed to be \ic{void}. Of course, if you reference 
\ic{SOMETHING} from application code, the type check will fail (e.g. if you
write \ic{SOMETHING + 3} it won't work since you cannot add \ic{void} to an
integer). To solve this problem, you have to change the type manually in the
imported external module:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported #define SOMETHING = (int8) 10 + SOME_OTHER_DEFINE + 3 
\end{lstlisting}



