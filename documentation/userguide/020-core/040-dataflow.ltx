\section{Data flow analyses}
\label{details_dataflow}

mbeddr comes with support for data flow analyses for the C core. Currently we can detect uninitialised and unused variables, unused assignments, missing return statements and dead code. Additionally we have implemented a constant detection analysis to detect variables which are constant through the program flow but are not defined as constants, and an analysis to track the values of variables. If you decide to use these two analyses you should add com.mbeddr.core.dataflow in the model properties as a used language.
The data flow analyses are realised with the MPS data flow framework (for further information please take a look at the\href{http://confluence.jetbrains.net/display/MPSD25/Dataflow}{ MPS Dataflow Cookbook} and the \href{http://confluence.jetbrains.net/display/MPSD25/Dataflow}{dataflow section of the MPS user guide}). If you want to inspect the data flow graph, which is used for the analyses, you can right click a node in your mbeddr C program and select  \textbf{Show Data Flow Graph} from the \textbf{Language Debug}  context menu. If you decide that the provided data flow information is not useful, we have introduced an annotation to disable the analyses. This annotation can be attached to e.g. a C function with the \textbf{Toggle Do Not Analyze Data Flow Annotation} intention. Additionally you have the possibility to disable all or a specific analysis in the \textbf{Analyze} menu of the main menu.

This section provides a short overview of these analyses and explains the warning or error messages with the help of some examples. 

\subsection{Uninitialized Variables}
Writing and reading variables is modelled with MPS data flow read and write instructions.

\vspace{-4mm}

\begin{center} 
  \includegraphics[width=11cm]{figures/core/dataflow1.png}
\end{center}

\vspace{-4mm}

The usage of an uninitialized variable is detected if there is no write instruction before a read instruction of the corresponding variable in the data flow graph. In the example function the reference to variable \ic{a}, used in the post increment expression, is not marked with a warning or error message, as the variable has been initialised in the variable declaration. On the other hand the references to the variables \ic{b} and \ic{c} could lead to errors. The reference to variable \ic{b} is marked with an error message, as the analysis detects that the variable is not initialized. The reference to variable c is marked with a warning message indicating that the variable may not have been initialised.  


\subsection{Unused Variables}
Variables which are never used can be detected by looking for variables for which neither a read nor a write instruction exists in the data flow graph. If such a variable is detected the variable declaration is marked with a warning message. To detect variables as unused which are initialized (a write instruction exists in the data flow graph) but never read, the data flow graph is searched for write instructions with no consecutive read instruction. In this case, the initializer of the variable is marked with a warning message. The following figure contains an example C function with an unused variable and a redundant initializer.

\vspace{-4mm}

\begin{center} 
  \includegraphics[width=11cm]{figures/core/dataflow2.png}
\end{center}

\vspace{-4mm}

\subsection{Unused Assignments}
Unused assignments can be detected by searching for write instructions with no consecutive read instruction of the same variable in the data flow graph. The C function \ic{unusedAssignmentsExample} is a simple example for an unused assignment. 

\vspace{-4mm}

\begin{center} 
  \includegraphics[width=11cm]{figures/core/dataflow3.png}
\end{center}

The \ic{int32} variable \ic{a} is initialised with the value \ic{1}. Afterwards it is read in the condition of the if statement. Therefore the assignment is used. In an assignment expression the value \ic{0} is assigned to the variable. As the variable is never used again, this assignment can be marked with a warning message, indicating the superfluous assignment. 

\subsection{Missing Returns}
To represent return statements in the data flow graph a return instruction is provided by the MPS data flow framework. To detect C functions with missing return statements the last instruction of the data flow graph is used. If any path to this instruction through the data flow graph with no return instruction exists, a return statement is missing.
The following figure shows an example C function with a missing return. 
\vspace{-4mm}

\begin{center} 
  \includegraphics[width=11cm]{figures/core/dataflow4.png}
\end{center}

\vspace{-4mm}

\subsection{Dead Code}
Dead code regions can be detected by searching the data flow graph for program flow paths which are not reachable from the first instruction of the data flow graph.
An example is given in the following figure.

\vspace{-4mm}

\begin{center} 
  \includegraphics[width=10cm]{figures/core/dataflow5.png}
\end{center}

\vspace{-4mm}


The first condition will always be false, therefore the then part of the if statement can not be reached. As the condition of the else if part is always true, the else part can never be reached too. Therefore there are two dead code regions in the example C function, which are marked with error messages. 

\subsection{Constant Detection}
With a constant detection analysis we can detect variables, which have a constant value for all executions of the program, but are not declared as a C \ic{const}. Currently only assignments which assign a statically evaluatable expressions to a variable are used for this analysis. If an not evaluatable expression is assigned to a variable, it is assumed that this variable is not a constant.
The following figure shows an example C function for the constant propagation analysis. 

\vspace{-4mm}

\begin{center} 
  \includegraphics[width=11cm]{figures/core/dataflow6.png}
\end{center}

\vspace{-4mm}

The value assigned to the variable a is 1 for all executions of the program, throughout the complete program. Therefore the variable declaration is marked with a warning message. To disable this message, use the Toggle Const intention with the variables's type node selected.
If the value of a variable changes while executing the program, in the above C function the value of b can be either 1 or 2, the variable declaration is no longer marked as a constant.

\subsection{Constant Propagation}
Similar to the constant detection analysis, we track the values of variables through the program flow. This analysis is used to mark expressions with warning messages, if the evaluation of the expression at this point in the program flow will always return the same result. 
\vspace{-4mm}

\begin{center} 
  \includegraphics[width=11cm]{figures/core/dataflow7.png}
\end{center}

\vspace{-4mm}

In the C function above, the values of the variables a and b are tracked. Therefore the expression \ic{a < b} can be statically evaluated to true, which is indicated as a warning. 
