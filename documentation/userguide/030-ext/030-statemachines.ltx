\section{State Machines}
\label{details_statemachines}

State machines can be used to represent state-based behavior in a structural
way (they can also be analyzed via model checking, however, we do not discuss
this in this section). They are module contents and can be added to arbitrary
models. Use the devkit \ic{com.mbeddr.statemachines}.

\subsection{Hello State Machine}

The following is the simplest possible state machine. It has one state and one
in event. Whenever it receives the \ic{reset} event, it goes back to its single
state \ic{start}. In other words, it does nothing.

\begin{lstlisting}[language=mbeddr, morekeywords={}]
statemachine WrappingCounter initial = start { 
  	in reset() 
    state start { 
      on reset [ ] -> start {  } 
    } 
}
\end{lstlisting}

\todo{Can use all types; bounded only when verifiable}

However, it is a valid state machine and can be used to illustrate some
concepts. State machines have in events. These can be ``injected'' into the
state machine from a C program. State machines have one or more states, and one
of them must be the initial state. A state may have transitions; a transition
reacts to an in event and then points to the new state.

Events can have arguments; they are declared along with the event. Notice how
the \ic{int} type requires the specification of bounds. This is to simplify
model checking.

\begin{lstlisting}[language=mbeddr, morekeywords={}]
  in reset()
  in increment(int[0..10] delta) 
\end{lstlisting}

A state machine can also have local variables. While these could in principle be
handled via separate states, local variables are more scalable.

\begin{lstlisting}[language=mbeddr, morekeywords={}]
  var int[0..100] current = 0 
  var int[0..100] LIMIT = 100 
  var int[0..100] steps = 0 
\end{lstlisting}

We are now ready to write a somewhat more sensible \ic{WrappingCounter} state
machine. Whenever we enter the \ic{start} state, we set the \ic{current}
variable and the \ic{steps} variable to zero (entry and exit actions can be
added to a state via an intention). We have two transitions: if the
\ic{increment} event arrives, we go to the \ic{increasing} state, incrementing
the \ic{current} value by the \ic{delta}, passed in via the event. Notice how in
transition actions we can access the arguments of the event that triggered the
respective transition.

\begin{lstlisting}[language=mbeddr, morekeywords={}]
state start { 
  entry { 
    current = 0; 
    steps = 0; 
  } 
  on increment [ ] -> increasing { current = current + delta; } 
  on reset [ ] -> start {  } 
} 
\end{lstlisting}

Let us look at the \ic{increasing} state. There we also react to the
\ic{increment} event. But we use guard conditions to determine which transition
fires. We can also access event arguments in the guard condition.

\begin{lstlisting}[language=mbeddr, morekeywords={}]
state increasing { 
  entry { steps++; } 
  on increment [current + delta <= LIMIT] -> increasing { current = current + delta; } 
  on increment [current + delta > LIMIT] -> start { current = 0; } 
  on reset [ ] -> start {  } 
} 
\end{lstlisting}


Statemachines can be marked as \ic{strict} (by using an intention). If a state
machine is triggered and there is \emph{no transition firing}, then an error is
reported. Regular state machines just silently ignore this case. Also, for
strict statemachines, you have to be specify a message reference (in the
inspector) that will be reported if one of these errors occurs.


\subsection{Integrating with C code}

State machines can be instantiated. They act as a type, so they can be used in
local variables, arguments or in global variables. State machines also have to
be initialized explictly using the \ic{sminit} statement.

\begin{lstlisting}[language=mbeddr, morekeywords={}]
WrappingCounter wc; 

void someFunction() {
  sminit(wc);
}
\end{lstlisting}

The \ic{smtrigger} statement is used to ``inject'' events from regular C code.
Notice how we pass in the argument to the \ic{increment} event. 

\begin{lstlisting}[language=mbeddr, morekeywords={}]
void someFunctionCalledByADriver(int8 ticks) { 
  smtrigger(wc, increment(ticks)); 
}  
\end{lstlisting}

State machines can also have out events. These are a means to define abstractly
some kind of interaction with the environment. Currently, they can be bound to a
C function:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
out events
  wrapped(int[0..100] steps) -> wrapped 
\end{lstlisting}

These out events can then be fired from an action in the state machine, for
example, in the exit action of the \ic{increasing} state:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exit { send wrapped(steps); }
\end{lstlisting}

\subsection{The complete WrappingCounter state machine}

\begin{lstlisting}[language=mbeddr, morekeywords={smtrigger, var, entry, exit}]
module WrappingCounterModule imports nothing { 
   
  statemachine WrappingCounter initial = start { 
      in increment(int[0..10] delta) 
      in reset() 
      out wrapped(int[0..100] steps) -> wrapped 

      var int[0..100] curr = 0 
      var int[0..100] LIMIT = 100 
      var int[0..100] steps = 0 

      state start { 
        entry { 
          curr = 0; 
          steps = 0; 
        } 
        on increment [ ] -> increasing { curr = curr + delta; } 
        on reset [ ] -> start {  } 
      } 

      state increasing { 
        entry { steps++; } 
        on increment [curr + delta <= LIMIT] -> increasing { curr = curr + delta; } 
        on increment [curr + delta > LIMIT] -> start { curr = 0; } 
        on reset [ ] -> start {  } 
        exit { send wrapped(steps); } 
      } 
  }
   
  void wrapped(int8 steps) { 
    // do something
  }  
   
  WrappingCounter wc; 
   
  void someFunctionCalledByADriver(int8 ticks) { 
    smtrigger(wc, increment(ticks)); 
  } 
}
\end{lstlisting}


\subsection{Testing State Machines}

In addition to model checking (discussed in the chapter on analyses) state
machines can also be checked regularly. The following piece of test code checks
if the state machine works correctly:

\begin{lstlisting}[language=mbeddr, morekeywords={smtrigger}]
exported test case testTheWrapper { 
  smtrigger(wc, reset); 
  assert(0) isInState(wc, start); 
  smtrigger(wc, increment(5)); 
  assert(1) isInState(wc, increasing); 
  assert(2) wc.current == 5; 
  assert(3) wc.steps == 1;
}  
\end{lstlisting}

Notice that in order to be able to access the variables \ic{current} and
\ic{steps} from outside the state machine, these variables have to be marked as
\ic{readable} (via an intention).

There is also a shorthand for checking if a state machine reacts correctly to
events in terms of the new current state:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported test case testTheWrapper { 
  ... 
  test statemachine wc { 
    reset -> start 
    increment(5) -> increasing 
    increment(90) -> increasing 
    increment(10) -> start 
  } 
}  
\end{lstlisting}

\todo{Hierarchical SMs}
\todo{Visualizing SMs}
