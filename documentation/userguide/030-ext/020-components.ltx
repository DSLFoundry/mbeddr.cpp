\section{Components}
\label{details_components}

Modularization supports the divide-and-conquer approach, where a big
problem is broken down in to a set of smaller problems that are easier to
understand and solve. To make modules reusable in different contexts, modules
should define a contract that prescribes how it must be used by client
modules. Separating the module contract from the implementation also supports
different implementations of the same contract.

Object oriented programming, as well as component-based development exploit this
notion. However, C does not support any form of modularization beyond separating
sets of functions, \ic{enum}s, \ic{typedef}s etc. into different \ic{.c} and
\ic{.h} files. mbeddr, in contrast supports a rich component model.


\subsection{Basic Interfaces and Components}

To use the components in your C programs, please include the
\ic{com.mbeddr.components} devkit.

\parhead{Interfaces} There are two kinds of interfaces. Client/Server interfaces
contain a set of operations that can be called by client components.
Sender/Receiver interfaces are used to share data among components. In the rest
of this section we first look at client/server interfaces and later at
sender/receiver interfaces.

An client/server interface is essentially a set of operation signatures, similar
to function prototypes in C. \ic{query} marks functions as not performing any
state changes; they are assumed to be invokable any number of times without side
effects (something we do not verify automatically at this time).

 
\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported interface DriveTrain  { 
  void driveForwardFor(uint8 speed, uint32 ms) 
  void driveBackwardFor(uint8 speed, uint32 ms) 
  void driveContinouslyForward(uint8 speed) 
  void driveContinouslyBackward(uint8 speed) 
  void stop() 
  query uint8 currentSpeed() 
}
\end{lstlisting}

\parhead{Components} Components can provide and require interfaces via
\emph{ports}. A \emph{provided} port means that the component implements the
provided interface's operations, and clients can invoke them. These invocations
happen via required ports. A \emph{required} port expresses an expectation of a
component to be able to call operations on the port's interface. The example
below shows a component \ic{RobotChassis} that provides the \ic{DriveTrain}
interface shown above, and requires two instances of \ic{EcRobot\_Motor}.

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported component RobotChassis { 

    provides DriveTrain dt 
    requires EcRobot_Motor motorLeft 
    requires EcRobot_Motor motorRight 

    void dt_driveForwardFor(uint8 speed, uint32 ms) <- op dt.driveForwardFor { 
      motorLeft.set_speed(((int8) speed)); 
      motorRight.set_speed(((int8) speed));
      ... 
    } 
    ...
}
\end{lstlisting}

Note how the \ic{dt\_driveForwardFor} runnable implements the operation
\ic{driveForwardFor} from the \ic{dt} provided port. The two signatures are
automatically synchronized. Inside components, the operations on required ports
can be invoked in the familiar dot notation.

Runnables can be marked as \ic{inline}. In this case, an invocation of such a
runnable will be inline, no method invocation (in the generated code) will
occur. At this point, inline runnables cannot return any values; in other words,
they must return \ic{void}.

A required port can be marked (via an intention) as \ic{multiple} which means
that a single required port can be connected to \emph{several} provided ports.
We call such a port a \emph{multi-port}. The number of provided ports in can be
connected to must be specified in the port:

\begin{lstlisting}[language=mbeddr]
exported component Subject { 
  requires ObserverIf i1 [2] 
}
\end{lstlisting}

\greyboxnote{Currently multi ports can only be used with interfaces that have
\emph{only} \ic{void} operations (it is not clear what to do with a collection
of retuen values).}


Components can be instantiated. Each component instance
generally must get all its required ports connected to provided ports provided
by other instances. However, a required port may be marked as \ic{optional}
(this is toggled via an intention), in which case, for a given instance, the
required port may \emph{not} be connected. Invocations on this required port
make no sense in this case, which is why code invoking operations on an optional
port must be wrapped in a \ic{when connected (optionalReqPort) \{ .. \}}
statement. The body of the \ic{when connected} is not executed if the port is
not connected. The IDE reports an error at editing time if an invocation on an
optional port is \emph{not} wrapped this way.



\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported component RobotChassis { 

    provides DriveTrain dt 
    requires EcRobot_Motor motorLeft 
    requires EcRobot_Motor motorRight 
    requires optional ILogging log

    void dt_driveForwardFor(uint8 speed, uint32 ms) <- op dt.driveForwardFor { 
      when connected(log) {
        // other stuff
        log.error(...)
        // more other stuff
      } 
    } 
    ...
}
\end{lstlisting}

Note that if an invocation is tried on a optional port without wrapping it in a 
\ic{when connected} statement, mbeddr reports and error. A quick fix is
available to add the \ic{when connected} statement. \ic{when connected}
statements can also have an \ic{else} part (using the
expected syntax).


Components can have fields. These get values for each of the component instances
created:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported component OrienterImpl extends nothing { 
    int16[5] headingBuffer 
    int8 headingIndex 
    
    void orienter\_orientTowards(int16 heading, uint8 speed, DIRECTION dir) <- ... { 
      headingIndex = heading;
    } 
}
\end{lstlisting}

Fields can be marked as \ic{init} fields (via an intention). In this case, when
a component is instantiated, a value for the field has to be specified. We will
show this below.

We have seen above how a component runnable is tied to the invocation of an
operation on a provided port (using \ic{<- op port.operation}). This triggering
mechanism can also be used for other events, for example, to react to component
instantiation. This effectively supports constructors:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported component OrienterImpl extends nothing { 
    void init() <- on init { 
      compass.initAbsolute(); 
      compass.heading(); 
    } 
}
\end{lstlisting}


\parhead{Instantiation} A key difference of mbeddr components compared to C++
classes is that mbeddr component instances are assumed to be allocated and
connected during program startup (embedded software typically allocates all
memory at program startup to avoid failing during execution), not at arbitrary
points in the execution of a program (as in C++ classes). The following piece of
code shows an instance configuration:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported instance configuration defaultInstances extends nothing { 
  instance RobotChassis chassis 
  instance EcRobot_Motor_Impl motorLeft(motorAddress = NXT_PORT_B) 
  instance EcRobot_Motor_Impl motorRight(motorAddress = NXT_PORT_C) 
  connect chassis.motorLeft to motorLeft.motor 
  connect chassis.motorRight to motorRight.motor 
}
\end{lstlisting}


\vspace{-2mm}
It allocates two instances of the \ic{EcRobot\_Motor\_Impl} component (each with
a different value for its \ic{motorAddress} init parameter) as well as
a single instance of \ic{RobotChassis}. The \ic{chassis}' required ports are
connected to the provided ports of the two motors. Note that an \ic{instance
configuration} just \emph{defines} instances and port connections. The actual
\emph{allocation and initialization} of the underlying data structures happens
separately in the startup code of the application, for example, in a \ic{main}
function:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
int32 main(int32 argc, int8*[ ] argv) { 
  initialize defaultInstances; 
  ... 
} 
\end{lstlisting}

An instance configuration can contain several connectors for the same required
port of a given instance. If the required port is a multi port, the connector
shows the \ic{multi} modifier. If the required port is a regular to-one required
port, the the later connector \emph{overrides} the former ones,
so in effect each required is connected only once. The overriding connector is
marked as \ic{override}. You can \keystroke{Ctrl-Click} onto the \emph{override}
keyword to navigate to the connector that is overridden by the current
\ic{override} connector.


To be able to call "into" component instances from regular, non-component C
code, adapters can be used. They are defined inside instance
configurations. Here is an example:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported instance configuration instances extends nothing { 
    instance EcRobot_Display_Impl i_display 
    adapt i_display.displayPort as disp 
}

void main() {
  initialize instances;
  disp.show("some message");
}
\end{lstlisting}



\subsection{Transformation Configuration} 

Components must be able to work
potentially with various off-the-shelf middleware solutions such as AUTOSAR.
In this case, components will have to be translated differently. Consequently,
the transformation for components has to be configured. This happens --- like
any other configuration --- in the \ic{BuildConfiguration}:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
Configuration Items 
  components: no middleware
              wire statically: false          
\end{lstlisting} 

The default configuration uses the \ic{no middleware} generator, where
components are transformed to plain C function. mbeddr components
support polymorphic invocations in the sense that a required port only specifies
an \emph{interface}, not the implementing \emph{component}. This way, different
implementations can be connected to the same required port (we implement this
via a function pointer in the generated C code). This is roughly similar to C++
classes. However, to optimize performance, the generators can also be configured
to connect instances statically. In this case, an invocation on a required port
is implemented as a direct function call, avoiding additional overhead. This
optimization can be performed globally or specifically for a single port.
Polymorphism is not supported in this case --- users trade flexibility for
performance. To do this, select \ic{wire statically: true}. You then have to
reference the instance configuration you intend to use:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
components: no middleware                                   
            wire statically: true instance config: instances
\end{lstlisting}

If you connect a specific component port to different provided ports in
different instances of this component, an error will be reported.

You can also make the decision to wire statically (without polymorphism) on a
port-by-port basis, directly in the component (via an intention):

\begin{lstlisting}[language=mbeddr, morekeywords={}]
requires EcRobot_Compass compass restricted to OrienterImpl.orienter
\end{lstlisting}

In this case you specify not just the interface but also the particular
component and port. This allows the generator to directly refer to the
implementing C function --- without any overhead.


\subsection{Contracts}

An additional difference to C++ classes is that mbeddr interfaces support
contracts. Operations can specify pre and post conditions, as well as sequencing
constraints. Here is the interface from above, but with contract specifications:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported interface DriveTrain { 
  void driveForwardFor(uint8 speed, uint32 ms) 
    pre(0) speed < 100 
    post(1) currentSpeed() == 0 
    protocol init -> init 
  void driveContinouslyForward(uint8 speed) 
    pre(0) speed <= 100 
    post(1) currentSpeed() == speed 
    protocol init -> forward 
  void accelerateBy(uint8 speed) 
    post(1) currentSpeed() == old(currentSpeed()) + speed 
    protocol forward -> forward 
  query uint8 currentSpeed() 
}
\end{lstlisting}

\vspace{-2mm}
The first operation, \ic{driveForwardFor}, requires the \ic{speed} parameter to
be below 100. After the operation finishes, \ic{currentSpeed} is zero (notice
how the \ic{query} operation \ic{currentSpeed()} is called as part of the post
condition). The protocol specifies that, in order to call the operation, the
protocol has to be in the \ic{init} state. The post condition for
\ic{driveContinouslyForward} expresses that after executing this method the
current speed will be the one passed into the operation --- in other words, it
keeps driving. This is also reflected by the protocol specification which
expresses that the protocol will be in the \ic{forward} state. The
\ic{accelerateBy} operation can only be called legally while the protocol is in
the \ic{forward} state, and it remains in this state. The post condition shows
how the value of a \ic{query} operation \emph{before} the execution of the
function can be accessed.

The contract is specified on the \emph{interface}. However, the code that checks
the contract is generated into the components (i.e. the implementations of the
interface operations). The contracts are then checked at runtime. 

To add a pre- or postcondition or a protocol, use an intention on the operation.
In the inspector, you will have to provide a reference to a message definition
that will be \ic{report}ed in case the condition or the protocol fails.


\subsection{Mocks}


Mocks are used in tests to verify that a component sees a specific behavior at
its ports. In mbeddr, a mock verifies the behavior of one specific interface
only. Let us look at an example. Here is an interface and a \ic{struct} used by
that interface:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
  exported struct DataPacket { 
    int8 size; 
    int8* data; 
  }; 
   
  exported c/s interface PersistenceProvider { 
    boolean isReady() 
    void store(DataPacket* data) 
    void flush() 
  }  
\end{lstlisting}

This interfaces assumes that clients first call the \ic{isReady} operation, call
\ic{store} several times and then call \ic{flush}. We could specify this
behavior via contracts shown above. However, we may also want to test that a
specific \emph{client} behaves correctly. Here is an example client:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
  exported c/s interface Driver { 
    void run() 
  } 

  exported component Client extends nothing { 
      requires PersistenceProvider pers 
      provides Driver d 

      void Driver_run() <- op d.run { 
        DataPacket p; 
        if ( pers.isReady() ) { 
          pers.store(&p); 
          pers.flush(); 
        }  
      } 
  } 
\end{lstlisting}

As we can see, this client does indeed behave correctly. However, if we wanted
to write a test to see if it does, we could use a mock to verify it. Here is a
mock implememtation for the \ic{PersistenceProvider} interface that verifies
this behavior:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
mock component PersistenceMock report messages: true { 
    provides PersistenceProvider pp 
    sequence { 
      step 0: pp.isReady return false; 
      step 1: pp.isReady return true; 
      step 2: pp.store { 
          0: parameter data: data != null 
        } 
      step 3: pp.flush 
    } 
    total no. of calls is 4 
} 
\end{lstlisting}

It specifies that it expects four invocations in total; the first one should be
\ic{isReady} and the mock returns \ic{false}. We then expect \ic{isReady} to be
called again, then we expect \ic{store} to be called with a \ic{data} argument
not being \ic{null}, and then we expect \ic{flush} to be called. Note that
optionally, a \ic{step} can also have a body that contains arbitrary procedural
code. Mocks can also have fields, just like any other component.

Here is a test case that uses an instance of the \ic{Client} shown above. It
also uses an instance of the \ic{PersistenceMock}:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported test case runTest { 
  client.run(); 
  client.run(); 
  validate mock mock report messages.mockDidntValidate(); 
} 
\end{lstlisting}

Notice the \ic{validate mock} statement. If the \ic{mock} instance of
\ic{PersistenceMock} has seen anything else but the expected behavior, the
\ic{validate mock} statement will fail --- and hence the test case will fail.


\subsection{More Test Support}

In the context of testing, it makes sense to call runnables of
component instance directly, without going through their respective triggers
(polymorphic interface calls or interrupts, etc.). This is also useful for
calling internal (i.e. "private") runnables that do not have any trigger.  

This is why inside test cases, you can use the direct runnable call expression:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
exported component C extends nothing { 

    int8 count = 0 

    internal int8 getStuff(int8 x) <= no trigger { 
      count++; 
      return count; 
    }  
} 
 
instance configuration instances extends nothing { 
    instance C c1 
} 
 
exported test case testCall { 
  assert(0) $instances:c1.getStuff(10) == 1; 
}
\end{lstlisting} 

\subsection{Sender/Receiver Interfaces}

A sender/receiver interface does not declare operations. Instead it declares
data items:

\begin{lstlisting}[language=mbeddr]
exported sr interface PositionProvider { 
  int8 x; 
  int8 y; 
  uint16 alt; 
}
\end{lstlisting}

A component that \emph{provides} this interface is supposed to provide values
for these items. A component that \emph{requires} a sender/receiver interface is
supposed to read these values:

\begin{lstlisting}[language=mbeddr]
module ComponentsSRI imports DataStructures { 
   
  exported component GPS extends nothing { 
    provides PositionProvider pos 
    void update() { 
      pos.x++; 
      pos.y++; 
    } 
  } 
   
  exported component FlightRecorder extends nothing { 
    requires PositionProvider pp 
    Trackpoint[1000] recordedFlight; 
    uint16 count = 0; 
    void timed_tick() { 
      with (recordedFlight[count]) { 
        x = pp.x 
        y = pp.y 
        alt = pp.alt 
      }; 
      count++; 
    } 
  } 
   
}
\end{lstlisting}


Components still have to be instantiated, and the ports connected. As with
client/server interfaces, several required ports can connect to the same
provided port. 

There are two options for sender/receiver interfaces. First, an interface can be
marked as \ic{strict}. In this case, \emph{only the provider} can write the
values defined in the interface, and the requirers can only read them. Data flow
is in one direction. If interfaces are not strict, then requirers can also
write.

So you may ask what is the difference between providing and requiring? The
difference is who owns the data. If you have one provider and two requirers,
then there is \emph{one} set of data at runtime. If one requirer writes to the
data item, the other requirer will see the change.

A second option is that a data item can be marked as \ic{atomic}. This means
that it can only be set in one piece. This is especially useful when
\ic{struct}s are used as the type of a data item. For non-atomic data items,
you can assign to fields of complex data items (as in \ic{carData.position.x =
value}):

\begin{lstlisting}[language=mbeddr, morekeywords={internal}]
exported struct Position { 
  int8 x; 
  int8 y; 
}; 
 
exported sr interface CarData { 
  Position position; 
} 
 
exported component Motor extends nothing { 
  provides CarData carData 
  internal void updateCarDataPositionX(int8 value) <- no trigger { 
    carData.position.x = value; 
  }
} 
\end{lstlisting}

If the \ic{position} item were marked as \ic{atomic} only the complete \ic{struct}
could be assigned (as in \ic{carData.position = otherPosition;}). 

Both \ic{atomic} and \ic{strict} are necessary for certain middleware platforms.
In a pure-C/no-middleware implementation, these two options are not relevant.

\todo{Port Cardinalities}
\todo{Interface type}
