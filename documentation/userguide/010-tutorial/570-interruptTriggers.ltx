\section{Interrupt-Triggered State Machines}

\greyboxnote{The code for this example can be found in the tutorial in the
\ic{mbeddr.tutorial.smtrigger} language.}

\subsection{Example}
 
Imagine you have a state machine that handles a communication protocol, such as
TCP/IP or a CAN bus. Often, the protocol implementation uses interrupts: when a
new message is received by the network hardware, an interrupt is triggered to
notify the driver software. So you need a way to make an interrupt trigger a
state machine. Here is how you could write it with the existing mbeddr default
extensions:

\begin{lstlisting}[language=mbeddr, morekeywords={sminit, smtrigger},
deletekeywords={protocol}] 
module examples.SmInterruptTrigger { 
   
  statemachine ProtocolSM initial = stby { 
    in msgReceived() 
    var int8 sessionID = 0 
    state stby { 
      on msgReceived [ ] -> receiving { sessionID = someMemoryAccessAPI()[0]; } 
    } 
    state receiving {} 
  }

  ProtocolSM protocol; 
   
  int8* someMemoryAccessAPI() { 
    return // data from memory-mapped hardware; 
  } 
   
  ISR(12) handleInterrupt12() {
    smtrigger(protocol, msgReceived);
  } 
   
  void runProtocol() { 
    // disable interrupts 
    sminit(protocol); 
    // enable interrupts 
  } 
   
}
\end{lstlisting}

We first create a state machine \ic{ProtocolSM} that has (for the sake of the
example) on event \ic{msgReceived} and two states: \ic{stby} and \ic{receiving}.
The \ic{msgReceived} event transitions the state machine from \ic{stby} to
\ic{receiving}. As it does so, it accesses some API to get the access to the
data received over the network. Crucially, you also have to write some kind of
interrupt handler function \ic{handleInterrupt12} that, when called by the OS,
triggers the single instance of \ic{ProtocolSM} with the \ic{msgReceived} event.
You also have a "main function" that initializes the state machine.

The annoying thing here is: for each interrupt you use, you have to manually
write an interrupt handler function that triggers the state machine with the
corresponding event. This is quite verbose and can be simplified with the simple
language extension we build in this section. Here is the code you'll be able to
write with the extension:

\begin{lstlisting}[language=mbeddr, morekeywords={sminit, interrupt, driven,
instance, interrupt}, deletekeywords={protocol}] 
module examples.SmInterruptTrigger { 
   
  interrupt-driven instance protocol 
  statemachine ProtocolSM initial = stby { 
    in msgReceived() interrupt 12
    var int8 sessionID = 0 
    state stby { 
      on msgReceived [ ] -> receiving { sessionID = someMemoryAccessAPI()[0]; } 
    } 
    state receiving {} 
  }

  ProtocolSM protocol; 
   
  int8* someMemoryAccessAPI() { 
    return // data from memory-mapped hardware; 
  } 
   
  void runProtocol() { 
    // disable interrupts 
    sminit(protocol); 
    // enable interrupts 
  } 
   
}
\end{lstlisting}

As you can see, you can now directly attache the triggering interrupt to an
in-event (reducing the amount of code quite a bit, especially as we have more
events and interrupt handlers). We also assume that there is only one instance
of the state machine that is directly annotated to the state machine\footnote{If
we didn't make this assumption we'd have to be able to bind different interrupts
to the in-events of different instances of that state machine. That would make
the language more complicated; it's also not very realistic. A (single-threaded)
driver will have only one protocol state machine.}. Of course, the generator for
that this languaeg extension has to generate code similar to the one shown in
the previous code snippet: we generate "normal" state machine extension code.


\subsection{Structure and Editor}

\parhead{Annotation} We start with the annotation that marks the state machine
as interrupt-driven and specifies the global variable whose instance we want to
driven by interrupts. This is a straight-forward annotation, as discussed in
previous tutorials:

\begin{lstlisting}[language=mps, morekeywords={}, deletekeywords={}] 
concept InterruptAnnotation extends NodeAttribute
                            implements <none>    
                                                 
  children:                                      
    GlobalVarRef instance 1    
                                                 
  concept properties:                            
    role = interrupted                             
                                                 
  concept links:                                 
    attributed = Statemachine                      
\end{lstlisting}

The editor simply arranges the text \ic{interrupt-driven instance} and the
\ic{instance} global variable reference on top of the \ic{attributed node}, i.e.
the state machine. We also define an intention for state machines to attach this
annotation:

\begin{lstlisting}[language=mps, morekeywords={description, execute},
deletekeywords={}] 
intention addInterruptAnnotation for concept Statemachine {
                                                                                
  description(editorContext, node)->string { 
    "Make interrupt-driven"; 
  }       
                                                                                
  execute(editorContext, node)->void { 
    node.@interrupted.set new(<default>);   
  }
}
\end{lstlisting}

\parhead{Event Binding} State machine events already have an optional binding.
Such bindings are represented by the interface \ic{IInEventBinding}. So we have
to create a new concept that implements this interface. Here it is:

\begin{lstlisting}[language=mps, morekeywords={}, deletekeywords={}] 
concept InterruptTrigger extends BaseConcept       
                         implements IInEventBinding
  properties:                                      
    id : integer // repesents the interrupt number

  concept properties:                              
    alias = interrupt                                
\end{lstlisting}

Since we implement \ic{IInEventBinding} we can add an instance of
\ic{InterruptTrigger} on the right side of an in-event. The editor is trivial:
the constant \ic{interrupt} plus a cell for the \ic{id}, arranged in a
horizontal list. 

\parhead{Constraints} We have to make sure that the \ic{InterruptTrigger}
event binding is only used on state machines that have the
\ic{InterruptAnnotation} attached to them. We do this with a \ic{can be child}
constraint:

\begin{lstlisting}[language=mps, morekeywords={}, deletekeywords={link, scope}] 
concept constraints InterruptTrigger { 
  can be child 
    (node, parentNode, link, childConcept, scope, operationContext)->boolean { 
      parentNode.ancestor<concept = Statemachine>.@interrupted != null; 
    } 
}
\end{lstlisting} 

Finally, you probably want to create an checking rule that
makes sure that each interrupt is bound only once. As they say: this is left as
an exercise for the reader :-)




\subsection{Generator} The structure and editor for this language is rather
trivial. The interesting part is the generator. So let's take a look. As we have
seen from the initial code snippet in this section, we have to generate an
interrupt-handler function for each of these \ic{InterruptTrigger}s. The
binding, the event itself and the annotation have all the information we need to generate
the implementation for this function: the interrupt number, as well as the state
machine instance and the event we have to trigger from within this function. 

So here we what we have to do first: for each \ic{InterruptTrigger}, we have to
generate a function (with a specific name and a specific implementation) into
the module that contains the state machine. To do this, we need a
weaving rule. A \emph{weaving rule} works the following way: if it encounters an
instance of some concept in a model, it generates \emph{something to another
location} in the model\footnote{This is in contrast to a \emph{reduction
rule}, which, when encountering an instance of the specified concept,
\emph{replaces} that instance with whatever the associated template produces.}.
Here is how it looks:

\begin{center} 
  \includegraphics[width=\columnwidth]{figures/tutorial/triggerweaving.png}
\end{center}

This rule declaration declares that we want to weave for instances of
\ic{InterruptTrigger}. So for each instance of \ic{InterruptTrigger} in the
input model, this weaving rule is triggered. The output created by the rule is
generated by the called \ic{weave\_InterruptTrigger} template (discussed below).
In addition, we have to specify two additional things. 

First, the \ic{context}
defines where the new contents created by the template are put. In our case, it
is the module that contains our state machine. More precisely: it is that module
\emph{in the output model} that corresponds to the module in the input model
that contains our state machine.

The second thing we have to define is a condition that determines when we want
to run this weaving. We only want to do it as long the output model doesn't yet
contain the result of the weaving process. This is to avoid endless
iterations\footnote{It is a bit unfortunate that this has to be programmed
manually. It would be better if one could make a weaving rule as \emph{weave
once}. There is in fact an MPS issue for this:
\emph{http://youtrack.jetbrains.com/issue/MPS-14324}}. Let us now look at the template. 	

\begin{center} 
  \includegraphics[width=0.5\columnwidth]{figures/tutorial/weavingTemplate.png}
\end{center}

The first important observation is that the root element (\ic{content node}) of
the template is an \ic{ImplementationModule}. It has to be, because it must "fit
in" with the context node specified by the weaving rule! Inside this module, we
have three ingredients: a dummy state machine, a global variable with an
instance of that state machine, and the interrupt-handler function. The first
two are scaffolding that is necessary to write the implementation of the
function. Only the function is marked as the template fragment, so only it will
be added to the output implementation module as the transformation executes.

This mechanics of the weaving rule are the interesting aspect of this generator;
teh rest is relatively straightforward, if you have read the previous tutorial
languages:

\begin{itemize}
  \item we use a property macro to change the name of the generated function. We
  use the \ic{genInterruptHandlerFunctionName} behavior on the
  \ic{InterruptHandler} node to determine the name of the function; note how we
  also use that same function to determine whether the weaving rule has already
  run (in the \ic{condition} part of the weaving rule).
  \item We use a similar property macro to adapt the text in the function
  modifier (the \ic{[\$[ISR]]} thingy; modifiers can be added to functions, and
  the particular modifier we use here simply outputs an arbitrary text).
  \item In the implementation, we use two reference macros to "rewire" the state
  machine instance and the event reference to the values that come from the
  input model. The instance is found by going up to the state machine
  and querying the annotation: \ic{node.ancestor<concept =
  Statemachine>.@interrupted.instance.var.name;}.\\ The event is simply the
  parent node of the input node (the in-event binding): \ic{node.parent :
  InEvent.name;}
\end{itemize}


There's one last thing we have to set up: since we generate "state machine
code", i.e. since we use concepts from the state machine language in the result
of the generation of this generator (the \ic{smtrigger} statement), we have to
make sure that this generator runs \emph{before} the statemachine-to-C
generator. A generator priority ensures this:

\begin{center} 
  \includegraphics[width=\columnwidth]{figures/tutorial/weavingprios.png}
\end{center}








