\section{Requirements}

\todo{Update with Scenarios}
\todo{Update with BL in Requirements}

In the previous chapter we implemented a state machine that judged flights based
on a set of rules. These rules were: 

\begin{itemize}
  \item Once a flight lifts off, you get 100 points
  \item For each trackpoint where you go more than 100 mps, you get 10 points
  \item For each trackpoint where you go more than 200 mps, you get 20 points
  \item You should land as short as possible; for each trackpoint where you are
  on the ground, rolling, you get 1 point deducted.
  \item Once you land successfully, you get another 100 points.
\end{itemize}

Let is capture these rules as requirements explictly in the tool. To do so,
create a new model \ic{mbeddr.tutorial.main.req} and add the
\ic{com.mbeddr.cc.reqtrace} devkit to it. Inside the model, create a new
\ic{RequirementsModule}. Call it \ic{FlightJudgementRules}:

\begin{center} 
  \includegraphics[width=0.8\columnwidth]{figures/tutorial/reqmodule.png}
\end{center}

You can now enter the requirements from above. Make up a useful name for each of
them and copy the text above into the summary or into the detail description
text box. To build hierarchies you can add child requirements with an intention.
Here is how the result looks for me:

\begin{center} 
  \includegraphics[width=\columnwidth]{figures/tutorial/reqs.png}
\end{center}

Of course, now that we have captured the requirements we want to relate them to
the implementation code, which is, in this case, a state machine. So let's go
back to the state machine we built in the previous chapter. To be able to trace
from the state machine to these requirements we first have to make the \ic{req}
model visible to the \ic{m1} model that contains the state machine. Open
\ic{m1}'s properties, go to the \ic{Imported Models} section and add the
\ic{req} model\footnote{Note that this import is a \emph{physical} import between the models (XML
files essentially), whereas the \ic{import} clause on modules is a
\emph{logical} namespace import.}:

\begin{center} 
  \includegraphics[width=0.75\columnwidth]{figures/tutorial/modelprops.png}
\end{center}

 While you are in the model properties dialog of \ic{m1}, you can also add the
 \ic{com.mbeddr.cc. reqtrace} devkit to that model; we need it for tracing. We
 want to establish traces between implementation code and the requirements we
 just captured. To make this possible we first have to specify that the
 \ic{StateMachines} implementation module contains code that traces to the 
\ic{FlightJudgementRules} requirements. We can do this by attaching a
\ic{Reference to a Requirements Module} to the implementation module by using an
intention:

\begin{center} 
  \includegraphics[width=0.9\columnwidth]{figures/tutorial/rmref.png}
\end{center}

We can now add traces in the state machine. Remember the contents of the
\ic{beforeFlight} state:

\begin{lstlisting}[language=mbeddr]
state beforeFlight { 
  entry { points = 0; } 
  on next [tp->alt > 0 m] -> airborne 
  exit { points += TAKEOFF; } 
} 
\end{lstlisting}

When the state is exited, we add 100 points (represented by the \ic{TAKEOFF}
constant). This is an implementation of the first requirement/rule. Select the 
exit action and execute the \ic{Add Trace} action. Doing this on the other
relevant program elements leads to a program with traces. The color of the
trace actually depends on the kind of trace; the \ic{implements} kind defaults
to green:

\begin{center} 
  \includegraphics[width=0.7\columnwidth]{figures/tutorial/trace.png}
\end{center}

Note how we attach traces to constants, transitions and actions: the trace
facility is orthogonal with regards to the language constructs that are
annotated. It works for all. 

Returning back to the \ic{FlightJudgementRules} requirements, we can select the
heading and run the \ic{Update Trace Status} intention. Requirements that are
traced from program code are marked blue:

\begin{center} 
  \includegraphics[width=0.9\columnwidth]{figures/tutorial/reqcolor.png}
\end{center}

We notice that the \ic{FullStop} requirement is still red, so it seems we
haven't trace it correctly. Maybe we mixed something up with the landing stuff.
Let's find out from where we trace to the \ic{ShortLandingRoll} requirement. To
do this, select the \ic{Find Usages} entry from the context menu on the
\ic{ShortLandingRoll} requirement. In the dialog that opens uncheck all Finders
except \ic{Traces} and press \ic{OK}. Here is the result you get:

\begin{center} 
  \includegraphics[width=0.8\columnwidth]{figures/tutorial/findusages.png}
\end{center}
 
The dialog reveals that we have attached \ic{ShortLandingRoll} to two elements.
A transitin and an entry action. That's wrong: the second one should have been
the \ic{FullStop} requirement. Change it, rerun \ic{Update Trace Status} on the
requirements module, and everything should be blue.

Finally, if you are annoyed by your beautiful state machine being polluted by
all these requirements traces, you can hide them: select \ic{false} for
\ic{show traces} in the top right corner of the \ic{FlightJudgementRules}
requirements module. The traces are still there, of course (and remain attached
as you copy, paste or move program elements), but they are not shown.

\fordetails{Requirements and Tracing}{\sect{details_reqs}}












































