\section{A Hello World Extension}

\greyboxnote{The code for this example can be found in the tutorial in the
\ic{mbeddr.tutorial.foreach} language.}

In this section we show the complete implementation of a simple C extension. As
an example, we introduce a \ic{foreach} statement. It supports conveniently
iterating over C arrays. Users have to specify the array over which to iterate,
as well as the size of the array, because in C an array cannot be queried for
its size. Inside the body of the \ic{foreach}, a variable named \ic{it} acts as
a reference to the current iteration's array element. The code below
shows a test case that uses a \ic{foreach} statement.
  
\begin{lstlisting}[language=mbeddr]
test case testForEach { 
  int8 sum = 0;  
  int8[] array = {1, 2, 3, 4, 5}; 
  foreach (array sized 5) { 
    sum += it; 
  } 
  assert(0) sum == 15; 
}
\end{lstlisting}


The \ic{foreach} extension should be modular, i.e. it should live in a separate
language module so users can decide whether they want to use it in their
programs or not. Therefore we create a new language named \ic{ForeachLanguage}.
It extends the C core language, since we will refer to concepts defined in C.

In the following we first describe the definition of the \ic{foreach} itself; we
look at the definition of its assciated \ic{it} expression in a separate
paragraph at the end of this subsection.

\parhead{Structure/Abstract Syntax}  In the new language, we define the
\ic{ForeachStatement} concept. It should be usable wherever C expects
\ic{Statement}s (i.e. in functions), so \ic{ForeachStatement} extends the
\ic{Statement} concept defined in the C core. \ic{ForeachState- ment}s have
three children: an \ic{Expression} that represents the array, an \ic{Expression}
for the array length, and a \ic{StatementList} for the body.
\ic{Expression} and \ic{StatementList} are both defined in the C core.
\fig{umldiag} shows a class diagram of the structure and the code below shows
the code that defines this structure in MPS. 




\begin{figure}[h]
  \centering
    \includegraphics[width=80mm]{figures/tutorial/umldiag.png}
    \caption{UML class diagram showing the structure of the
    \ic{ForeachLanguage}. Concepts provided by the C core are in white boxes,
    new concepts are grey.} 
  \label{umldiag}
\end{figure}




\begin{lstlisting}[language=mps, deletekeywords={foreach}]
concept ForeachStatement extends Statement                    
  children:                                                   
    Expression     array    1                      
    Expression     len      1                        
    StatementList  body     1  
  concept properties:
    alias foreach
\end{lstlisting}


Note how rhe definition of the \ic{ForeachStatement} relies heavily on concepts
defined in the C core: it extends \ic{Statement} and it owns two
\ic{Expression}s and a \ic{StatementList}. Note that we also define an alias
\ic{foreach}. This way, a user can simply type \ic{foreach} in statement context
to instantiate a \ic{ForeachStatement}.


\parhead{Editor/Concrete Syntax} An editor defines the concrete syntax of a
concept. The \ic{foreach} editor (\fig{foreachEditorImage}) consists of a
horizontal list of editor cells containing: the \ic{foreach} keyword, the
opening parenthesis, the embedded editor of the \ic{array}, the \ic{sized}
keyword, the embedded editor of the \ic{len} expression, the closing parenthesis
and the editor of the \ic{body}. Note how we simply embed editors of those
concepts defined in the C core. We do not need to worry about possible syntactic
ambiguities, since those cannot arise in projectional editors.
 
\begin{figure}[h]
\begin{center} 
  \includegraphics[width=0.7\columnwidth]{figures/tutorial/foreachEditor2.png}
\end{center}
\caption{\emph{Top:} the editor definition of the
\ic{foreach} statement. \emph{Bottom:} An example instance, and
how the editor definition relates to it.}
\label{foreachEditorImage}
\end{figure}


\parhead{Type System} Two type checks must be enforced.
The type of the \ic{array} must be \ic{ArrayType}, and the type of \ic{len} must
be \ic{int64} (or any of its shorter subtypes). The code below shows the
necessary code using MPS' rule-based type system engine.
The first line establishes a subtype relation between the type of the \ic{len}
expression and \ic{int64}, essentially requiring \ic{len} to be \ic{int64}
or a (shorter) subtype. The second line checks that \ic{array} is actually an
array type.

\begin{lstlisting}[language=mps]
rule typeof_ForeachStatement applicable for ForeachStatement as fes
  do {                                            
    typeof(fes.len) :<=: <int64>;
    if (!(fes.array.type.isInstanceOf(ArrayType))) { 
      error "array required" -> fes.array; 
  } 
}    
\end{lstlisting}
 


\parhead{Generator} The generator reduces a \ic{ForeachStatement} to a regular
\ic{for} statement that iterates over the elements with a counter variable
\ic{\_\_c} (\fig{foreachGenerator}). Inside the \ic{for} body, we create a
variable \ic{\_\_it} that refers to the array element at position \ic{\_\_c}.
We also copy in all the other statements from the body of the \ic{foreach}. Note
that this generator essentially uses macro-style expansion. While this is the
simplest type of generator in MPS, there are also more advanced transformations.
In particular, there are non-local transformations that support creating new
program elements in arbitrary locations in the code, not just in place of the
original node.

\begin{figure}[h] 
\begin{center} 
  \includegraphics[width=0.9\columnwidth]{figures/tutorial/foreachGenerator.png}
\end{center} 
\caption{The \ic{foreach} generator. The header
defines that the rule applies to \ic{ForeachStatement}s. 
A \ic{ForeachStatement} is replaced by the part framed by \ic{<TF .. TF>}
when the template is executed. 
The \ic{dummy} function around it provides
context and is not part of the generator output. The \ic{COPY\_SRC} and
\ic{COPY\_SRCL} macros contain expressions (not shown in the screenshot) that
determine with what the example nodes (\ic{10}, \ic{int8 x;}) are
replaced during transformation execution. For example, the expression behind the
\ic{COPY\_SRC[x]}, is \ic{node.array}, replacing the dummy \ic{x} with the
content in the \ic{foreach}'s \ic{array} child.}
\label{foreachGenerator}
\end{figure}
 
To make this generator work well with the C-to-text generator, we have to make
sure that this one runs before the C-to-text generator. To do this we specify a
dependency on the \ic{modules.gen} generator:

\begin{center} 
  \includegraphics[width=0.6\columnwidth]{figures/tutorial/gendep.png}
\end{center} 

We then add a \ic{runs strictly before} priority from our generator to the
\ic{modules.gen} generator. This ensures that ours runs before the C-to-text
generator.

\begin{center} 
  \includegraphics[width=0.6\columnwidth]{figures/tutorial/genprio.png}
\end{center} 






\parhead{The \ic{it} \textbf{Expression}} In terms of abstract syntax, the
\ic{ItExpression} must inherit from the C's \ic{Expression} concept to make it
usable in an expression context. We define an alias \ic{it}. The editor is
trivial, it consists of one cell with the keyword \ic{it}. The type of \ic{it}
must be the base type of the \ic{array} (e.g. \ic{int} in case of \ic{int{[]}}).
The typesystem code is below. The first line retrieves the base type of the array we iterate over.
Since we know that the \ic{it} expression must only be used inside a
\ic{ForeachStatement}, we can ascend the containment tree until we find one,
get its \ic{array} child, take the type of it, case it to an \ic{ArrayType} and
then get its \ic{baseType}. The second line establishes a relation between the 
type of the \ic{it} expression and the \ic{bt} we just retrieved. 

\begin{lstlisting}[language=mps]
rule typeof_ItExpression applicable ItExpression as it
  do {   
    node<Type> bt = typeof(it.ancestor<ForeachStatement>.array) : ArrayType.baseType; 
    typeof(it) :==: bt.copy;
  }
\end{lstlisting}

We also need a \ic{can be child} constraint that prevents the use of the \ic{it}
expression outside of the \ic{foreach} In case of \ic{it} we check that we are
below a \ic{StatementList} and a \ic{ForeachStatement}. The code is below.



\begin{lstlisting}[language=mps, deletekeywords={scope, link}]
concept constraints ItExpression { 
  can be child 
    (context, scope, parentNode, link, childConcept)->boolean { 
      parentNode.ancestor<ForeachStatement>.isNotNull && 
      parentNode.ancestor<StatementList>.isNotNull; 
  }   
}
\end{lstlisting}

Finally, we have to define the generator. The \ic{foreach} generator
(discussed above) defines a local variable \ic{\_\_it} in the body of
the generated \ic{for} loop. We can thus simply reduce an \ic{ItExpression} 
into a \ic{LovalVariableReference} that refers to \ic{\_\_it}. \fig{reduceIt}
shows the reduction rule.



\begin{figure}[h] 
\begin{center} 
  \includegraphics[width=0.7\columnwidth]{figures/tutorial/reduceIt.png}
\end{center} 
\caption{The reduction rule for the \ic{it} expression. Notice how the template
fragment only contains the \ic{\_\_it} variable reference, so only that
reference is generated. The rest is scaffolding. It is necessary because, if we
don't have a variable \ic{\_\_it}, we couldn't write the reference to that
variable in the template. This is why we have function and a local variable
declaration \emph{in the template} even though it is not generated.}
\label{reduceIt}
\end{figure}














