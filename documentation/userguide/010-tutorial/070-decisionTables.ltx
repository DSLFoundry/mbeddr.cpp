\section{Decision Tables}

Let us implement another interface, one that lets us judge flights (we do this
in a new section in the \ic{Components} module). The idea is that clients
add trackpoints, and the \ic{FlightJudger} computes some kind of score from it
(consider some kind of biking/flying competition as a context):

\begin{lstlisting}[language=mbeddr]
exported cs interface FlightJudger { 
  void reset() 
  void addTrackpoint(Trackpoint* tp) 
  int16 getResult() 
}
\end{lstlisting}

Here is the basic implementation of a component that provides this interface.

\begin{lstlisting}[language=mbeddr]
exported component Judge extends nothing { 
  provides FlightJudger judger 
  int16 points = 0; 
  void judger_reset() <- op judger.reset { 
    points = 0; 
  }  
  void judger_addTrackpoint(Trackpoint* tp) <- op judger.addTrackpoint { 
    points += 0; // to be changed
  }  
  int16 judger_getResult() <- op judger.getResult { 
    return points; 
  }  
}
\end{lstlisting}

Of course the implementation of \ic{addTrackpoint} that just adds \ic{0} to the
\ic{points} doesn't make much sense yet. The amount of points added should
depend on how fast and how high the plane (or whatever) was going. The following
screenshot shows an embedded decision table that computes points (Notice we mix
the components language, the decision tables and the units in one integrated
program):

\todo{Update to new format/layout optional type for dectab.}

\begin{center} 
  \includegraphics[width=0.9\columnwidth]{figures/tutorial/dectab.png}
\end{center}

You can create the decision on your own by first of all typing the keyword \ic{dectab} - this instanciates the concept. 
To add a column, hit \ic{enter} in one of the cells. For adding a row, move your cursor 
on the left side of the table (between the default return value and the table) and hit \ic{enter}.

Now, let us write a test. Of course we first need an instance of \ic{Judge}:

\begin{lstlisting}[language=mbeddr]
instances instancesJudging extends nothing { 
  instance Judge j 
  adapt j -> j.judger 
}
\end{lstlisting}

Below is the test case. It contains two things you maybe haven't seen before.
There is a second form of the \ic{for} statement that iterates over a range of
values. The range can be exclusive the ends or inclusive (to be changed via an
intention). In the example we iterate from 0 to 4, since 5 is excluded. The
\ic{introduceunit} construct can be used to "sneak in" a unit into a regular
value. This is useful for interacting with non-unit-aware (library) code. Note
how the expression for \ic{speed} is a way of expressing the same thing without
the \ic{introduceunit} in this case. Any expression can be
surrounded by \ic{introduceunit} via an intention.
 
\begin{lstlisting}[language=mbeddr]
exported test case testJudging { 
  initialize instancesJudging; 
  j.reset(); 
  Trackpoint[5] points; 
  for (i in [0..5[) { 
    points[i].id = i; 
    points[i].alt = introduceunit[1850 + 100 * i -> m]; 
    points[i].speed = 130 mps + 10 mps * i;
    j.addTrackpoint(&points[i]); 
  }  
  assert(0) j.getResult() == 0 + 0 + 20 + 20 + 20; 
} 
\end{lstlisting}

\subsection{Verifying the Decision Table}

So far so good. The test case is fine. However, as with many tests, this one
only tests part of the overall functionality. And in fact, you may have noticed
that an error lurks inside our decision table: for 2000 m of altitude, the table
is non-deterministic: both conditions in the column header work! We could find
this problem with more tests, or we could use formal verification. Let's use the
latter approach. 

To do so, add the \ic{com.mbeddr.analyses.dectab} devkit. Go back to the
decision table and select the \ic{Toggle Verifiable} intention. Marking the
table this way enables the verification functionality and also reports errors in
case the table uses expressions that cannot be verified. For example, if you
were to use a non-linear expression \ic{(tp->alt * tp->alt) > 2000 m2} as a
condition, verification would not work. Our table does not have this problem, so
we can now select \ic{Verify Decision Table} from the table's context menu.

Below is the result we get. First, the checker reports that the table is
complete, i.e. that all possible value combinations are taken care of. However,
it also reports failires because the cells (1,1) and (2,1) are inconsistent. The
problem is -- as we expect -- related to the altitude being 2000 m, because in
this case it is not decidable which alternative should be used. 

\begin{lstlisting}[morekeywords={SUCCESS, FAIL}]
SUCCESS: Table complete.
FAIL: cells (1, 1) and (2, 1) are inconsistent.
	tp.x : 0
	tp.y : 0
	tp.speed : 0
	tp.timestamp : 0
	tp.id : 0
	tp.alt : 2000
FAIL: cells (1, 2) and (2, 2) are inconsistent.
	tp.x : 0
	tp.y : 0
	tp.speed : 150
	tp.timestamp : 0
	tp.id : 0
	tp.alt : 2000
\end{lstlisting}

We can fix the problem for example by changing the \ic{tp->alt <= 2000 m} to
\ic{tp->alt < 2000 m}. Running the verification again results in this:

\begin{lstlisting}[morekeywords={SUCCESS, FAIL}]
SUCCESS: Table complete.
OK: All cells are consistent
\end{lstlisting}


\fordetails{Verifying Decision Tables}{\sect{details_dectabverification}}






























