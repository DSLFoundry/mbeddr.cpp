\section{What if it doesn't work?}
\label{langdebug} 

In this section we discuss various approaches of figuring out what's going on if
you get stuck.


\subsection{Finding other People's Usages}

When you use mbeddr, there are already a whole lot of languages available for
you to learn how to build things: the mbeddr C implementation, all the default
extensions, the languages in this tutorial, as well as MPS' own BaseLanguage
implementation. It is very likely that any problem you face in terms of language
design and implementation has already been implemented in one of these examples.

So when thinking about a new language or a language extension, it is a good idea
to first think about which existing language (or extension) is structurally
similar. Once you've found such an analogue, you should write down an example
using that analogue language and press \ic{Ctrl-Shift-S} on the respective
concept. This gets you to the definition of the respective concept (remember
that the sources are always available. You can then look around and see how
things are implemented. 

If you don't know what a particular language implementation construct does you
can press \ic{Ctrl-Shift-S} on the \emph{language implementation code}.
This way you get to the definition of the concepts used for implementing
languages. You can then use \ic{Find Usages} to find all instances of that
concept. This way you can navigate to all places where JetBrains or the mbeddr
team has used that particular concept. Based on this set of example uses of a
particular language implementation concept it is often relatively easy to find
out what the respective concept means or does.


\subsection{println-Debugging}

A pragmatic way of understanding scopes, type system rules or behaviors is to
use println-debugging: you output program data onto the console. MPS defines two
aliases (\ic{sout} and \ic{serr}) to write \ic{System.out.println("")} and
\ic{System.err.println("")} statements in procedural code. Using those you can
output nodes or concepts -- their \ic{toString} methods are reasonably useful to
understand things. You may also want to call \ic{getPresentation} on nodes to
get a nicer rendering.

There is one more thing to know, however. By default, when you launch MPS, you
don't see the console output because there is no console window anywhere. Here
is what you should do to change this:

\begin{itemize}
  \item On Windows, take a look at the \ic{mps.bat} shell script in the MPS
  installation directory. By default, it uses \ic{javaw}, i.e. the version of
  the Java runtime that does not show a console. Change that to \ic{java}, and
  you will get one.
  \item On the Mac, don't start MPS by double-clicking on the application icon.
  Instead, use a console and navigate into the \ic{MPS-x.y.app} directory. There
  you can invoke \ic{./mps.sh}. Starting MPS this way will give you a console. 
\end{itemize}

On that console you will get (typically way too many) log messages, errors and
exception stack traces. It will also show your own \ic{sout} and \ic{serr}
output.


\subsection{Debugging MPS in MPS}

It is possible to debug MPS in MPS. You can create an \ic{MPS} debug
configuration and then debug the execution of MPS on the level of the DSLs that
are used for language definition. However, this is so slow (in terms of startup
time and the performance of the to-be-debugged second instance of MPS) that we
never use it.


\subsection{Debugging Transformations}

In MPS, having several chained transformations is normal, so
MPS provides support for debugging the transformation process. This support
includes two ingredients. The first one is showing the mapping partitioning, the
second one traces all intermediate transformation steps.

\parhead{Mapping Configurations} For a given model, MPS computes the order in
which transformations apply and reports it to the user. This is useful to
understand which transformations are executed in which order and to debug
transformation priorities. Let us investigate a simple example C program that
contains a message definition and a \ic{report} statement. The \ic{report}
statement is transformed to \ic{printf} statements.

\begin{lstlisting}[language=mbeddr, morekeywords={message, list, active,
report}] 
module Simple imports nothing { 
   
  messagelist messages { 
    INFO aMessage() active: something happened 
  } 
   
  exported int32 main(int32 argc, int8*[] argv) { 
    report (0) messages.aMessage(); 
    return 0; 
  } 
}
\end{lstlisting}

\noindent Below is the mapping configuration for this program: 

\begin{lstlisting}
 [ 1 ]
 com.mbeddr.core.modules.gen.generator.template.main.copyInImportedModules

 [ 2 ]
 com.mbeddr.core.buildconfig.generator.template.main.dependencyGraph
 com.mbeddr.core.modules.gen.generator.template.main.removeCommentedAndEmptyCode

 [ 3 ]
 com.mbeddr.core.util.generator.template.main.gswitchAndDectabb

 [ 4 ]
 com.mbeddr.core.buildconfig.generator.template.main.runConfigItemPreprocessors
 com.mbeddr.core.make.generator.template.main.main
 com.mbeddr.core.modules.generator.template.main.main
 com.mbeddr.core.util.generator.template.main.blockAndLog
 com.mbeddr.core.util.generator.template.main.flags
 com.mbeddr.core.util.generator.template.main.namedStructInit
 com.mbeddr.core.util.generator.template.main.rangeExpression
 com.mbeddr.core.util.generator.template.main.rangeFor
 com.mbeddr.core.util.generator.template.main.reportingDoNothing
 com.mbeddr.core.util.generator.template.main.reportingPrintf
 com.mbeddr.core.util.generator.template.main.withStatement

 [ 5 ]
 com.mbeddr.core.buildconfig.generator.template.main.desktop
 com.mbeddr.core.buildconfig.generator.template.main.nothing
 com.mbeddr.core.modules.gen.generator.template.main.main
 com.mbeddr.mpsutil.graph.generator.template.main.main
\end{lstlisting}

\noindent This particular model is generated in five phases, each one executing
a set of transformations whose priorities indicate that they can be executed in
parallel without harm to each other.


\parhead{Inspecting intermediate Models} By default, MPS runs all generators
until everything is either discarded or transformed into text. While
intermediate models exist, they are not shown to the user. For debugging
purposes though, these intermediate, transient models can be kept around for
inspection. You can switch on \ic{Save Transient Models} by clicking on the
small, grey \ic{T} at the right side of MPS' bottom status bar or by selecting
the respective option in the \ic{Build} menu. The transient (i.e. intermediate)
models are then shown in the project tree on the left at the very bottom of the
project explorer:

\begin{center}
	\includegraphics[width=70mm]{figures/tutorial/transientModels.png}
\end{center}
  
Each transformation phase (shown in the mapping configuration) is represented by
one or more transient models. The suffix of the intermediate models corresponds
to the phases. As an example, here is the program after the \ic{report}
statement has been transformed:

\begin{lstlisting}[language=mbeddr]
module Simple imports nothing { 

  exported int32 main(int32 argc, int8*[] argv) { 
    printf("$$ aMessage: something happened "); 
    printf("@ Simple:main:0#240337946125104144 \n "); 
    return 0;
  } 
} 
\end{lstlisting}

\noindent MPS also supports tracing an element through the intermediate models.
\fig{mps-tracer} shows an example. Users can select a program element in the
source, target or an intermediate model and trace it to the respective other
ends of the transformation by using the \ic{Show Transformation Traceback} item
from the \ic{Language Debug} submenu in the context menu of the to-be-traced
element. The generation tracer also shows the transformation rules
involved in the transformation.

\begin{center}
  \includegraphics[width=18cm]{figures/tutorial/mps-tracer.png}
\end{center}





\subsection{Debugging Type Systems}

MPS comes with two facilities. First, pressing \ic{Ctrl-Shift-T} on any program
element will open a dialog that shows the type of the element. If the element
has a type system error, that dialog also lets the user navigate to the rule
that reported the error. 



The second facility is much more sophisticated. For any program node, MPS can
show the so-called type system trace (the figure below shows a simple example).
Remember how the MPS type system is relies on a solver to solve the type system
equations associated with program elements (specified by the language developer
for the respective concepts). So each program has an associated set of type
system equations. Those contain explicitly specified types as well as type
variables. The solver tries to find type values for these variables such that
all type system equations become true. The type system trace essentially
visualizes the state of the solver including the values it assigns to type
variables as well as which type system rules are applied to which program
element.

\begin{center}
  \includegraphics[width=\columnwidth]{figures/tutorial/mps-ts-trace.png} 
\end{center}

This example shows the solver state for the \ic{Argument x}. It first applies
the rule \ic{typeof\_ITyped} (\ic{Argument} implements \ic{ITyped}) which
expresses that the type of the element (type variable \ic{c} is the same as the
element's \ic{type} property (type variable \ic{d}).
It then applies the \ic{typeof\_Type} rule to the argument's type itself.
This rule expresses that the type of a \ic{Type} is a clone of itself.
Consequently, the type variable \ic{d} can be set to \ic{int8\_t}. In
consequence this means that the type variable \ic{c} (which represents the type
of the \ic{Argument}) is also \ic{int8\_t}. 


The above example is rather trivial, type system traces can become quite
involved. In most cases we rely on using println-debugging for type system
problems by adding \ic{System.err.println} statements at the respective places
in the type system rules.












