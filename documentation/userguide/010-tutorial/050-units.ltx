\section{Physical Units}

Let us go back to the definition of \ic{DataItem} and make it more useful. Our
application is supposed to work with tracking data (captured from a bike
computer or a flight logger). We change the \ic{struct} as follows (note that
renaming the thing is trivial --- you just change the name!):

\begin{lstlisting}[language=mbeddr]
struct Trackpoint { 
  int8 id;        // sequence ID of the track point
  int8 timestamp; // timestamp as taken from GPS time
  int8 x;         // longtitude, simplified as a number
  int8 y;         // latitude, simplified as a number
  int8 alt;       // altitude as of the GPS
  int8 speed;     // current speed, if available
};
\end{lstlisting}

We can now enhance our test case the following way:

\begin{lstlisting}[language=mbeddr]
exported test case testProcessing {
  Trackpoint i1 = {
    id = 1
    x = 0
    y = 0
    alt = 100
  };
  processor = :process_doNothing;
  Trackpoint i2 = processor(i1);
  assert(0) i2.id == 1 && i2.alt == 100;
}
\end{lstlisting}


We can now use physical units to add more semantics to this data structure. We
add the \ic{com.mbeddr.physicalunits} devkit to the model properties. Then we
can add units to the members. To add a unit, simply press \ic{/} at the right
side of one of the \ic{int8} types:

\begin{lstlisting}[language=mbeddr]
struct Trackpoint { 
  int8 id; 
  int8/s/ timestamp; 
  int8/m/ x; 
  int8/m/ y; 
  int8/m/ alt; 
  int8 speed; 
};
\end{lstlisting}

\ic{s} and \ic{m} are SI base units, so they are available by default.  For the
\ic{speed} member we need to add \ic{m/s}. Since this is not an SI base unit we
first have to define it. To do so we create a new \ic{UnitContainer} root in the
current model (you can find the \ic{UnitContainer} in the
\ic{c.m.ext.physicalunits} submenu of the \ic{New} context menu on the current
model). In it we can create a \ic{derived unit}. Entering the \ic{mps} and
\ic{speed} is trivial. Entering the meters per second is a bit cumbersome right
now: press \ic{m} for the meters, press \ic{Enter}, press \ic{s} for the seconds
and then type \ic{-1} directly on the right side of the \ic{s} to enter the
exponent:

\begin{lstlisting}[language=mbeddr-units]
Unit Configuration
                      -1 
derived unit mps = m s   for speed
\end{lstlisting}

We can now go back to the \ic{Trackpoint} and make the \ic{speed} property use a
unit: \ic{int8/mps/ speed;} 

Adding these units results in errors in the existing code because you cannot
simply assign a plain number to a variable or member whose type includes a
physical unit (\ic{int8/m/ length = 3;} is illegal). Instead you have to add
units to the literals as well. You can simply type the unit after the literal to
get to the following:

\begin{lstlisting}[language=mbeddr]
Trackpoint i1 = { 
  id = 1 
  timestamp = 0 s
  x = 0 m 
  y = 0 m 
  alt = 100 m 
};
...
assert(0) i2.id == 1 && i2.alt == 100 m;
...
assert(1) i3.id == 1 && i3.alt == 0 m;
\end{lstlisting}

If you try to rebuild now you will run into build errors:

\begin{lstlisting}
no configuration item "physical units" found in this model. Please add a configuration item in your Build Configuration.
\end{lstlisting}

To fix this we have to go to the build configuration and add the respective
configuration item:

\begin{lstlisting}[language=mbeddr-buildconfig, deletekeywords={mbeddr}]
Configuration Items 
  reporting: printf (add labels false) 
  physical units (config = Units Declarations (mbeddr.tutorial.main.m1)) 
\end{lstlisting}
 
If we rebuild now, everything should generate normally and we should be able to
run the test again. Nothing should have changed so far. However, if we were to
write the following code, we would get an error:

\begin{lstlisting}[language=mbeddr]
int8 someInt = i1.x + i1.speed; // error, adding apples and pears
\end{lstlisting}

The problem with this code is that you cannot add a length (\ic{i1.x}) and a
speed (\ic{i1.speed}). And the result is certainly not a plain \ic{int8}, so you
cannot assign the result to \ic{someInt}. Adding \ic{i1.x} and \ic{i1.y} will
work, though. Also, you can calculate with units to write the following code.
This gives you an additional level of type safety.

\begin{lstlisting}[language=mbeddr]
Trackpoint i4 = { 
  id = 1 
  timestamp = 10 s 
  x = 100 m 
  y = 0 m 
  alt = 100 m 
}; 
int8/mps/ speed = (i4.x - i2.x) / (i4.timestamp - i2.timestamp);
\end{lstlisting}


\fordetails{Physical Units}{\sect{details_units}}


































