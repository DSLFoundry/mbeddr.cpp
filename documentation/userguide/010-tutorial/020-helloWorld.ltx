\chapter{Using mbeddr}

\section{Hello World Example}
\label{helloworld}
 
For this tutorial we assume that you know how to use the C programming language.
We also assume that you have have installed MPS, \ic{gcc}/\ic{make}, \ic{graphviz} and the
mbeddr.core distribution. This has been disussed in the previous section. 

This tutorial showcases many of the features of mbeddr in an integrated example.
The sources ZIP \ic{com.mbeddr.tutorial.zip} is available from the download
page at \ic{mbeddr.com}. It is also part of the complete distro package. In the
git repository the sources can be found in the \ic{code/applications/tutorial}
folder. Simply open the \ic{.mpr} file to play with the example.

Notice that the tutorial does not discuss every aspect of every mbeddr extension
--- please refer to the respective chapters in the user guide.



\parhead{Create new project} Start up MPS and create a new project. Call the
project \ic{HelloWorld} and store it in a directory without blanks in the path.
Let the wizard create a solution, but no language.
 
\begin{center} 
  \includegraphics[width=12cm]{figures/core/NewProject.png}
\end{center}



\parhead{Project Structure and Settings} An MPS project is a collection of
solutions\footnote{A project can also contain \emph{languages}, but these are
only relevant to language implementors. We discuss this aspect of mbeddr in the
\emph{Extension Guide}}. A \emph{solution} is an application project that
\emph{uses} existing languages. Solutions contain any number of models; models
contain root nodes. Physically, models are XML files that store MPS code. They
are the relevant version control unit, and the fundamental unit of
configuration.


\begin{center} 
  \includegraphics[width=100mm]{figures/core/workspacecontents.png}
\end{center}

In the solution, create a new model with the name \ic{main}, prefixed with the
solution's name: select $New \rightarrow Model$ from the solution's context
menu. No sterotype.

 

A model has to be configured with the languages that should be used to write the
program in the model. In our case we need all the \ic{mbeddr.core} languages. We
have provided a \emph{devkit} for these languages. A devkit is essentially a set
of languages, used to simplify the import settings. As you create the model, the
model properties dialog should open automatically. In the \emph{Used Devkits}
section, select the \ic{+} button and add the \ic{com.mbeddr.core} devkit.


\begin{center} 
  \includegraphics[width=10cm]{figures/core/AddDependencies.png}
\end{center}


This concludes the configuration and setup of your project. You can now start
writing C code.

\greyboxnote{In this tutorial we create the basic building blocks manually.
However, there are also a couple of Wizards in the Code menu that create these
things automatically. }

 
\parhead{Create an empty Module} The top level concept in mbeddr C programs are
\emph{modules}. Modules act as namespaces and as the unit of encapsulation. So
the first step is to create an empty module. The \ic{mbeddr.core} C language
does not use the artificial separation between \ic{.h} and \ic{.c} files you
know it from classical C. Instead mbeddr C uses the aforementioned module
concept. During code generation we create the corresponding \ic{.h} and \ic{.c}
files.

A module can import other modules. The importing module can then access the
\emph{exported} contents of imported modules. Module contents can be exported
using the \ic{export} intention (available via \ic{Alt-Enter} like any other
intention).

So to get started, we create a new \ic{implementation module} using the model's
context menu as shown in the following screenshot (note that MPS may shorten
package names; so instead of \ic{com.mbeddr.core.modules} it may read
\ic{c.m.core.modules}):



\begin{center} 
  \includegraphics[width=12cm]{figures/core/ContextMenuNewModule.png}
\end{center}


\greyboxnote{This operation, as well as almost all others, can be performed with
the keyboard as well. Take a look at $File \rightarrow Settings
\rightharpoondown Keymap$ to find out or change keyboard mappings.}


As a result, you will get an empty implementation module. It currently has
no name (the name is red and underlined) and only a placeholder \ic{<<...>>}
where top level C constructs such as functions, \ic{struct}s, or \ic{enum}s can
be added later.


\begin{center} 
  \includegraphics[width=9cm]{figures/core/EmptyModule.png}
\end{center}



\noindent Next, specify \ic{HelloWorld} as the name for the implementation
module.

\begin{lstlisting}[language=mbeddr]
module HelloWorld imports nothing {                                

} 
\end{lstlisting}

The module name is still underlined in red because of a missing type size
configuration. The \ic{TypeSizeConfiguration} specifies the sizes of the
primitive types (such as \ic{int} or \ic{long}) for the particular target
platform. mbeddr C provides a \emph{default} type size configuration, which can
be added to a module via an intention \intention{Create default type size
configuration} on the module in the editor. You may have to press \keystroke{F5}
to make the red underline go away. For more details on type size configurations
see chapter \ref{PrimitiveNumericDatatypes}.
\begin{center} 
  \includegraphics[width=8cm]{figures/core/AddDefaultTSC.png}
\end{center}





\parhead{Writing the Program} Within the module you can now add contents such as
functions, \ic{struct}s or global variables. Let's enter a \ic{main} function so
we can run the program later. You can enter a \ic{main} function in one of the
the following ways:
\begin{itemize}
	\item create a new function instance by typing \keystroke{function} at the
	placeholder in the module, and then specify the name and arguments. 
	\item start typing the return type of the function (e.g. \ic{int32}) and
	then enter a name and the opening parentheses\footnote{Entering a type and a name
	makes it a global variable. As soon as you enter the \ic{(} on the right side
	of the name, the variable is transformed into a function. This process is
	called a \emph{right-transformation}.}.
	\item specifically for the main function, you can also just type
	\keystroke{main} (it will set up the correct signature automatically)
\end{itemize}


At this point, we are ready to implement the \ic{Hello World} program. Our aim is to
simply output a log message and return \ic{0}. To add a return value, move the
cursor into the function body and type \keystroke{return 0}.


\begin{lstlisting}[language=mbeddr]
module HelloWorld from HelloWorld.main imports nothing {                                            
  int32 main() { 
    return 0; 
  } 
}
\end{lstlisting}

To print the message we could use \ic{printf} or some other \ic{stdio} function.
However, in embedded systems there is often no \ic{printf} or the target
platform has no display available, so we use a special language extension for
logging. It will be translated in a suitable way, depending on the available
facilities on the target platform. Also, specific log messages can be
deactivated in which case they are completely removed from the program. Below
our main function we create a new \ic{message list} (just type
\keystroke{message} followed by return) and give it the name \ic{log}.


Within the message list, hit \keystroke{Return} or type \keystroke{message} to
create a new message. Change the type from \ic{ERROR} to \ic{INFO} with the help
of code completion. Specify the name \ic{hello}. Add a message property by 
hitting \keystroke{return} between the parentheses. The type should be a
\ic{string} and the name should be \ic{who}. Specify \ic{Hello} as the value
of the \ic{message text} property. The resulting message should look like this:

\begin{lstlisting}[language=mbeddr, morekeywords={message, list}]
  message list log { 
    INFO hello(string who) active: Hello 
  } 
\end{lstlisting}

Now you are ready to use the message list and its messages from your
main function. Insert a \ic{report} statement in the main function, specify
the message list \ic{log} and select the message \ic{hello}. Pass the string
\ic{"World"} as parameter.

\begin{lstlisting}[language=mbeddr, morekeywords={message, list, report}]
module HelloWorld from HelloWorld.main imports nothing { 
   
  int32 main(int8 argc, string[ ] args) { 
    report(0) log.hello("World"); 
    return 0; 
  } 
  
  message list log { 
    INFO hello(string who) active: Hello 
  } 
}
\end{lstlisting}




\label{buildconfigHelloWorld}		
\parhead{Build Configuration} We have to create one additional element, the
\ic{BuildConfigu- ration}. This specifies which modules should be compiled into
an executable or library, as well as other aspects related to creating an
executable. Depending on the selected target platform, a \ic{BuildConfiguration}
will automatically generate a corresponding \ic{make} file. In the \ic{main}
model, create a new instance of \ic{BuildConfiguration} (via the model's context
menu, see figure below).

\begin{center} 
  \includegraphics[width=\columnwidth]{figures/core/AddBuildConfiguration.png}
\end{center}

Initially, it will look as follows:

\begin{lstlisting}[language=mbeddr, morekeywords={Target, Platform,
Configuration, Items, Binaries}, deletekeywords={no}] 
Target Platform: 
  <no target> 
 
Configuration Items 
  << ... >> 
 
Binaries 
  << ... >>
\end{lstlisting}

You will have to specify three things. First you have to select the target
platform. For our tests, we use the \ic{desktop} platform that generates a
\ic{make} file that can be compiled with the normal \ic{gcc} compiler\footnote{Other
target platforms may generate build scripts for other build systems.}.
The \ic{desktop} target contains some useful defaults, e.g. the \ic{gcc}
compiler and its options. 

\begin{lstlisting}[language=mbeddr, morekeywords={Target, Platform,
Configuration, Items, Binaries, desktop, compiler, options, debug}]
Target Platform: 
  desktop 
    compiler: gcc 
    compiler options: -std=c99 
    debug options: <none>
\end{lstlisting}

Next, we have to address the configuration items. These are additional
configuration data that define how various language concepts elements are
translated. In our case we have to specify the \ic{reporting} configuration. It
determines how log messages are output. The \ic{printf} strategy simply prints
them to the console, which is fine for our purposes here. Select
the placeholder and type \keystroke{reporting}. 

\begin{lstlisting}[language=mbeddr, morekeywords={Target, Platform,
Configuration, Items, Binaries, desktop, compiler, options, debug, reporting}]
Configuration Items 
  reporting: printf 
\end{lstlisting}

Finally, in the \ic{Binaries} section, we create a new \ic{exectuable} and
call it \ic{HelloWorld}. In the program's body, add a reference to the \ic{HelloWorld}
implementation module we've created before. The code should look like this:

\begin{lstlisting}[language=mbeddr, morekeywords={Target, Platform,
Configuration, Items, Binaries, desktop, compiler, options, debug, executable,
isTest, used, libraries, included, modules}]
executable main isTest: false { 
  used libraries 
    << ... >> 
  included modules 
    HelloWorld 
}
\end{lstlisting}
 
\greyboxnote{Note that the whole process shown so far can be performed via a
Wizard. Once you have a model that uses the \ic{mbeddr.core} devkit, you can
select select the \ic{Make Hello World} wizard from the \ic{Code} menu. It
creates the same program. Also, the \ic{Make Minimal System} creates a module
with a main function, a type size configuration and a build configuration.
\ic{Make Minimal Test} creates a similar thing, but with a \ic{test case} in
it.}



\parhead{Building and Executing the Program} Press \keystroke{Ctrl-F9} (or
\keystroke{Cmd-F9} on the Mac) to rebuild the solution. In the
\ic{HelloWorld/solutions/HelloWorld/source\_gen/HelloWorld/ main} directory you
should now have at least the following files (there may be others, but those are not important now):


\begin{lstlisting}[language=mbeddr, morekeywords={}]
Makefile
HelloWorld.c
HelloWorld.h
\end{lstlisting}

The files should be already compiled as part of the mbeddr C build facet (i.e.
\ic{make} is run by MPS automatically). Alternatively, to compile the files
manually, open a command prompt (must be a cygwin prompt on Windows!) in this
directory and type \keystroke{make}. There is a context menu
action on the model that opens a command prompt in the model's output
directory. The output should look like the following:


\begin{lstlisting}[language=mbeddr, morekeywords={}]
\$ make
rm -rf ./bin
mkdir -p ./bin
gcc -c -o bin/HelloWorld.o HelloWorld.c -std=c99
\end{lstlisting}

This builds the executable file \ic{HelloWorld.exe} or \ic{HelloWorld} (depending on your
platform), and running it should show the following output:

\begin{lstlisting}[language=mbeddr, morekeywords={}]
\$ ./HelloWorld.exe
hello: Hello @HelloWorld:main:0
  world = World
\end{lstlisting}

Note the output of the log statement in the program (report statement number
\ic{0} in function \ic{main} in module \ic{HelloWorld}; take a look back at the
source code: the index of the statement (here: \ic{0}) is also output in the
program source). 

\parhead{Visualizing the Program Structure} mbeddr comes with built-in UML-like
diagramming capabilities. One kind of visualization is the module dependency
structure of executables. To try it out, select the executable and execute the
\emph{Visualize} context menu option. You'll get a totally unimpressive diagram
with just one node (because there's just one module in your executable). We'll
get back to visualizations once they are more impressive.

In the visualization view, you can use the zoom in/zoom out buttons to change
the size of the diagram, you can drag it around, you can refresh it, and, once
you have more than one diagram, you can use the forward/back arrows to move
between the 10 most recent diagrams. You can also save a diagram as an SVG file.

Some program elements may have more than one way how they can be visualized. If
so, these alternatives can be selected from the combo box in the header of the
visualization view.

Finally, most elements in the diagrams are clickable: the underlying program
element is then selected in the editor.






\greyboxnote{That same Hello World example can be created using the $Code
\rightarrow Make Hello World$ menu. }

\parhead{Command-Line Generation} mbeddr C projects can be generated from the
command line via \ic{ant} -- and through \ic{ant}, they can be included in CI
servers. To generate the necessary ant build file (\ic{build.xml}), mark the
current project in the mbeddr/MPS IDE and select \ic{(Re-)Generate and build
file for Project} from the \ic{Code} menu. This creates two files, both in the
project root directory (next to the \ic{.mpr} file): a \ic{build.xml} and a
\ic{build.properties}.

The \ic{build.xml} file contains the invocation of the MPS generator; its
\ic{build} target performs the actual generation. No changes is ever necessary
in this file. 

The \ic{build.properties} contains local settings. You have to specify the MPS
directory (e.g., the \ic{MPS25.app} directory on a \onmac) and a temp directory
where MPS can create some temporary files.

To run the generator, invoke \ic{ant} in the project directory. You will get the
following output:

\begin{lstlisting}
~/projects/hw$ ant
Buildfile: /Users/markusvoelter/projects/hw/build.xml

build:
[mps.generate] Loaded project [file=/Users/markusvoelter/projects/hw/HelloWorld.mpr] 
[mps.generate] Generating in strict mode, parallel generation = on 
[mps.generate] Generating:
[mps.generate]     MPS Project [file=/Users/markusvoelter/projects/hw/HelloWorld.mpr]

BUILD SUCCESSFUL
Total time: 18 seconds
\end{lstlisting}

If you now change to the \ic{solutions/HellowWorld/source\_gen/main/}, you will
see the output:

\begin{lstlisting}
~/projects/hw/solutions/HelloWorld/source_gen/HelloWorld/HelloWorld/main$ ls -ll
total 32
-rw-r--r--  1 markusvoelter  staff   440 Feb 20 15:00 Makefile
-rw-r--r--  1 markusvoelter  staff    92 Feb 20 15:00 HelloWorld.c
-rw-r--r--  1 markusvoelter  staff   150 Feb 20 15:00 HelloWorld.h
-rw-r--r--  1 markusvoelter  staff  1582 Feb 21 10:55 trace.info
\end{lstlisting}


