
\section{Function Pointers}

\subsection{The Basic Program}

As the first example, we will add a configurable event handler using function
pointers. We create a new module \ic{FunctionPointers} using the context menu 
\ic{New -> c.m.core.module -> ImplementationModule} on the current model. 

Inside it, we will add a \ic{struct} called \ic{DataItem} that contains two
members. You create the \ic{struct} by just typing \ic{struct} inside the
module. You add the members by simply starting to type the \ic{int8} types. 

\begin{lstlisting}[language=mbeddr]
struct DataItem { 
  int8 id; 
};
\end{lstlisting}

We then create two functions that are able to process the \ic{DataItem}s. Here is
one function that does nothing (intentionally). You enter this function by
starting out with the \ic{DataItem} type, then typing the name and then using the
\ic{(} to actually create the function (the thing has been a global variable up
to this point!):

\begin{lstlisting}[language=mbeddr]
DataItem process_doNothing(DataItem e) {
  return e;
}
\end{lstlisting}

Other functions with the same signature may process the data in some specific
way; We can generalize those into a function type using a \ic{typedef}. Note
that entering the function type \ic{()=>()} is in fact a little bit cumbersome.
The alias for entering it is \ic{funtype}:

\begin{lstlisting}[language=mbeddr]
typedef (DataItem)=>(DataItem) as DataProcessorType;
\end{lstlisting}

We can now create a global variable that holds an instance of this type and that
acts as a global event dispatcher. We also create a new, empty \ic{test case}
that we will use for making sure the program actually works. In the test we
assign a reference to \ic{process\_doNothing} to that event handler.

\begin{lstlisting}[language=mbeddr]
DataProcessorType processor;
exported test case testProcessing { 
  processor = :process_doNothing; 
}
\end{lstlisting}


\begin{lstlisting}[language=mbeddr]
exported test case testProcessing { 
  processor = :process_doNothing;
  DataItem i1; 
  i1.id = 42; 
  DataItem i2 = processor(i1); 
  assert(0) i2.id == 42; 
}
\end{lstlisting}

Let us complete this into a runnable system. In the \ic{Main} module we change
our \ic{main} function to run our new test. Note how we import the
\ic{FunctionPointers} module; we call the test case, which is visible because it
is \ic{exported}:

\begin{lstlisting}[language=mbeddr]
module Main imports FunctionPointers { 
  exported int32 main(int32 argc, string*[] argv) { 
    return test testProcessing; 
  } 
}
\end{lstlisting}

Looking at the build configuration we see an error that complains that the
binary is inconsistent, because the \ic{FunctionPointers} module is not
included. We can fix this with a quick fix. This results in the following
binary:


\begin{lstlisting}[language=mbeddr-buildconfig]
executable MbeddrTutorial isTest: true { 
  used external libraries 
  
  used mbeddr libraries
   
  included modules 
    Main  
    FunctionPointers 
}
\end{lstlisting}


\subsection{Building and Running}

We can now build the system using \ic{Ctrl-F9} or by selecting \ic{Rebuild} from
the context menu of the solution in the logical view on the left. If you have
installed \ic{gcc} correctly the binary should actually be compiled
automatically. Here is the info message you should get in the MPS messages view:

\begin{lstlisting}
make finished successfully for mbeddr.tutorial.main/mbeddr.tutorial.main.m1
\end{lstlisting}

Let us run this program from the command line. To get to the respective location
in the file system, select the solution in the logical view, open the properties
and copy the \ic{Solution File} location. In my case it is:

\begin{lstlisting}
/Users/markusvoelter/Documents/mbeddr/mbeddr.core/code/applications/tutorial/solutions/mbeddr.tutorial.main/mbeddr.tutorial.main.msd
\end{lstlisting}

We can open a console and \ic{cd} to this directory, removing the last segment 
\ic{mbeddr.tutorial.main.msd} from the path. In that directory we can \ic{cd} to
\ic{source\_gen}, and from there we can navigate down to the directory for the
model: \ic{cd mbeddr/tutorial/m1}





\begin{lstlisting}
$ ls -ll
total 104
-rw-r--r--  1 markusvoelter  staff   1189 Oct 30 21:11 FunctionPointers.c
-rw-r--r--  1 markusvoelter  staff    159 Oct 30 21:11 FunctionPointers.h
-rwxr-xr-x  1 markusvoelter  staff   9028 Oct 30 21:11 Main
-rw-r--r--  1 markusvoelter  staff    338 Oct 30 21:11 Main.c
-rw-r--r--  1 markusvoelter  staff    162 Oct 30 21:11 Main.h
-rw-r--r--  1 markusvoelter  staff    433 Oct 30 21:11 Makefile
drwxr-xr-x  4 markusvoelter  staff    136 Oct 30 21:11 bin
-rw-r--r--  1 markusvoelter  staff    943 Oct 30 21:11 module_dependencies.gv
-rw-r--r--  1 markusvoelter  staff  14069 Oct 30 21:11 trace.info
\end{lstlisting}

Importantly, we see a \ic{Makefile}, so we can call \ic{make}. This will build
the binary:


\begin{lstlisting}
$ make
rm -rf ./bin 
mkdir -p ./bin 
gcc -std=c99   -c -o bin/Main.o Main.c  
mkdir -p ./bin 
gcc -std=c99   -c -o bin/FunctionPointers.o FunctionPointers.c  
gcc -std=c99 -o Main bin/Main.o bin/FunctionPointers.o   
\end{lstlisting}

This results in an executable \ic{MbeddrTutorial}. We can run it by calling
\ic{./MbeddrTutorial} or by calling \ic{make test}. The output should look as
follows:

\begin{lstlisting}
$ make test
./MbeddrTutorial
$$runningTest: running test () @FunctionPointers:test_testProcessing:0#767515563077315487
\end{lstlisting}

So the test succeeded, everything seems fine. Let us try to introduce an error
by somehow breaking the assertion.

\begin{lstlisting}[language=mbeddr]
assert(0) i2.id == 0;
\end{lstlisting}

After regenerating the code (\ic{Ctrl-F9} or \ic{Rebuild}) we can call \ic{make
test} again and we get:

\begin{lstlisting}
$ make test
mkdir -p ./bin 
gcc -std=c99   -c -o bin/Main.o Main.c  
mkdir -p ./bin 
gcc -std=c99   -c -o bin/FunctionPointers.o FunctionPointers.c  
gcc -std=c99 -o MbeddrTutorial bin/Main.o bin/FunctionPointers.o   
./MbeddrTutorial
$$runningTest: running test () @FunctionPointers:test_testProcessing:0#767515563077315487
$$FAILED: ***FAILED*** (testID=0) @FunctionPointers:testProcessing:0#9141254329931945948
make: *** [test] Error 1
\end{lstlisting}

As you can see the test fails. It says that in the
\ic{FunctionPointers} module, \ic{testProcessing} test case, assert number
\ic{0}. You can either navigate to the offending \ic{assert} manually.
Alternatively you can copy the console output into the clipboard and then paste
it into the text box into the window that opens from the \ic{Analyze -> mbeddr
Analyze Error Output} menu. Double clicking on the respective line opens the editor on the offending
\ic{assert} statement. 


\begin{center} 
  \includegraphics[width=\columnwidth]{figures/tutorial/erroroutput.png}
\end{center}


The approach shown above is useful if you get error output from an mbeddr
program running on another machine. If you run it on the machine that also runs
the mbeddr IDE, you can  also run the C program directly from inside the mbeddr
IDE. To do so, you have to create a run configuration for your executable (this
is described in detail in the section on debugging: \sect{details_debugging}) and
then run it with the little green arrow inside MPS. The output of the program is
shown directly in the MPS console view, and the error messages are directly
hyperlinked to the respective program nodes.





\subsection{Lambdas}

In contrast to regular C, mbeddr also provides lamdas, i.e. anonymous functions.
They can be passed to functions that take function types as an argument.
However, they can also be assigned to variables that have a function type, such
as the \ic{processor} above. Here is an example:

\begin{lstlisting}[language=mbeddr]
exported test case testLambdaProcessing { 
  Trackpoint i1 = { 
    id = 1 
    timestamp = 0 s 
    x = 0 m 
    y = 0 m 
    alt = 50 m 
  }; 
   
  processor = [tp| 
    tp.alt = 100 m; 
    tp; 
    ]; 
   
  assert(0) processor(i1).alt == 100 m;  
} 
\end{lstlisting}

A lamda is expressed as \ic{[arg1, arg2, ...|statements]}. The type of the
arguments is inferred from the context, they don't have to be specified. If
several statements are required (as in the example above), they are layouted
vertically. If only an expression is required, it is shown in line

\begin{lstlisting}[language=mbeddr]
Trackpoint i1 = {
  ... 
  alt = 100 m 
}; 

processor = [tp|tp;]; 

assert(0) processor(i1).alt == 100 m;  
\end{lstlisting}



\fordetails{Function Pointers}{\sect{details_functionpointers}}
