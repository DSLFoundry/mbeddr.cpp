\section{Complex Numbers}

\greyboxnote{The code for this example can be found in the tutorial in the
\ic{mbeddr.tutorial.complex} language.}


In this tutorial we add complex numbers to C. We emphasize type system and
editor convenience in this tutorial. We also explain how to build type system
tests. We do not add a generator for complex numbers; in other words, you cannot
execute programs that contain complex numbers. Here is some example code:

\begin{lstlisting}[language=mbeddr, morekeywords={complex}]
module Dummy imports nothing {
  void someFunction() { 
    complex c1 = (10, 20i); 
    complex sum = c1 + c1; 
    complex product1 = c1 * c1; 
    complex product2 = c1 * 10;
  } 
}
\end{lstlisting}

\parhead{A new Language} We create a new language \ic{mbeddr.tutorial.complex}
that extends the \ic{core.expressions} language.

\parhead{Structure} As can be seen from the code above we have to create a new
type (\ic{complex}) as well as a new literal (\ic{(10, 20i)}). The type is
trivial. The only important thing is that it extends the \ic{Type} concept
defined by the mbeddr:

\begin{lstlisting}[language=mps]
concept ComplexType extends Type     
  concept properties:                
    alias = complex                    
\end{lstlisting}
                                     
The literal for complex types extends \ic{Literal}, which in turn extends
\ic{Expression}. It has two children which are in turn literals:

\begin{lstlisting}[language=mps]
concept ComplexLiteral extends Literal    
    NumberLiteral real 1
    NumberLiteral img  1  
\end{lstlisting}
                                          

\parhead{Editor} We don't have to define an editor for the \ic{ComplexType}
because the superconcept \ic{Type} already has an editor that shows the alias of
the type by default. The editor for the literal is also straight forward based
on what we have discussed in the tutorial so far:

\begin{center}
\includegraphics[width=75mm]{figures/tutorial/complexliteralEditor.png}
\end{center}

However, there are interesting things to say about \emph{entering} complex
literals. You enter it by first entering the real part (10 in the above
example). You then press comma. This transforms the 10 into a complex literal,
and you can now enter the imaginary part (20 in the example above). Here is how
this is done.

First, we specify the \ic{dontSubstituteByDefault} property for the concept.
This means that when you press \ic{Ctrl-Space} in expression context,
\ic{ComplexLiteral} in \emph{not} offered. This means you cannot enter it.
We now have to build the press-comma-to-make-it-a-complex functionality. This is
done via a right transformation (you press a key on the right of
something and then run a transformation). Here is the code:

\begin{lstlisting}[language=mps, morekeywords={right, node, condition,
actions, add, custom, items, simple, item, matching, text, description,
output, icon, type}, deletekeywords={scope, type}] 
side transform actions makeComplexLiteral                                                                                                                                                                
                                                                                                                                                                                                         
right transformed node: NumberLiteral                                                                                                                                   
  condition :                                                                                                                                                                                            
    (operationContext, scope, model, sourceNode)->boolean { 
      MeetTypeHelper.isInstanceOf(sourceNode.type : IType, concept/INumeric/); 
    }                                                               
                                                                                                                                                                                                         
  actions :                                                                                                                                                                                              
    add custom items  (output concept: ComplexLiteral)                                                                                                                                                   
      simple item                                                                                                                                                                                        
        matching text                                                                                                                                                                                    
          ,                                                                                                                                                                                              
        description text                                                                                                                                                                                 
          <default>                                                                                                                                                                                      
        icon                                                                                                                                                                                             
          <default>                                                                                                                                                                                      
        type                                                                                                                                                                                             
          <default>                                                                                                                                                                                      
        do transform                                                                                                                                                                                     
          (operationContext, scope, model, sourceNode, pattern)->node<> { 
            node<ComplexLiteral> cl = new node<ComplexLiteral>(); 
            sourceNode.replace with(cl); 
            cl.real = sourceNode; 
            cl.img; 
          }
\end{lstlisting}

Here is what this means. If you have a \ic{NumberLiteral} (that fits the
condition with the \ic{MeetType}, explained below), then we have a
transformation that creates a \ic{ComplexLiteral} if we press
comma on the right side. It does so by running the \ic{do transform} script. The
script should be obvious; it creates a new node of type \ic{ComplexLiteral},
replaces the \ic{sourceNode} with that new node, sets the \ic{real} part of the
complex number to be the \ic{sourceNode} (remember this is a \ic{NumberLiteral})
and then returns the \ic{img} part. 

The idea with returning the \ic{img} part is that the input focus is then set to
that node. However, that really doesn't work (MPS Bug!). To compensate for that
we set a \ic{firstEditableCell} focus policy in the editor cell for the \ic{img}
part. This is what shows up as \ic{FE} in the editor above:

\begin{center}
\includegraphics[width=85mm]{figures/tutorial/focusPolicy.png}
\end{center}

A word on the strange condition used in the action above:

\begin{lstlisting}[language=mps, morekeywords={right, node, condition,
actions, add, custom, items, simple, item, matching, text, description,
output, icon, type}, deletekeywords={scope, type}] 
condition :                                                                                                                                                                                            
  (operationContext, scope, model, sourceNode)->boolean { 
    MeetTypeHelper.isInstanceOf(sourceNode.type : IType, concept/INumeric/); 
  }                                                               
\end{lstlisting}
 
Essentially what we want to do is restrict the comma-transformation to work
only if the type of the expression on which we right-transform implements
\ic{INumeric}. Normally w would write this as
\ic{sourceNode.type.isInstanceOf(INumneric)}, where \ic{.type} is a built-in
operator the returns the typesystem's type for the respective node. However, the
type for number literals is a bit of a challenge. If you press \ic{Ctrl-Shift-T}
on a number literal such as \ic{10}, you get something more complex: a meet
type. A meet type expresses the type system's uncertainty about the type of a
node. For example, a meet type \ic{(int8 | uint8)} means that
the type could be any of the element types! This is because it a number literal
such as \ic{10} can actually can actually be a signed or an unsigned number. If
we call \ic{isInstanceOf} on a \ic{MeetType}, this will of course fail! What we
really want to know is: is any of the element types inside a meet type an
instance of \ic{INumeric} (in the case above). The
\ic{MeetTypeHelper.isInstanceOf} method performs just that function.

 
 
\parhead{Type System} Of course the most interesting aspect of complex numbers
is the type system. The existing operators (such as \ic{+} or \ic{*}) have to be
adapted to work with complex numbers (adding new operators that use the same
symbols makes no sense, since then those would be offered in the code completion
menu alongside the old ones, confusing the user).

Before we adapt the binary operators, we have to make sure we define a type for
the \ic{ComplexType} and the \ic{ComplexLiteral}. \ic{ComplexType} already has a
type, since there is a typesystem rule for \ic{Type} that just clones the type
node:

\begin{lstlisting}[language=mps]
rule typeof_Type {                  
  applicable for concept = Type as t
  overrides false                   
                                    
  do {                              
    typeof(t) :==: t.copy;          
  }                                 
}                                   
\end{lstlisting}

This way, if you ask a type for its type (sounds strange, I know) you get a
clone of the type itself. For complex literal we return a new instance of
\ic{ComplexType}:

\begin{lstlisting}[language=mps]
rule typeof_ComplexLiteral {                   
  applicable for concept = ComplexLiteral as cl
  overrides false                              
                                               
  do {                                         
    typeof(cl) :==: new node<ComplexType>();   
  }                                            
}                                              
\end{lstlisting}


The types of the binary operators are defined differently, they use so-called
overloaded operations containers. Let us look at the definition of one of these
guys for dealing binary arithmetic operators in case of two complex numbers:

\begin{lstlisting}[language=mps, morekeywords={type, concepts, left, right,
is, exact}] 
operation concepts: BinaryArithmeticExpression                                         
  left operand type: new node<ComplexType>() is exact: true                              
  right operand type: new node<ComplexType>() is exact: true                             
is applicable:                                                                          
  <no isApplicable>                                                                      
operation type:                                                                        
  (op, leftOperandType, rightOperandType)->node<> { 
    new node<ComplexType>(); 
  }
\end{lstlisting}

This one defined that for any instance of \ic{BinaryArithmeticExpression} (or
subconcepts) if we use a \ic{ComplexType} as the type of the left argumetn and a
\ic{ComplexType} as the type of the right argument, the type of the expression
itself is also a \ic{ComplexType}. We also have to look at the case where one of
the two arguments is complex, and the other one isn't. The interesting question
is how we represent "the other one isn't": what type does it have to be? Here is
the code:

\begin{lstlisting}[language=mps, morekeywords={type, concepts, left, right,
is, exact, use, strong, subtyping}] 
operation concepts: BinaryArithmeticExpression                                                                                           
  left operand type: new node<ComplexType>() is exact: false use strong subtyping false 
  right operand type: new node<PrimitiveType>() is exact: false use strong subtyping false 
is applicable:                                                                                                                           
  (op, leftOperandType, rightOperandType)->boolean { 
    MeetTypeHelper.isInstanceOf(rightOperandType : IType, concept/INumeric/);  
  }
operation type:                                                                                                                          
  (op, leftOperandType, rightOperandType)->node<> { 
    new node<ComplexType>(); 
  }                                                  
\end{lstlisting}

This is the case for when there's a complex type on the left and "the other
type" on the right (there's another one of these rules for the vice versa case).
The "other type" has to be a \ic{PrimitiveType} that implements (taking into
account the \ic{MeetType} stuff discussed above) \ic{INumeric}. To understand
this, take a look at the type hierarchy for \ic{int8} in the following
illustration:

\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/tutorial/typehierarchy.png}
\end{center}

As you can see, at the top of the hierarchy is the primitive type. In mbeddr C,
this acts as the top type in the numeric type hierachy (note that this is the
type hierarchy as defined by subtying rules and \emph{not} the inheritance
hierarchy of the respective concepts!). To make sure we actually just get
numerical types and not (possible) non-numeric primtive types we add the "safety
net" applicability condition.

\subsection{Implementing a Type System Test}

Since we don't have a generator, we cannot execute
the code with the complex numbers. But we can write a type system test. A type
syste test is a test, to be executed in MPS or on the command line, that
verifies that expected type system errors are actually reported, and that no
other, unexpected type system errors show up. Here is an example test case: 

\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/tutorial/tstest.png}
\end{center}

This root is an instance of \ic{NodesTestCase} that is available to your model
if you use the \ic{jetbrains.mps.lang.test} language. In its \ic{nodes} slot we
create a \ic{test node} (just press \ic{Ctrl-Space}) and inside of that one we
create an implementation module (you have to do it via the module name
\ic{ImplementationModule}, or \ic{ImMo} using camel-case selection). Inside the
implementation module you can write normal C code, including the complex numbers
if you include the respective language into your model. 

The green annotations are interesting. The first one, \ic{check types}, is a
test operations annotation that tells the test engine to run type system checks
on this node. The second one, \ic{node .. has error}, is used to mark a node
where you expect an error to show up. Since the node has a red squiggly, and
that squiggly makes sense, you mark the error as expected. 


There are two more things worth mentioning: the test info node and the build
configuration. The test info node is a node that points to the project that
contains the test. This is so that tests can work on the command line via \ic{ant}.
When specifying this path you may want to use MPS' path variables to avoid
hard-coding directories. In the example code we do use a path variable.
Second, even though you're not generating executable C code, the model that
contains the test cases has to contain a \ic{BuildConfiguration}. It may be
empty, but it has to exist.	



\parhead{Running the Test Case} You can now run the test case by selecting the
\ic{Run Tests in <your model name>} option from the context menu of the model
that contains the test (yes, it takes way too long. JetBrains are working on
this problem!). To illustrate a test failure, I have changed one line to:

\begin{lstlisting}[language=mbeddr]
int8 productOfComplexAndComplex = c * c;
\end{lstlisting}

Running the tests results in a failed test, with this exception:


\begin{lstlisting}
java.lang.RuntimeException: java.lang.reflect.InvocationTargetException
	at jetbrains.mps...virtual_perform_1215601182156(TypesCheckOperation_Behavior.java:21)
	at jetbrains.mps.lang.test.behavior.TypesCheckOperation_BehaviorDescriptor.virtual_perform_1215601182156(TypesCheckOperation_BehaviorDescriptor.java:20)
    ...	
Caused by: java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	... 40 more
Caused by: junit.framework.AssertionFailedError: type complex is not a subtype of int8
	at junit.framework.Assert.fail(Assert.java:50)
	at junit.framework.Assert.assertTrue(Assert.java:20)
	at jetbrains.mps.lang.test.runtime.SubtreeChecker.checkNodeForErrors(SubtreeChecker.java:91)
	at jetbrains.mps.lang.test.runtime.SubtreeChecker.checkNodeForErrors(SubtreeChecker.java:39)
	... 45 more
Process finished with exit code 0
\end{lstlisting}


While this is not really a very readable error message, it does say something
about \ic{type complex is not a subtype of int8}. The problem is that it does
not report which node is the offending one. You have to figure that out for
yourself. Fortunately is usually relatively simple:

\begin{itemize}
  \item If something has a red squiggly in the test but does not have a
  \ic{node .. has error} annotation, this is a problem.
  \item If something has \emph{no} red squiggly in the test but \emph{does} have a
  \ic{node .. has error} annotation, this is a problem, too.
\end{itemize}









