\section{Language Evolution}
\label{evolution} 

If you define your own languages or extensions, it is likely that these
change over time based on what you learn from using them. In this case you have
to deal with existing programs: how do you keep them up-to-date with the
changing language. In this section we discuss some strategies.

\subsection{Backward Compatibility and Deprecation}

Generally it is a good idea to make changes to languages in a
backward-compatible way. This way, existing programs remain valid, while new
language constructs become available. The following changes to languages are
backward compatible:

\begin{itemize}
  \item Changes in the concrete syntax (i.e. the projection rules) are always
  automatically backward-compatible, because, as a consequence of the
  projectional editor, the existing model structure is just projected
  differently. There's nothing to do in this case.
  
  \item Adding additional features to concepts. While the programs may report
  errors (in case the new feature is not optional), the program does remain
  structurally valid and can easily be migrated manually. Using Self-Migrating
  Code (see \sect{selfmigration}), defaults can even be supplied manually.
  
  \item Moving features to a super-concept (Pull Up refactoring) is not a
  problem for the code. Access to features is done via their name, and moving
  them up does not invalidate these references.
  
  \item Renaming features or concepts (via the respective refactorings) does
  break existing models. However, MPS writes a \ic{.history} file that is used to
  "rewire" existing programs correctly. Make sure you check in the \ic{.history}
  files, otherwise it won't work :-)
  
  \item Removing features is also backward compatible; however, the AST still
  contains the data for the removed feature \emph{even though the feature
  declaration in the respective concept does contain that feature anymore}. MPS
  then shows a warning and suggests to remove that "unnecessary data" via a
  quick fix. MPS can also run \emph{all} these quick fixes via the model checker.
 
\end{itemize}

What is \emph{not} backward compatible is if you change the type of a reference
or a child in a concept. In this case the data stored in the AST can't be
interpreted anymore. Also, just simply deleting a concept while instances of
that concept are still used in models is not backward compatible. These things
should be avoided: 

Instead of just deleting a concept you should deprecate it. In the context of
mbeddr you can do this by implementing \ic{IDeprecatedLangConcept} from the
\ic{com.mbeddr.core.base} language. A generic non-typesystem rule will warn for
all uses of this interface in models.

\todo{Add automatic migration to these deprecatations.}

In the former case (where you want to change the type of a feature) you should
instead add a \emph{new} feature with the new type (in terms of the editor, you
can, for example, move either the new or the old one into the inspector). After
a while, when all of these programs have been migrated, you can safely remove
the old one.


\subsection{Migrating Code}
\label{selfmigration}

In order to migrate code orderly, the source (old) concept and target (new)
concept must both be available. This is why we need to use deprecation in the
first place, and not just delete an old concept and create a new one. Once all
instances of the old concept are gone, we can delete it. In this subsection we
discuss how you can assist users to automate the migration.

Let us look at an example. Remember the \ic{safeheap} statement:

\begin{lstlisting}[language=mps]
concept SafeHeapBlock extends Statement                
                      implements ILocalVarScopeProvider
  children:                                            
    SafeHeapVar    vars 0..n            
    StatementList  body 1              
\end{lstlisting}
                                                          
Let us consider changing the \ic{SafeHeapBlock} in the following way: instead of
storing the variables in a separate collection \ic{vars}, we just want to put
them as \ic{LocalVariableDeclaration}s at the beginning of the implementation
block. Since \ic{SafeHeapVar} extends \ic{LocalVariableDeclaration}, this is
possible in terms of subtyping. We'll look at various ways of handling this
migration in the remainder of this section.




\parhead{Intentions} An intention can be provided for the user to automatically
execute a migration. The applicability condition of the intention would inspect
the model to see if a migration is still required. If so, the \ic{execute}
section of the intention would perform the respective migration, by, for
example, setting a default value for a new property, by moving the contents from
one feature into another one or by completely replacing the source node with
another one. Here is the intention for our example case:

\begin{lstlisting}[language=mps, morekeywords={description, isApplicable,
execute}] 
intention migrateStructure for concept SafeHeapBlock {
  error intention : false                                                                                                                                                                                                         
  available in child nodes : false                                                                                                                                                                                                
                                                                                                                                                                                                                                
  description(editorContext, node)->string { 
    "Migrate Structure"; 
  }                                                                                                                                                           
                                                                                                                                                                                                                                
  isApplicable(editorContext, node)->boolean { 
    node.vars.isNotEmpty; 
  }                                                                                                                                                        
                                                                                                                                                                                                                                
  execute(editorContext, node)->void { 
    if (node.body.statements.isEmpty) { 
      node.body.statements.addAll(node.vars); 
    } else { 
      node.vars.forEach({~it => 
        node.body.statements.first.add prev-sibling(it); }); 
    } 
  }
} 
\end{lstlisting}

We allow the intention only if there are still \ic{SafeHeapVar}s in the
\ic{vars} collection. In the \ic{execute} block we distinguish between the case
where the body is empty (and we just add the variables) or where it is not empty
(in which case we add them to the beginning using the \ic{add prev-sibling}
construct). Note that adding nodes to a new collection (\ic{body.statements})
removes them from the original one \ic{vars}, because a node can only be owned
by one container collection.



\parhead{Self-Migrating Code} In addition to intentions, MPS also supports quick
fixes. The difference between the two is that a quick fix is always associated
with a failing type system rule (inference rule or non-typesystem rule), whereas
an intention is just associated with a concept. If the type system rule fails,
the user is offered (in the \ic{Alt-Enter} menu) to run the quick fix. In
addition, quick fixes can also be executed automatically -- leading to
self-migrating code.

For our example, let us write a non-typesystem rule that detects that a
migration is still necessary:

\begin{lstlisting}[language=mps, deletekeywords={be}] 
checking rule checkmigration_SafeHeapBlock {                         
  applicable for concept = SafeHeapBlock as shb                      
  overrides false                                                    
                                                                     
  do {                                                               
    if (shb.vars.isNotEmpty) { 
      error "must be migrated" -> shb; 
    }
  }                                                                  
}                                                                    
\end{lstlisting}

We can now implememt a quick fix that resolves the issue. The actual
implementation of the quick fix is of course the same as the \ic{excute} block
in the intention shown above, but the structure of quick fixes is a bit
different. Create a new quick fix (in the typesystem aspect):

\begin{lstlisting}[language=mps, morekeywords={arguments, description,
execute, quick, fix}] 
quick fix migrate_SafeHeapBlock                                                                                                                                                                             
                                                                                                                                                                                                            
arguments:                                                                                                                                                                                                  
  node<SafeHeapBlock> shb                                                                                                                                                                                     
                                                                                                                                                                                                            
description(node)->string { 
  "Migrate SafeHeapBlocks"; 
}                                                                                                                                                 
                                                                                                                                                                                                            
execute(node)->void { 
  if (shb.body.statements.isEmpty) { 
    shb.body.statements.addAll(shb.vars); 
  } else { 
    shb.vars.forEach({~it => shb.body.statements.first.add prev-sibling(it); }); 
  } 
}
\end{lstlisting}

The key to make this work is to associate the quick fix with the \ic{error}
statement in the non-typesystem rule shown earlier. You do this by selecting the
respective \ic{error} statement, and then, in the inspector, selecting our new
quick fix as the \ic{intention to fix an error} (yes, bad naming...). We have
to make sure we pass values for all the arguments declared for the quick fix:

\begin{center}
	\includegraphics[width=85mm]{figures/tutorial/quickfix.png}
\end{center}

As it stands now, we have achieved essentially the same as the intention
before: if the check fails, the quick fix is shown in the \ic{Alt-Enter} menu
(quick fixes can be recognized by the red light bulb symbol). However, we can
make the quick fix execute automatically by setting the \ic{apply immediately}
flag at the point where we associate the quick fix with the \ic{error}
statement (see screenshot above). As soon as you open the root that contains a
\ic{SafeHeapBlock} that needs to be migrated, the migration is performed
automatically.

It is a matter of taste, I guess, whether you want programs to change without
users doing so explictly. I guess for cases where the user does not \emph{see}
the change (only internal restructurings are performed), and automatic quick fix
is perfectly ok. If the quick fix performs a visible change, then maybe
requiring the user to do it manually is a better idea. Based on that argument,
the example we have shown here is a bad one.


\parhead{Migration Scripts} Both approaches shown so far address each instance
of a to-be-migrated concept separately. In the case of intentions this is
obvious; but also for the automatically executed quick fixes, these are only
executed if the user opens the root that contains something that needs to to be
migrated, or if the user runs the model checker and chooses to \ic{Apply Quick
Fixes} afterwards. Migration scripts are different, since they migrate a whole
model/solution/project.

For our example, we create a new migration script. To be able to do so, we first
add a \ic{scripts} aspect to the \ic{mbeddr.tutorial.heap} language. In that new
aspect we add a \ic{Language Migration Script}. Here is the code:

\begin{center}
	\includegraphics[width=\columnwidth]{figures/tutorial/migrationScript.png}
\end{center}

Once again, the actual implementation is the same as before. As you can see, one
migration script can contain several updaters, and each updater has an
applicable concept, a condition, as well as the code to be executed.

To execute such a script, select it from the \ic{Tools -> Scripts ->
Enhancement Scripts -> <script name>}.






