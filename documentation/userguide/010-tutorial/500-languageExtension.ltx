\chapter{Extending mbeddr}

This chapter discusses the \emph{extension} of the mbeddr system by developing
new languages or extending C. The chapter is essentially a collection of various
example languages that each explain different aspects; there is also some
overlap, i.e. some things may be explained more than once. 

This chapter is not intended as a complete MPS tutorial, although, of course, by
explaining how to build mbeddr extensions, we implicitly explain MPS. However,
we do recommend to take a look at some of the tutorials on the MPS website. In
particular, we recommend reading the LWC11 tutorial at

\ \ \ \ic{http://code.google.com/p/mps-lwc11/wiki/GettingStarted}

We also recommend reading a paper that explains the various
approaches for language composition:

\ \ \ \ic{http://voelter.de/data/pub/Voelter-GTTSE-MPS.pdf}

The latter paper is also available as a set of narrated screencasts. Please
watch them in this order:

\ \ \ \ic{http://www.youtube.com/watch?v=lNMRMZk8KBE}\\
\vspace{-10mm}

\ \ \ \ic{http://www.youtube.com/watch?v=ObWBUvHHNNg}\\
\vspace{-10mm}

\ \ \ \ic{http://www.youtube.com/watch?v=Y\_KvApgKZZQ}\\
\vspace{-10mm}

\ \ \ \ic{http://www.youtube.com/watch?v=0vELEMU\_Efc}\\
\vspace{-10mm}

\ \ \ \ic{http://www.youtube.com/watch?v=2\_6DzD73qDs}\\
\vspace{-10mm}

\ \ \ \ic{http://www.youtube.com/watch?v=4vUkbzRHF2Q}\\
\vspace{-10mm}

\ \ \ \ic{http://www.youtube.com/watch?v=Z23-Vpy6RFY}\\
\vspace{-10mm}

\ \ \ \ic{http://www.youtube.com/watch?v=HbnttNqXpdM}\\
 
 
This chapter consists of several sections. Each of them explain various aspects
of mbeddr language extensions. While the different sections look as if they
could be read separately because they cover different examples, they do in fact
build on each other: later sections do not repeat explanations for things
explained in earlier sections. So we suggest you read through the whole chapter,
beginning to end.
 
We also recommend you open the the actual example project and explore the code
as you read the tutorials. Especially in the later sections we don't discuss
every detail in the tutorial text.
 
 
\parhead{What if it doesn't work?} If you run into problems there are several
proven ways of debugging language definitions. We discuss these things in
\sect{langdebug}. If it is not a debugging problem but just generally "strange
behavior", you may want to try the following things:

\begin{itemize}
  \item In case MPS doesn't see languages that should be visible or the editors
  for concepts isn't display, try closing and reopening the current project.
  Sometimes a restart of MPS can also help.
  \item If these tricks do not help, then you may want to try to use the
  \ic{File -> Invalidate Caches} menu and restart MPS this way. MPS keeps a set
  of cache data structures, and sometimes these become corrupted. Invalidating
  the cache deletes the cache and rebuilds it completely.
  \item If you have problems with dependencies you may want to use \ic{Add
  Missing Imports} on a model. In particular, this often helps in cases where
  MPS reports a \emph{language X not found} even though it is actually mentioned
  as a Used Language for the respective model. 
\end{itemize}

\parhead{Migrating Languages} If you define your own languages or extensions, it
is likely that these change over time based on what you learn from using them.
In this case you have to deal with existing programs: how do you keep them
up-to-date with the changing language. In \sect{evolution} we discuss some
strategies to handle this challenge.



 
 
 
