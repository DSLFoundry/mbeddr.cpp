\section{Registers}

\greyboxnote{The code for this example can be found in the tutorial in the
\ic{mbeddr.tutorial.registers} language.}


Some processors have special-purpose registers: when a value is written to such
a register, a hardware-implemented computation is automatically triggered based
on the value supplied by the programmer. The result is then stored in the
register. If we want to run code that works with these registers on the PC for
testing, we face two problems: first, the header files that define the addresses
of the registers are not valid for the PC's processor. Second, there are no
special-purpose registers on the PC, so no automatic computations would be
triggered. 

\subsection{Example}

We can solve this problem with a language extension that allows us to define
registers first class and access them from C code (see code below). The
extension also supports specifying an expression that performs the computation.


\begin{lstlisting}[language=mbeddr, morekeywords={register8}]
exported register8 ADC10CTL0 (val * 1000) 
    
void calculateAndStore(int8 value) {
   int8 res = // some calculation with value
   ADC10CTL0 = res; // actually stores result * 1000
}   
\end{lstlisting} 


The extension also supports 16-bit registers. These can be accessed as a word,
or by each byte separately. 

\begin{lstlisting}[language=mbeddr, morekeywords={register16}]
exported register16 ADC10_16 (val) 
  low byte suffix = _L (val) 
  high byte suffix = _H (val)
  
void calculateAndStore(int8 lowByteVal, int8 highByteVal) {
  ADC10_16.L = lowByteVal;
  ADC10_16.H = highByteVal;  
}
\end{lstlisting} 

When the code is translated for the real device, the real registers are accessed
using the processor header files. In testing we use generated \ic{struct}s to
hold the register data and insert the expression into the code that updates the
struct, simulating the hardware-based computation. A configuration item in the
build configuration is used to decide the two cases:

\begin{lstlisting}[language=mbeddr, morekeywords={Build, Configuration,
System, Configuration, Items, Binaries, registers}] 
Build Configuration for mbeddr.tutorial.main.newLanguages
 
Build System: 
  ... 
 
Configuration Items 
  ... 
  registers emulated 
 
Binaries 
  ...
\end{lstlisting}


\subsection{Implementation}

The basic setup for the register definition is simple:
\ic{Register}s are \ic{IModuleContent} that have a name an the value expression.
We provide a new expression \ic{val} that is restricted via a constraint to be
used only in register definitions. Type checks make sure that the expression is
a \ic{int8} or \ic{int16}, respectively. We also define expressions to access
registers from regular C code (as in \ic{ADC10CTL0 = res;}). However, there are
a few more interesting things that are worth discussing.

\parhead{References to IModuleContent} To reference registers from C code, there
is a \ic{RegisterRefExpr} that extends \ic{Expression}. It references a register:

\begin{lstlisting}[language=mps]
concept RegisterRefExpr extends Expression          
                        implements IModuleContentRef
  references:                                       
    Register register 1           
\end{lstlisting}
                                                    
Note the implementation of the \ic{IModuleContentRef}. This is necessary to
support mbeddr's cross-model code generation. Every reference that points to an
\ic{IModuleContent} has to implement this interface. The interface requires the
implementation of two behavior methods. Both deal with references that point to
module contents that potentially reside in a different model:

\begin{lstlisting}[language=mps]
public void rebindToProxy(node<> proxyElement) 
  overrides IModuleContentRef.rebindToProxy { 
  this.register = proxyElement : Register; 
}
                                                                                                                                            
public node<> referencedModuleContent() 
  overrides IModuleContentRef.referencedModuleContent { 
  this.register; 
}                       
\end{lstlisting}
                                                                                                                                            



\parhead{.L and .H suffixes} When accessing a 16-bit register, it is possible to
access each byte separately (see the 16-bit example above). Access to the low
byte happens via the \ic{.L} suffix, access to the high byte happens via
\ic{.H}. Users can simply press \ic{.H} or \ic{.L} on the right side of a
16-bit register reference. 

Structurally, the \ic{LowByteRefExpr} and the \ic{HighByteRefExpr} are
\ic{UnaryExpression}s that wrap the \ic{RegisterRefExpr} discussed earlier. So
if the user presses \ic{.H} or \ic{.L} on the right side of a
\ic{RegisterRefExpr}, a right transformation has to be triggered that wraps in
in the respective unary expressions:

                                                                                                                                                                                                         
\begin{lstlisting}[language=mps, morekeywords={right, node, condition, add,
custom, items, simple, item, description, text, icon, type, do, transform,
matching}, deletekeywords={scope}]
right transformed node: RegisterRefExpr                                                                                                                                
  condition :                                                                                                                                                                                            
    (operationContext, scope, model, sourceNode)->boolean { 
      sourceNode.register.isInstanceOf(Register16) && 
          sourceNode.register : Register16.allowCharAccess; 
    }                                      
                                                                                                                                                                                                         
  actions :                                                                                                                                                                                              
    add custom items  (output concept: LowByteRefExpr)                                                                                                                                                   
      simple item                                                                                                                                                                                        
        matching text                                                                                                                                                                                    
          .L                                                                                                                                                                                             
        do transform                                                                                                                                                                                     
          (operationContext, scope, model, sourceNode, pattern)->node<> { 
             node<LowByteRefExpr> lbe = new node<LowByteRefExpr>(); 
             sourceNode.replace with(lbe); 
             lbe.expression = sourceNode; 
          }  
\end{lstlisting}
           

The transformation intercepts \ic{.L} on the right side, creates a new
\ic{LowByteRefExpr}, adds the original node as its \ic{expression} and then
replace the source node with the new \ic{LowByteRefExpr}.


\parhead{Multiple Generators} As metioned above, the registers and the register
access has to be translated differently depending on whether we generate for the
real system or for a unit test running on a PC. Here is the fundamental
approach:

\begin{itemize}
  \item We create a single generator (in terms of MPS) that contain two mapping
  configurations, one called \ic{registersSimulated} and another one called
  \ic{registersRealWorld}. 
  \item The respective transformation rules are called from either one of them.
  \item We define a configuration item that allows users to specify in the build
  configuration which way the registers should be translated.
  \item Each of the mapping configurations has an applicability condition that
  queries this configuration item and then activates/deactivates the respective
  mapping configuration. 
\end{itemize}

Let us look at the configuration item first. Here is the code:

\begin{lstlisting}[language=mps, morekeywords={}, deletekeywords={}]
concept RegisterConfigurationItem extends BaseConcept          
                                  implements IConfigurationItem
  properties:                                                  
    trafo : RegisterTransformationKind                           
\end{lstlisting}

The concept implements \ic{IConfigurationItem} so it can be used in the
\ic{configuration items} slot of the build configuration. It also has a property
of type \ic{RegisterTransfor- mationKind} which is an enumeration that has two
literals:

\begin{lstlisting}[language=mps, morekeywords={enumeration, datatype, value},
deletekeywords={}] 
enumeration datatype RegisterTransformationKind      
  ...       
  value emulate     presentation emulated     (default)
  value realworld   presentation realworld           
\end{lstlisting}

Here is the respective query in the \ic{registersRealWorld} mapping
configuration:

\begin{lstlisting}[language=mps, morekeywords={enumeration, datatype, value,
mapping, configuration, top, priority, is, group}]
mapping configuration registersRealWorld                                                                                                                                                                                                                                                
top-priority group false                                                                                                                                                                                                                                                                
                                                                                                                                                                                                                                                                                        
is applicable:                                                                                                                                                                                                                                                                          
  (genContext)->boolean { 
    node<IConfigurationItem> rc = BCHelper.expectBCConfigItem(
    	genContext.inputModel, 
    	genContext, 
    	"com.itemis.smartmeter.cextension/main.registersRealWorld", 
    	concept/RegisterConfigurationItem/
    );
    if ( rc != null ) {
      return rc : RegisterConfigurationItem.trafo.is(< realworld >);
    } else {
      return false;
    } 
  }
\end{lstlisting}

We call a helper method \ic{BCHelper.expectBCConfigItem} to find a configuration
item of type \ic{RegisterConfigurationItem}. We pass in the input model, the
generation context, as well as a string that described which generator is trying
to find the configuration item (this is important for error reporting). We then
check whether the \ic{trafo} property has the \ic{realworld} enum value. A
similar query (using \ic{simulated}, obviously) is used in the applicability
condition for the \ic{registersSimulated} mapping configuration. 

Note that this is an example of where a generator is designed to be able to cope
with both options. In case there is an existing generator and you want to
override it \emph{without changing the existing generator}, then a different
appraoch is required: the overriding generator has to have a \emph{strictly
before <} priority relative to the existing generator to make sure it "reduces
away" things before the existing generator has a chance to reduce things.



\parhead{Generating Header File Access} For the real-world translation, we
assume that the register names are defined as \ic{\#define}s in an included
header file. So the code generator can generate references to \ic{\#define}. In
this example, however, we use a differnet appraoch: we generate text
directly. While this can be considered cheating, it is often useful, for
example, when generating calls to implicit functions (i.e. functions that are
available in C even though there is no prototype in a header the declares them.
\ic{printf} is an example.). Here are the reduction rules:

\begin{center}
\includegraphics[width=\columnwidth]{figures/tutorial/registersRealworld.png}
\end{center}

The register declarations themselves are reduced to an \ic{EmptyModuleContent},
i.e. nothing. The \ic{HighByteRefExpr} and the \ic{LowByteRefExpr} are reduced
to an instance of \ic{ArbitraryTextExpression}: this thing can mix generated
text with nodes (see next paragraph). Finally, the \ic{RegisterRefExpr} is also
reduced to a "piece of text", but only if it is not owned by a
\ic{HalfRegRefExpr}, the superconcept of \ic{LowByteRefExpr} and
\ic{HighByteRefExpr}.

Let us take a closer look at the \ic{ArbitraryTextExpression}. It is essentially
a horizontal collection of parts; these are either strings or nodes. In the
example we generate a string \ic{registerName} whose value we then change via a
property macro (as usual). The \ic{ArbitraryTextExpression} provides two
additional goodies, both accessible via the inspector. First, you can specify a
type for it, so the type system in the IDE (or the generator) is satisfied.
Second, you can specify a to-be-included header file. This header file is then
included in the generated header file. This is useful for \ic{malloc}, for
example, where you just generate the text \ic{malloc} and then use \ic{stdlib.h}
as the to-be-inclded header file.








































