



\section{Overview over C Extensions}

In this section we discuss in which particular ways C needs to be extensible in
order to create meaningful language extensions. We then discuss a set of
examples and how to build them. This section is intended as an overview; more detailed
examples follow in the subsequent sections. We start with a brief overview over
the modular nature of the C implementation itself.


\subsection{C is modular itself}

C can be partitioned into expressions, statements, functions, etc. We
have factored these parts into separate language modules to make each of them
reusable without pulling in all of C. The \ic{expressions} language is the most
fundamental language. It depends on no other language and defines the primitive
types, the corresponding literals and the basic operators. Support for pointers
and user defined data types (\ic{enum, struct, union}) is factored into the
\ic{pointers} and \ic{udt} languages, respectively. \ic{statements} contains
the procedural part of C, and the \ic{modules} language covers modularization.
\fig{umldiagram} shows an overview over some of the languages and constructs.


\begin{figure}[h]   
\begin{center} 
  \includegraphics[width=90mm]{figures/tutorial/umldiagram.png}
\end{center}

\caption{Anatomy of the mbeddr language stack: the diagram shows some of the 
language concepts, their relationships and the languages that contain them.}

\label{umldiagram}
\end{figure} 


\subsection{Ways to Extend C}

To be able to have really extensible language, several diffent ways of extending
C are necessary. These include:

\begin{itemize}
\item \textbf{Top Level Constructs} Top level constructs (on the level of
functions or \ic{struct} declarations) are necessary. This enables the
integration of test cases, state machines, or interfaces and components.

\item \textbf{Statements} New statements, such as \ic{assert} or \ic{fail}
statements in test cases, must be supported. If statements introduce new
blocks, then variable visibility and shadowing must be handled correctly, just
as in regular C. Statements may have to be restricted to a specific
context; for example the \ic{assert} or \ic{fail} statements must
\emph{only} be used in test cases and not in any other statement list.

\item \textbf{Expressions} New kinds of expressions must be supported. An
example is a decision table expression that represents a two-level decision
tree as a two dimensional table. Many more examples exist, expressions are maybe
the most important kind of extension.

\item \textbf{Types and Literals} New types, e.g. for matrices,
complex numbers or quantities with physical units must be supported. This also
requires defining new operators and overriding the typing rules for existing
ones. New literals may also be required: for example, physical units could be
attached to number literals (as in \ic{10kg}).

\item \textbf{Transformation} Alternative transformations for existing
language concepts must be possible. For example, in a module marked as
\ic{safe}, \ic{x + y} may have to be translated to
\ic{addWithBoundsCheck(x, y)}, a call to an \ic{inline} function that performs
bounds-checking besides the addition. 

\item \textbf{Meta Data Decoration} It should be possible to add meta data
such as trace links to requirements or product line variability constraints to
arbitrary program nodes, without changing the concept of the node.

\item \textbf{Restriction} It should be possible to define contexts that
restrict the use of certain language concepts. Like
any other extension, such contexts must be definable \emph{after} the original language
has been implemented, without invasive change. For example, the use of
pointer arithmetic should be prohibited in modules marked as \emph{safe} or the
use of real numbers should be prohibited in state machines that are intended to
be model checked (model checkers do not support real numbers).

\end{itemize}

In the following subsections we provide examples for each of these ways.




\subsection{Top-Level Constructs: Test Cases}

Unit Tests are new top-level constructs (\fig{testcase}) introduced in a
separate \emph{unittest} language that extends the C core. They are like
\ic{void} functions without arguments. The \emph{unittest} language also
introduces \ic{assert} and \ic{fail} statements, which can only be used inside
test cases. In this section we illustrate the implementation of the \ic{test
case} construct as well as of the \ic{assert} and \ic{fail} statements available
inside test cases.


   

\begin{figure}[h]   
\begin{center}
\includegraphics[width=\columnwidth]{figures/tutorial/unittest.png}
\end{center}
\caption{The \emph{unittest} language introduces test cases as well as
\ic{assert} and \ic{fail} statements which can only be used inside of a test
case. Test cases are transformed to functions, and the \ic{assert} statements
become \ic{if} statements with a negated condition. The generated code also
counts the number of failures so it can be reported to the user via a binary's
exit value.}
\vspace{-3mm}
\label{testcase}
\end{figure} 



\parhead{Structure} \ic{Module}s own a collection of \ic{IModuleContent}s,
an interface that defines the properties of everything that can reside directly in
a module. All top-level constructs such as \ic{Function}s implement
\ic{IModuleContent}. \ic{IModuleContent} extends 
\ic{IIdentifier- NamedConcept} interface, which provides a \ic{name} property.
\ic{IModuleContent} also defines a Boolean property \ic{exported} that
determines whether the respective module content is visible to modules that
import this module. This property is queried by the scoping rules that determine
which elements can be referenced. Since the \ic{IModuleContent} interface can
also be implemented by concepts in other languages, new top level constructs
such as the \ic{TestCase} in the \ic{unittest} language can implement this
interface, as long as the respective language has a dependency on the
\ic{modules} language, which defines \ic{IModuleContent}. \fig{umldiagram}
shows some of the relevant concepts and languages.



\parhead{Constraints} A test case contains a \ic{StatementList}, so any C
statement can be used in a test case. \ic{StatementList} becomes available to
the unit test language through its dependency on the \ic{statements} language.
\ic{unittest} also defines new statements: \ic{assert} and \ic{fail}. They
extend the abstract \ic{Statement} concept defined in the \ic{statements}
language. This makes them valid in \emph{any} statement list, for example in a
function body. This is undesirable, since the transformation of \ic{assert}s
into C depends on them being used in a \ic{TestCase}. To enforce this, a \ic{can
be child} constraint is defined. This constraint restricts an
\ic{AssertStatement} to be used only inside a \ic{TestCase} by checking that at
least one of its ancestors is a \ic{TestCase}:



\begin{lstlisting}[language=mbeddr] 
  concepts constraints AssertStatement { 
    can be child 
      (context, scope, parentNode, link, childConcept)->boolean { 
        parentNode.ancestor<TestCase>.isNotNull; 
      }   
} 
\end{lstlisting}



\parhead{Transformation} The new language concepts in \ic{unittest} are reduced
to C concepts: the \ic{TestCase} is transformed to a \ic{void} function without
arguments and the \ic{assert} statement is transformed into a \ic{report}
statement defined in the \ic{util} language. The \ic{report} statement, in turn,
it is transformed into a platform-specific way of reporting an error (console,
serial line or error memory). The code below shows an example of this
two-step process.

\begin{minipage}[b]{0.3\linewidth}
\begin{lstlisting}[language=mbeddr]
test case exTest {
  int x = add(2, 2);               
  assert(0) x == 4;         

} 
\end{lstlisting}
\end{minipage}
\hspace{0.025\linewidth}
\begin{minipage}[b]{0.3\linewidth}
\begin{lstlisting}[language=mbeddr]
void test_exTest {
  int x = add(2, 2);               
  report 
    test.FAIL(0) 
    on !(x == 4);}
\end{lstlisting}
\end{minipage}
\hspace{0.025\linewidth}
\begin{minipage}[b]{0.3\linewidth}
\begin{lstlisting}[language=mbeddr] 
void test_exTest {
  int x = add(2, 2);
  if (!(x == 4)) {
    printf("fail:0");
} } 
\end{lstlisting}
\end{minipage}






\subsection{Statements: Safeheap Statement}

\greyboxnote{The code for this example can be found in the tutorial in the
\ic{mbeddr.tutorial.heap} language.}


We have seen the basics of integrating new statements in the previous section
where \ic{assert} and \ic{fail} extended the \ic{Statement} concept inherited
from the C core languages. In this section we focus on statements that require
handling local variable scopes and visibilities. We implement a part of the
\ic{safeheap} statement mentioned earlier (see \fig{safeheap}), which automatically frees
dynamically allocated memory. The variables introduced by the \ic{safeheap}
statement must only be visible inside its body and they have to shadow
variables of the same name declared in outer scopes (such as the \ic{a} declared
in the second line of the \ic{measure} function in \fig{safeheap}).

\parhead{Structure} The \ic{safeheap} statement extends \ic{Statement}. It
contains a \ic{StatementList} as its body, as well as a list of
\ic{SafeHeapVar}s. These extend \ic{LocalVarDecl}, so they fit with the
existing mechanism for handling variable shadowing (explained below).
  
\begin{figure} 
\begin{center}
\includegraphics[width=95mm]{figures/tutorial/safeheap.png}
\end{center}
\caption{A \ic{safeheap} statement declares heap variables which can only be
used inside the body of the statement. When the body is left, the memory is
automatically freed. }
\label{safeheap}  
\end{figure}

\parhead{Editor} The safeheap editor is shown in \fig{safeheapEditor}. It
comprises a collection cell (indent) that contains the keyword, a vertical
collection of the variables (with the \ic{draw-brackets} style option set) plus
the body (which brings its own curlies and line break policy). 

\begin{figure} 
\begin{center}
\includegraphics[width=100mm]{figures/tutorial/safeheapEditor.png}
\end{center}
\caption{The editor for the safeheap statement; details are discussed in the
running text.}
\label{safeheapEditor}  
\end{figure}

There is an important twist to the editor definition and the way it can be used,
though. The \ic{vars} collection contains a list of \ic{SafeHeapVar} nodes. So,
when the user edits this collection, he has to instantiate a new
\ic{SafeHeapVar}, for example using the alias. However, as you will find out
when using the editor, you can just select the type of that variable, and once
you have selected one (by typing or by selection from the code completion menu)
a new \ic{SafeHeapVar} is created and that type is set as its type. This is
achieved using a wrapper action:

\begin{lstlisting}[language=mps, morekeywords={substitute, actions,
substituted, condition, actions, add, custom, items, wrap, output,
concept, wrapper, block, return, small, part}] 
substitute actions wrap_SafeHeapVarWithType                                                                                                                                                           
                                                                                                                                                                                                           
substituted node: SafeHeapVar                                                                                                                                                         
  condition :                                                                                                                                                                                              
    (..., parentNode, ...)->boolean { 
      parentNode.ancestor<concept = SafeHeapBlock, +>.isNotNull; 
    }                               
                                                                                                                                                                                                           
  actions :                                                                                                                                                                                                
    add custom items  (output concept: SafeHeapVar)                                                                                                                                                        
      wrap Type                                                                                                                                                                                            
        wrapper block                                                                                                                                                                                      
          (..., parentNode, nodeToWrap, ...)->node<SafeHeapVar> {
            node<SafeHeapVar> v = new node<SafeHeapVar>(); 
            v.type = nodeToWrap; 
            v;   
          }
        return small part                                                                                                                                                                                  
          false                                                                                                                                                                                            
\end{lstlisting}

This action says: whenever a \ic{SafeHeapVar} is expected somewhere
(\ic{substituted noe}), the user can actually also enter a \ic{Type}
(\ic{wrap}). In that case, we still create a \ic{SafeHeapVar} (\ic{output
concept}), and we get it via the code in the wrapper block. There we create an
instance of \ic{SafeHeapVar}, set the type to be the \ic{nodeToWrap} and then
return that newly created variable. 

Actions like this play an important role in making the MPS/mbeddr editor usable!



\parhead{Behaviour} \ic{LocalVarRef}s are expressions that reference
\ic{LocalVarDecl}. A scope constraint, a mechanism provided by MPS, determines
the set of visible variables for a given \ic{LocalVarRef}. We implement this
constraint by plugging into mbeddr's generic local variable scoping mechanism
using the following approach. The constraint ascends the containment tree
until it finds a node which implements \ic{ILocalVarScopeProvider} and calls its \ic{getLocalVarScope}
method. A \ic{LocalVarScope} has a reference to an outer scope, which is set by
finding \emph{its} \ic{ILocalVarScopeProvider} ancestor, effectively building a
hierarchy of \ic{LocalVarScope}s. To get at the list of the visible variables,
the \ic{LocalVarRef} scope constraint calls the \ic{getVisibleLocalVars}
method on the innermost \ic{LocalVarScope} object. This method returns a flat
list of \ic{LocalVarDecl}s, taking into account that variables owned by a
\ic{LocalVarScope} that is \emph{lower} in the hierarchy shadow variables of the same
name from a \emph{higher} level in the hierarchy. So, to plug the
\ic{SafeHeapStatement} into this mechanism, it has to implement
\ic{ILocalVarScopeProvider} and implement the two methods shown in the code
below. A \ic{safeheap} statement implements the two methods declared by the
\ic{ILocalVarScopeProvider} interface. \ic{getContainedLocalVariables}
returns the \ic{LocalVarDecl}s that are declared between the parentheses (see
\fig{safeheap}). \ic{getLocalVarScope} constructs a scope that contains these
variables and then builds the hierarchy of outer scopes by relying on its
ancestors that also implement \ic{ILocalVarScope- Provider}. The index of the
statement that contains the reference is passed in to make sure that only
variables declared \emph{before} the reference site can be referenced.


\begin{lstlisting}[language=mps, deletekeywords={scope}] 
public LocalVarScope getLocalVarScope(node<> ctx, int stmtIdx) {
  LocalVarScope scope = new LocalVarScope(getContainedLocalVariables()); 
  node<ILocalVarScopeProvider> outerScopeProvider = this.ancestor<ILocalVarScopeProvider>; 
  if (outerScopeProvider != null)  
    scope.setOuterScope(outerScopeProvider.
                   getLocalVarScope(this, this.index)); 
  return scope; 
}

public sequence<node<LocalVariableDecl>> getContainedLocalVars() {
  this.vars;  
}
\end{lstlisting} 


\parhead{Type System} To make the \ic{safeheap} statement work correctly, we
have to ensure that the variables declared and allocated in the \emph{safeheap}
statement do not escape from its scope. To prevent this, an error is reported if
a reference to a \ic{safeheap} variable is passed to a function.
The code elow shows the code: theq type system rule reports an error if a
reference to a local variable declared and allocated by the \ic{safeheap} statement is used
in a function call.



\begin{lstlisting}[language=mps, deletekeywords={to}] 
checking rule check_safeVarRef for concept = LocalVarRef as lvr {                  
    boolean isInSafeHeap = lvr.ancestor<SafeHeapStatement>.isNotNull; 
    boolean isInFunctionCall = lvr.ancestor<FunctionCall>.isNotNull; 
    boolean referencesSafeHeapVar = lvr.var.parent.isInstanceOf(SafeHeapStatement); 
    if (isInSafeHeap && isInFunctionCall && referencesSafeHeapVar) 
         error "cannot pass a safe heap var to a function" -> lvr; 
} 
\end{lstlisting} 










 

\subsection{Expressions: Decision Tables}

Decision Tables are an example of extending
expressions. An example is shown in \fig{dectab}. A decision table represents
nested \ic{if} statements. It is evaluated to the value of the first cell whose
column and row headers are \ic{true} (the evaluation order is left to right, top
to bottom). A default value (\ic{FAIL}) is specified to handle the case where
none of the column/row header combinations is \ic{true}. Since the compiler and
IDE have to compute a type for expressions, the decision table specifies the
type of its result values explicitly (\ic{int8}).
 
\begin{figure}[h]
\begin{center}
\includegraphics[width=\columnwidth]{figures/tutorial/dectabexample.png} 
\end{center}
\caption{A decision
table evaluates to the value in the cell for which the row and column headers are
\ic{true}, a default value otherwise (\ic{FAIL} in the example). By default, a
decision table is translated to nested \ic{if}s in a separate function. The
figure shows the translation for the common case where a decision table is used in a \ic{return}.
This case is optimized to not use the indirection of an extra function.}
\label{dectab}     
\end{figure} 


Expressions are different from statements in that they can be evaluated to a
\emph{value} as the program executes. During editing and compilation, the
\emph{type} of an expression is relevant for the static correctness of the
program. So extending a language regarding expressions requires extending the
type system rules as well.
  



\parhead{Structure} The decision table extends the \ic{Expression} concept
defined in the \ic{expres- sions} language. Decision tables contain a list of
expressions for the column headers, one for the row headers and
another one for the result values. It also contains a child of type \ic{Type} 
to declare the type of the result expressions, as well as a default value 
expression. The concept defines an alias \ic{dectab} to allow users to
instantiate a decision table in the editor. Obviously, for non-textual notations
such as the table, the alias will be different than the concrete syntax (in
textual notations, the alias is typically made to be the same as the "leading
keyword", e.g. \ic{assert}).


\parhead{Editor} Defining a tabular editor is straight forward: the editor
definition contains a \ic{table} cell, which delegates to a Java class that
implements \ic{ITableModel}. This is similar to the approach to the approach
used by Java Swing. It provides methods such as \ic{getValueAt(int row, int
col)} or \ic{deleteRow(int row)}, which have to be implemented for any specific
table-based editor. To embed another node in a table cell (such as the
expression in the decision table), the implementation of \ic{getValueAt} simply returns this node.


\parhead{Type System} As mentioned above, MPS uses unification in the type
system. Language concepts specify type equations that contain type literals
(such as \ic{boolean}) as well as type variables (such as
\ic{typeof(dectab)}). The unification engine then tries to assign values to the
type variables so that all applicable type equations become \ic{true}. New language
concepts contribute additional type equations. \fig{dectabtyping} shows those
for decision tables. New equations are solved along with those for existing
concepts. For example, the typing rules for a \ic{ReturnStatement} ensure that
the type of the returned expression is the same or a subtype of the type of the
surrounding function. If a \ic{ReturnStatement} uses a decision table as the
returned expression, the type calculated for the decision table must be
compatible with the return type of the surrounding function.


\begin{lstlisting}[language=mps, deletekeywords={be}, morekeywords={infer}]
  // the type of the whole decision table expression
  // is the type specified in the type field
typeof(dectab) :==: typeof(dectabc.type);   
  // for each of the expressions in
  // the column headers, the type must be Boolean
foreach expr in dectab.colHeaders {        
  typeof(expr) :==: <boolean>;               
}                                          
  // ... same for the row headers
foreach expr in dectabc.rowHeaders {       
  typeof(expr) :==: <boolean>;             
}                                          
  // the type of each of the result values must 
  // be the same or a subtype of the table itself
foreach expr in dectab.resultValues {      
  infer typeof(expr) :<=: typeof(dcectab);  
}  
  // ... same for the default
typeof(dc.def) :<=: typeof(dectab);        
\end{lstlisting} 

 








\subsection{Types and Literals: Physical Units}

Physical Units are new types that also specify a physical unit in addition to
their actual data type (see \fig{unitsexample}). New literals are introduced to
support specifying values for these types that include the physical unit. The
typing rules for the existing operators (\ic{+}, \ic{*} or \ic{>}) are
overridden to perform the correct type checks for types with units. The type
system also performs unit computations to deal correctly with \ic{speed =
length/time}, for example.

\begin{figure}[h]
\begin{center}
\includegraphics[scale=0.7]{figures/tutorial/units.png}
\end{center}
\caption{The \emph{units} extension ships with the SI base units. Users
can define derived units (such as the \ic{mps} in the example) as well as
convertible units that require a numeric conversion for
mapping back to SI units. Type checks ensure that the values associated with
unit literals use the correct unit and perform unit computations (as in speed
equals length divided by time). Errors are reported if incompatible units are
used together (e.g. if we were to add length and time). To support this feature,
the typing rules for the existing operators (such as
\ic{+} or \ic{/}) have to be overridden.} 
\label{unitsexample}
\end{figure}






% \begin{figure}[h]
% \rule{\columnwidth}{0.4pt}
% \vspace{-7mm}
% \begin{center} 
% \includegraphics[width=85mm]{figures/units.png}
% \end{center} 
% 
% \caption{The \emph{units} extension comes with the sevel SI units predefined and
% lets users define arbitrary derived units (such as the \ic{mps} in the example).
% It is also possible to defined convertible units that require a numeric
% conversion factor to get back to SI units. Type checks ensure that the values
% associated with unit literals use the correct unit and perform unit computations
% (as in speed equals length divided by time). Errors are recorded if
% incompatible are used together (e.g. if we were to add length and time). To
% support this feature, the typing rules for the existing operators (such as
% \ic{+} or \ic{/}) have to be overridden.} 
% \label{unitsexample}
% \end{figure}
 

\parhead{Structure} Derived and convertible \ic{UnitDeclaration}s are
\ic{IModuleContents}. Derived unit declarations specify a name (\ic{mps},
\ic{kmh}) and the corresponding SI base units (\ic{m}, \ic{s}) plus an
exponent; a convertible unit declaration specifies a name and a conversion
formula. The backbone of the extension is the \ic{UnitType} which is a composite type that has another type (\ic{int}, \ic{float}) in its
\ic{valueType} slot, plus a unit (either an SI base unit or a reference 
to a \ic{UnitDeclaration}). It is
represented in programs as \ic{baseType/unit/}. We also provide
\ic{LiteralWithUnit}s, which are expressions that contain a
\ic{valueLiteral} and, like the \ic{UnitType}, a unit (so we can write 
\ic{100 kmh}).


\parhead{Scoping} \ic{LiteralWithUnit}s and \ic{UnitType}s refer to a
\ic{UnitDeclaration}, which is a module content. According to the visibility
rules, valid targets for the reference are the \ic{UnitDeclaration}s in the
same module, and the \emph{exported} ones in all imported modules. This rule
applies to \emph{any} reference to \emph{any} module contents, and is
implemented generically in mbeddr. The code below shows the code for the scope
of the reference to the \ic{UnitDeclaration}. We use an interface
\ic{IVisibleNodeProvider}, (implemented by \ic{Module}s) to find all
instances of a given type. The implementation of \ic{visibleContentsOfType}
simply searches through the contents of the current and imported modules and
collects instances of the specified concept. The result is used as the scope for
the reference.
 

\begin{lstlisting}[language=mbeddr] 
link {unit} search scope: 
    (model, scope, refNode, enclosingNode, operationContext) 
                             ->sequence<node<UnitDeclaration>> { 
      enclosingNode.ancestor<IVisibleNodeProvider>.
              visibleContentsOfType(concept/UnitDeclaration/); } 
\end{lstlisting} 


 



\parhead{Type System} We have seen how MPS uses equations and unification to
specify type system rules. However, there is special support for binary
operators that makes overloading for new types easy:
overloaded operations containers essentially specify 3-tuples of
\emph{(leftArgType, rightArgType, resultType)} plus applicability conditions to
match type patterns and decide on the resulting type. Typing rules for new
(combinations of) types can be added by specifying additional 3-tuples.

The code below shows the overloaded rules for C's
\ic{MultiExpression} (the language concept the implements the multiplication operator \ic{*}) when applied
to two \ic{UnitType}s: the result type will be a \ic{UnitType} as well, where
the exponents of the SI units are added. This code overloads the \ic{MultiExpression} to work for
\ic{UnitType}s. In the \ic{is applicable} section we check whether there is a
typing rule for the two value types (e.g. \ic{int * float}). This is achieved by
trying to compute the resulting value type. If none is found, the types cannot
be multiplied. In the computation of the \ic{operation type} we create a new
\ic{UnitType} that uses the \ic{resultingValueType} as the value type and then
computes the resulting unit by adding up the exponents of component SI units
of the two operand types.


\begin{lstlisting}[language=mps, deletekeywords={},
morekeywords={is, type, right, left}] 
operation concepts: MultiExpression
  left operand type: new node<UnitType>() 
  right operand type: new node<UnitType>() 
is applicable:
  (op, leftOpType, rightOpType)->boolean {
    node<> resultingValueType = operation type(op,
                  leftOpType.valueType , rightOpType.valueType ); 
    resultingValueType != null; }
operation type:
  (op, leftOpType, rightOpType)->node<> {
     node<> resultingValueType = operation type(op, 
               leftOpType.valueType,  rightOpType.valueType );
     UnitType.create(resultingValueType,
                      leftOpType.unit.toSIBase().add( rightOpType.unit.toSIBase(), 1 ) ); 
  }
\end{lstlisting} 


While any two units can legally be used with \ic{*} and \ic{/}
(as long as we compute the resulting unit exponents correctly), this is not true for \ic{+}
and {-}. There, the two operand types must be the same (in terms of their
representation in SI base units). We express this by using the following
expression in the \ic{is applicable} section:\\
\ic{leftOpType.unit.isSameAs(rightOpType.unit)}.

The typing rule for the \ic{LocalVariableDeclaration} requires that the type of
the \ic{init} expression must be the same or a subtype of the \ic{type} of the
variable. To make this work correctly, we have to define a type hierarchy for
\ic{UnitType}s. We achieve this by defining the supertypes for each
\ic{UnitType}: the supertypes are those \ic{UnitType}s whose unit is the same,
and whose \ic{valueType} is a supertype of the current \ic{UnitType}'s value type.
The code below shows the rule. This typing rule computes the direct supertypes of a \ic{UnitType}. It
iterates over all immediate supertypes of the current \ic{UnitType}'s value
type, wrapped into a \ic{UnitType} with the same unit as the original one.



\begin{lstlisting}[language=mps, morekeywords={subtyping}]
subtyping rule supertypeOf_UnitType 
              for concept = UnitType as ut {
  nlist<> res = new nlist<>;
  foreach st in immediateSupertypes(ut.valueType) {
    res.add(UnitType.create(st, ut.unit.copy));
  }
  return res;
}
\end{lstlisting} 









\subsection{Meta Data: Requirements Traces}

Annotations are concepts whose instances can be added as children to a node
\emph{N} without this being specified in the definition of \emph{N}'s concept.
While structurally the annotations are children of the annotated node, the
editor is defined the other way round: the annotation editor delegates to the
editor of the annotated element. This allows the annotation editor to add
additional syntax \emph{around} the annotated element. Optionally, it is
possible to explicitly restrict the concepts to which a particular annotation
can be attached. We use annotations in several places: the \ic{safe} annotation discussed in the
previous section, the requirements traces and the product line variability
presence conditions.

\parhead{Structure} We illustrate the annotation mechanism based on the
requirements traces. The code below shows the structure. Notice how it
extends the MPS-predefined concept \ic{NodeAttribute} (it sould be named
\ic{Node- Annotation}). It also specifies a \ic{role}, which is the name of the
property that is used to store \ic{TraceAnnotation}s under the annotated node.
Annotations have to extend the MPS-predefined concept
\ic{NodeAttribute}. They can have an arbitrary child structure (\ic{tracekind},
\ic{refs}), but they have to specify the \ic{role} (the name of the property
that holds the annotated child under its parent) as well as the \ic{attributed}
concept: the annotations can only be attached to instances of this concept (or
subconcepts).


\begin{lstlisting}[language=mps]
concept TraceAnnotation extends NodeAttribute implements <none>     
  children:                                   
    TraceKind        tracekind   1    
    TraceTargetRef   refs        0..n 
  concept properties:                         
    role = trace                                
  concept links:                              
    attributed = BaseConcept                    
\end{lstlisting} 

\parhead{Editor} As mentioned above, in the editor, annotations look as if they
\emph{surrounded} their parent node (although they are in fact children). 
\fig{traces} shows the definition of the editor of the requirements trace
annotation (and an example is shown in \fig{screenshot}): it puts the trace to
the right of the annotated node. Since MPS is a projectional editor, there is
base-language grammar that needs to be made aware of the additional syntax
in the program. This is key to enabling arbitrary annotations on arbitrary program nodes.

       
\begin{figure}[t]
\begin{center} 
  \includegraphics[width=0.8\columnwidth]{figures/tutorial/tracesAll.png}
\end{center}
\caption{The editor definition for the \ic{ReqTrace}
annotation (an example trace annotation is shown in \fig{screenshot}). It
consists of a vertical list \ic{[/ .. /]} with two lines.
The first line contains the reference to the requirement. The second line uses the
\ic{attributed node} construct to embed to the editor of the program node
to which this annotation is attached. So the annotation is always rendered
right on top of whatever syntax the original node uses.}
\label{traces}  
\end{figure}                                          


Annotations are typically attached to a program node via an intention.
Intentions are an MPS editor mechanism: a user selects the target element,
presses \ic{Alt-Enter} and selects \ic{Add Trace} from the popup menu.
The code below shows the code for the intention that attaches a requirements
trace. An intention definition consists of three parts. The \ic{description}
returns the string that is shown in the intentions popup menu. The
\ic{isApplicable} section determines under which conditions the intention is
avavailable in the menu --- in our case, we can only add a trace if there is no
trace yet on the target node. Finally, the \ic{execute} section performs the
action associated with the intention. In our case we simply put an instance of
\ic{TraceAnnotation} into the \ic{@trace} property of the target node.

\begin{lstlisting}[language=mps, morekeywords={description, isApplicable,
execute}]
intention addTrace for BaseConcept {
  description(node)->string { 
    "Add Trace"; 
  }                                                                                                                                                                           
  isApplicable(node)->boolean { 
    node.@trace == null; 
  }                                                                
  execute(editorContext, node)->void { 
    node.@trace = new node<TraceAnnotation>(); 
  }
}
\end{lstlisting} 


\subsection{Alternative Transformations: Range Checking}


\parhead{Safe Modules} Safe modules restrict C to help prevent writing risky
code. For example, runtime range checking is performed for arithmetic
expressions and assignments. The \ic{safemodules} language defines an
\emph{annotation} to mark \ic{Modules} as safe (we will discuss annotations in
the next subsection). If a module is safe, the binary operators such as \ic{+}
or \ic{*} are replaced with calls to functions that, in addition to performing
the addition or multiplication, perform a range check.

\parhead{Transformation}  The transformation that replaces the binary operators
with function calls is triggered by the presence of this annotation on the
\ic{Module} which contains the operator. \fig{safetransformation} shows the code. The
\ic{@safeAnnotation != null} checks for the presence of the annotation. MPS 
uses priorities to specify relative orderings of transformations, and MPS
then calculates a global transformation order for any given model. We use a
priority to express that this transformation runs \emph{before} the final
transformation that maps the C tree to C text for compilation.
 

\begin{figure}[t]
  \includegraphics[width=0.9\columnwidth]{figures/tutorial/safetransformation.png}
\caption{This \emph{reduction rule} transforms instances of \ic{PlusExpression}
into a call to a library function \ic{addWithRangeChecks}, passing in the left 
and right argument of the \ic{+} using the two \ic{COPY\_SRC} macros. The 
\ic{condition} ensures that the transformation is only executed if
the containing \ic{Module} has a \ic{safeAnnotation} attached to it. A
transformation priority defined in the properties of the transformation makes
sure it runs before the C-to-text transformation.}
\label{safetransformation}  
\end{figure} 




\subsection{Restriction: Preventing Use of Reals Numbers} 

We have already seen in earlier how constraints can prevent the use of
specific concepts in certain contexts. We use the same approach for preventing
the use of real number types inside model-checkable state machines: a \ic{can be
ancestor} constraint in the state machine prevents instances of \ic{float} in
the state machine if the \ic{verifiable} flag is set.



















