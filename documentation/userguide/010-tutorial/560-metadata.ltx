\section{Metadata}

\greyboxnote{The code for this example can be found in the tutorial in the
\ic{mbeddr.tutorial.metadata} language.}

\subsection{Example}

Imagine you want to enforce architectural constraints of the kind: only modules
in the Driver Layer are allowed to write certain members of a \ic{struct}, and
the Application Layer is allowed to read them. You may also want to specify a
maximum read frequency. 

Here is how this could look in mbeddr. We first define a few roles:

\begin{lstlisting}
Access Specification               
-----------------------------------
role DriverLayer                   
role ApplicationLayer               
\end{lstlisting}

We can then specify permissions on \ic{struct} members:

\begin{center}
\includegraphics[scale=0.65]{figures/tutorial/annotatedStruct.png}
\end{center}

We can also specify which role a module plays, and if it assigns to a member for
which it has only \ic{read} permissions, an error is reported. Here is
an example of a permission violation (the error message is \ic{role
ApplicationLayer cannot write this member} -- somehow I cannot screenshot that):

\begin{center}
\includegraphics[scale=0.65]{figures/tutorial/permissionError.png}
\end{center}

Note how this language adds additional metadata and constraints to existing
language concepts without changing these. Also, the example implements with
language extensions a task that is typically handled by external tools and/or
external meta data, resulting in much tighter integration.
 

\subsection{Implementation}

\parhead{Annotations} The implementation of this feature is mainly based on
annotations and a non-typesystem rule. The annotations allow adding the
permissions and the module role specification to struct members and modules,
respectively. Let us look at the case for struct member. Here is the annotation
concept:

\begin{lstlisting}[language=mps, morekeywords={links}]
concept AccessSpec extends NodeAttribute         
                                                 
  children:                                      
    Permission permissions 0..n 

  concept properties:                            
    role = accessSpec                              
                                                 
  concept links:                                 
    attributed = Member                            
\end{lstlisting}
                                                 
Note how this concept extends \ic{NodeAttribute}. This means it can be attached
to instances of other nodes without declaring \ic{AccessSpec}s as children of
that other node's concept. This way the language that defines the target node
does not have to be modified. The concept link \ic{attributed} specifies the
concept to which this thing can be attached, in this case it is \ic{Member}s. We
also specify the \ic{role}. In our example, we specify that the \ic{AccessSpec}
child lives in the \ic{@accessSpec} child slot under a \ic{Member}.

The editor for \ic{AccessSpec} embeds the attributed node (i.e. the \ic{Member}
it is attached to), and then, on the right side, renders the permissions.

\begin{center}
\includegraphics[scale=0.65]{figures/tutorial/accessSpecEditor.png}
\end{center}

An intention is used to be able to attach an \ic{AccessSpec} to a \ic{Member}.
The code should be obvious to understand:

\begin{lstlisting}[language=mps, morekeywords={description, isApplicable,
execute}] 
intention addAccessSpec for concept Member {
  error intention : false                                                        
  available in child nodes : false                                               
                                                                               
  description(editorContext, node)->string { 
    "Add Access Spec"; 
  }            
                                                                               
  isApplicable(editorContext, node)->boolean { 
    node.@accessSpec == null; 
  }   
                                                                               
  execute(editorContext, node)->void { 
    node.@accessSpec.set new(<default>);   
  }
}
\end{lstlisting}


A similar annotation is created to mark modules with the role/layer in which
they reside. Take a look at the code to see the details.


\parhead{The Check} To report the errors if a module writes a member for which i
does not have the permission we have implemented a non-typesystem rule for
\ic{ImplementationMo- dule}s. While the code is not completely trivial, it
should be easy to understand. It simply reports an error if a struct member is
assigned to, and the member only has a \ic{read} permission for the role
declared by the module.

\begin{lstlisting}[language=mps, morekeywords={}] 
checking rule check_AccessRestrictions {                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
  applicable for concept = ImplementationModule as immo
  overrides false

  do {
    if (immo.@moduleRole.isNotNull) { 
      node<RoleSpec> moduleRole = immo.@moduleRole.role; 
      nlist<AssignmentExpr> assignments = immo.descendants<concept = AssignmentExpr>; 
      foreach ae in assignments { 
        if (ae.left.isInstanceOf(AbstractDotExpression)) { 
          node<Member> member = ae.left : AbstractDotExpression.member : MemberRef.member; 
          if (member.@accessSpec != null) { 
            node<Permission> permission = member.@accessSpec.permissions.
                   findFirst({~it => it.role == moduleRole; }); 
            if (permission.activity.is(< read >)) { 
              error "role " + moduleRole.name + " cannot write this member" -> ae.left; 
            } 
          } 
        } 
      } 
    } 
  }
}
\end{lstlisting} 

Obviously, there should be additional checks, such as: if we assign to a member
that has a permission specified from within a module that has \emph{no} role
specification, then we get an error: the user has to decide the role of the
module so we can verify if the write access is allowed or not.
















