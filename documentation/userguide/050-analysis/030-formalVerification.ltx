\chapter{Formal verification with Code-Analyzer}
\label{formal_verification}


To perform formal verification, we have integrated the CBMC \url{http://www.cprover.org/cbmc/} C-level model-checker which is free under a BSD-4-clause license. Below we reproduce the advertising requirements of this license for CBMC:

"This product includes software developed by Daniel Kroening, ETH Zurich and Edmund Clarke, Computer Science Department, Carnegie Mellon University."

The focus in mbeddr is on bugs hunting at the sub-sub-system level in a continuous and user-friendly manner. We do NOT prove correctness of a system but rather help users to find bugs. Each run of an analysis can provide one of the results: SUCCESS (colored GREEN) - meaning that no bug could be found; or FAIL (colored RED) - meaning that a bug could be found. When a bug is found, we have a trace through the system (counterexample) that leads to that failure.

We distinguish between the following kinds of analyses:

\begin{itemize}
\item \emph{Robustness verification at C-level:} mbeddr allows the checking of robustness properties on a code like: absence of null pointer dereferencing, absence of div-by-zero, etc. A more in-depth presentation of robustness checks is given in Section\ref{formal_verification.robustness_checks_at_c_level}.
\item \emph{Robustness verification of C-extensions:} some of the mbeddr-extensions provide verification conditions that can be automatically checked and which can be understood as high-level robustness checks. For example, given a state-machine, a robustness check for it is to make sure that all states of the state machine can be reached and all transitions can be fired. More details are provided in Section\ref{formal_verification.robustness_checks_at_mbeddr_level}.
\item \emph{Functional verification:} mbeddr users can define themselves the business-domain specific properties to be checked on a given program. Such properties can be given in code either as assertions or attached to higher level constructs. More details are provided in Section\ref{formal_verification.functional_verification}.
\end{itemize}

\section{Verification primer}
\label{formal_verification.verification_primer}


\parhead{Before you start} The verification tool that we are using is run on the generated C code (not on the mbeddr models themselves). Thereby, it assumes that from your models you can generate valid C code (otherwise, CBMC will complain and no verification will be performed).

Before starting each verification we should ask ourselves the following questions:

\begin{itemize}
\item \emph{Q1) What will be checked?} The first step is to be aware about what properties will be checked and what properties will not be checked :-) Also, be sure that you understand what sub-system will be verified.
For example, when performing robustness analyses of C-code (e.g. searching for div-by-zero) from a function as entry point, only those division operations will be checked for div-by-zero that can be reached from that entry point.
\item \emph{Q2) What is the verification entry-point?} Each run of CBMC must be given the entry point in the program from which it should perform the verification. When nothing is specified, the entry point is the function \ic{main}.
\item \emph{Q3) What are the environment conditions?} Each subsystem (e.g. function, component) on which a verification is performed, is embedded in a bigger system from where it gets the data. Usually, the data types used in the code are much more permissive than the actual values that a parameter can take (e.g. for a function that computes a distance that a car can travel in a certain time period given a parameter \ic{currentSpeed} with \ic{int16} as type, only a small sub-interval of \ic{int16} is relevant.
\item \emph{Q4) What are the parameters given to CBMC?} CBMC takes a big number of parameters that directly affect the results of the verification. The most important parameter is related to the loops unwinding - CBMC performs a stepwise symbolic execution of the code and needs to know how many times loops should be unwound.
\end{itemize}

\parhead{Behind the courtain} mbeddr allows the definition of higher-level, domain specific properties. Our approach to check them is to generate C-level labels for each of them and to check the reachability of these labels. In some cases, if a label is reachable then the property is violated (e.g. for decision tables); in other cases labels that are not rechable represent property violations (e.g. for state-machines states reachibility verification, if a label corresponding to a state is not reachable, then that state is not reachable).  

\section{Basic Configuration}
\label{formal_verification.basic_configuration}


Before starting mbeddr verification, one needs to perform the following steps:

\begin{itemize}
\item \emph{Step 1: Add the corresponding verification devkit.} Analyses are provided through a series of devkits that need to be enabled for the model where the analysis is run. Without these devkits enabled, either some analyses are not possible at all or the interpretation of the program trace will not be lifted at the mbeddr level.
\item \emph{Step 2: Make sure that C-code is generated from the model you check.} The verification is performed directly on the generated C code. Thereby, if no valid C code is generated from your models, then no verification will be done. Make sure that all implementation modules are added to a build configuration.
\end{itemize}

Global settings for CBMC-based analyses can be changed via "File->Settings" menu and then selecting "CProver preference" tab as shown below.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.9\columnwidth]{figures/analyses/verification_cprover_global_settings.png}
\end{center}
\vspace{-3mm}
\caption{Global settings for running CBMC.}
\label{C-000-Overview.formal_verification.basic_configuration.globl_settings}
\end{figure}


The meaning of these settings is briefly described below:

\begin{itemize}
\item Number of parallel threads defines the maximum number of instances of CBMC that will be started simultaneously.
\item Timeout represents the time budget allocated for an analysis. After the timeut expires, the CBMC process will be killed and the analysis will be stopped. In the case when a high-level analysis starts several instances of CBMC (e.g. in case of robustness analyses, we will start one instance of CBMC for each atomic robustness check), then users can define timeout for atomic analyses.
\item Use of VCC/GCC under Windows. If VCC is used then mbeddr should be started from the Visual Studio console.
\item Rebuild models before analysis instructs mbeddr to perform a full "MPS rebuild" of the analyzed model before each analysis (otherwise only an "MPS make" will be run).
\item Slice formula instructs CBMC to perform program slicing. The analyses will run faster, however, in the case when the analysis fails, the returned counterexample might not contain all intermediate steps.
\item Unwinding depth instructs CBMC how many times it should unwind loops. If generate unwinding assertions is selected, then CBMC will explicitly check that each loop was unwound enough. For more details about the loops unwinding in CBMC, please look here: \url{http://www.cprover.org/cprover-manual/cbmc-loops.shtml}
\item Partial loops instructs CBMC to continue the analysis even if unwinding is not enough. Enabling partial loops, increases the number of bugs that can be found, however, it might introduce false positives (properties reported as SUCCESS even if they should FAIL) and false negatives (properties reported as FAILS even if they should be SUCCESS; in these cases, provided counterexamples are not feasible). Unfeasible conterexamples can be returned also in the case when the property FAILS indeed.
\end{itemize}

\section{Robustness Checks at C-level}
\label{formal_verification.robustness_checks_at_c_level}


For checking robustness of C programs, we need to add the \ic{com.mbeddr.analyses.core} devkit as shown in the following figure.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/analyses/verification_core_devkit.png}
\end{center}
\vspace{-3mm}
\caption{Adding the \ic{com.mbeddr.analyses.core} devkit to your model will enable robustness checks.}
\label{C-000-Overview.formal_verification.robustness_checks_at_c_level.verification_core_devkit}
\end{figure}


To start the robustness checks for a given function (and transitively for the other functions that are called from it) you can either open a pop-up menu on the function node or define an robustness analysis configuration and start the analysis from there.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.9\columnwidth]{figures/analyses/verification_robustness_direct_start.png}
\end{center}
\vspace{-3mm}
\caption{One click start of robustness checks.}
\label{C-000-Overview.formal_verification.robustness_checks_at_c_level.verification_robustness_direct_start}
\end{figure}


\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.9\columnwidth]{figures/analyses/verification_config_robustness_item_creation.png}
\end{center}
\vspace{-3mm}
\caption{Creation of a new 'robustness analysis configuration item'.}
\label{C-000-Overview.formal_verification.robustness_checks_at_c_level.verification_config_robustness_item_creation}
\end{figure}


\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.9\columnwidth]{figures/analyses/C-000-Overview_verification_config_robustness_item_example.png}
\end{center}
\vspace{-3mm}
\caption{For each configuration item the users can fine-tune which robustness properties will be checked and the entry point in the verification.}
\label{C-000-Overview.formal_verification.robustness_checks_at_c_level.verification_config_robustness_item_example}
\end{figure}


\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/analyses/verification_config_robustness_item_start_verification.png}
\end{center}
\vspace{-3mm}
\caption{To verify an analysis configuration item, one needs just to right-click and select the menu.}
\label{C-000-Overview.formal_verification.robustness_checks_at_c_level.verification_config_robustness_item_start_verification}
\end{figure}


When the analysis is started from the popup menu, all robustness properties will be checked. Below we summarize the robustness properties (details about these propertie can be found on the webpage of CBMC \url{http://www.cprover.org/cprover-manual/properties.shtml}) and in its user guide:

\begin{itemize}
\item \emph{array bounds} check that each array access is within bounds (aka. buffer overflow)
\item \emph{div-by-zero} check that for each division the divisor is not zero
\item \emph{not-a-number} check whether the floating-point computations can result in NaN
\item \emph{pointer} check that pointers are valid whenever they are accessed (no NULL-pointer dereference and no access to invalid pointers such as dead objects).
\item \emph{overflows/underflows} check that no signed (or unsigned) over- underflow can occur.
\end{itemize}

\section{Robustness Checks of mbeddr-Extensions}
\label{formal_verification.robustness_checks_at_mbeddr_level}


Higher-level language constructs carry with them higher-level properties that can be checked. For example, when programming using decision tables, we might ask ourselves if the decision table is complete (have we covered all cases?) or if it is consistent (do we have cases where multiple cells could be active at the same time?). Another example are state-machines about which we might ask ourselves if all states are reachable (we do not have superfluous states) and all transitions can be fired (no transition is completely shadowed by previous transitions).

\subsection{Checking Decision Tables}
\label{formal_verification.robustness_checks_at_mbeddr_level.decision_tables}


Let's consider a decision table which implements a look-up table to compute a breaking distance given the current speed and the information whether the road is icy or not.
A decision table can be verified only if the 'checked' annotation is enabled as shown below. This flag will instruct the C-code generator to generate labels for each of the properties to be checked.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=1.0\columnwidth]{figures/analyses/verification_dectab_toggle_check.png}
\end{center}
\vspace{-3mm}
\caption{To verify a decision table one needs to make it 'checked' by using an intention.}
\label{C-000-Overview.formal_verification.robustness_checks_at_mbeddr_level.decision_tables.verification_dectab_toggle_check}
\end{figure}


It is possible to start the verification with one click from the pop-up menu of the decision table node or through an analysis configuration as described in the case of robustness checks. The one-click start will use the \ic{main} method as entry point; in the case when analysis configurations are used then we can specify another entry point.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=1.0\columnwidth]{figures/analyses/verification_dectab_start_verification.png}
\end{center}
\vspace{-3mm}
\caption{One-click starting of the decision table verification.}
\label{C-000-Overview.formal_verification.robustness_checks_at_mbeddr_level.decision_tables.verification_dectab_start_verification}
\end{figure}


\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/analyses/C-000-Overview_verification_dectab_configuration_item.png}
\end{center}
\vspace{-3mm}
\caption{A configuration item for verifying a decision table.}
\label{C-000-Overview.formal_verification.robustness_checks_at_mbeddr_level.decision_tables.verification_dectab_configuration_item}
\end{figure}


After the verification is finished, the results (have we covered all cases, do we have cases where two cells of the table are active at the same time) are automatically shown. When a result fails then a trace through the system is given that shows an example of values that could cause the failure. 

\begin{figure}[h!]
\begin{center}
\includegraphics[width=1.0\columnwidth]{figures/analyses/verification_dectab_results.png}
\end{center}
\vspace{-3mm}
\caption{A trace to the failure will be shown if the verification result is selected.}
\label{C-000-Overview.formal_verification.robustness_checks_at_mbeddr_level.decision_tables.verification_dectab_results}
\end{figure}


\subsection{Checking State Machines}
\label{formal_verification.robustness_checks_at_mbeddr_level.state_machines}


The first step to check state-machines is to add the \ic{com.mbeddr.analyses.statemachines} devkit to the model containing the statemachine. This devkit enables actions in the menu and the lifting of counterexamples such that they are aware of state-machines.

Let's consider a state-machine that implements a simple counter. After the state-machine is started (with the start event), it counts up or down.

\begin{lstlisting}[language=mbeddr]
statemachine Counter initial = Init { 
  in event countUp(int16 step) <no binding> 
  in event countDown(int16 step) <no binding> 
  in event start() <no binding> 
  var int16 counterState = 0 
   
  state Init { 
    on start [ ] -> Counting 
  }
  state Counting { 
    on countUp [ ] -> Counting { counterState += step; }
    on countUp [step < 0] -> Init 
    on countDown [ ] -> Counting { counterState += step; }
    on countDown [step < 0] -> Init 
  }
}
\end{lstlisting}

\noindent
A state-machine can be verified only if the 'checked' annotation is enabled as shown below. The checked flag is enabled via an intention on the state-machine. This flag will instruct the C-code generator to generate labels for each of the properties to be checked. 

\noindent
The verification can be started either with one click from the pop-up menu of the state-machine node or through an analysis configuration. The one-click start will use the \ic{main} method as entry point; in the case when analysis configurations are used then we can specify another entry point.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.9\columnwidth]{figures/analyses/C-000-Overview_verification_statemachine_configuration_item.png}
\end{center}
\vspace{-3mm}
\caption{A configuration item for verifying the state-machine.}
\label{C-000-Overview.formal_verification.robustness_checks_at_mbeddr_level.state_machines.verification_statemachine_configuration_item}
\end{figure}


After the verification is finished, the results are automatically shown. If a state cannot be reached or a transition cannot be fired then the result is marked with FAIL. Since the generated labels cannot be reached, we do not have any trace through the system. 

\begin{figure}[h!]
\begin{center}
\includegraphics[width=1.0\columnwidth]{figures/analyses/verification_statemachine_results.png}
\end{center}
\vspace{-3mm}
\caption{Results of the statemachine verification. Two transitions cannot be fired since they are shadowed by previous transitions.}
\label{C-000-Overview.formal_verification.robustness_checks_at_mbeddr_level.state_machines.verification_statemachine_results}
\end{figure}


\section{Functional Verification}
\label{formal_verification.functional_verification}


Many times we want to check properties in the code that are relevant to the business domain of our application. In order to do so, we need to be able to write such properties in the code. In mbeddr one can use plain old assertions or can attach properties to higher level constructs like for example pre/post conditions to components.

\subsection{Assertions verification}
\label{formal_verification.functional_verification.verifying_assertions}


Writing assertions in C code is a 'classical' method to check properties. In the code fragment below we present a simple assertion.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.7\columnwidth]{figures/analyses/C-000-Overview_assertion_example.png}
\end{center}
\vspace{-3mm}
\caption{We specify that the time should be positive.}
\label{C-000-Overview.formal_verification.functional_verification.verifying_assertions.assertion_example}
\end{figure}


The assertions verification can be started either with one-click from the popup menu of the function, or by defining an analysis configuration item. Doth ways are illustrated below.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/analyses/verification_assertions_direct_start.png}
\end{center}
\vspace{-3mm}
\caption{One click check of all assertions that can be reached from one function.}
\label{C-000-Overview.formal_verification.functional_verification.verifying_assertions.verification_assertions_direct_start}
\end{figure}


\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/analyses/C-000-Overview_assertions_analysis_config.png}
\end{center}
\vspace{-3mm}
\caption{An assertion analysis configuration item allows mbeddr users to fine tune different verification parameters.}
\label{C-000-Overview.formal_verification.functional_verification.verifying_assertions.assertions_analysis_config}
\end{figure}


\subsection{Components Verification}
\label{formal_verification.functional_verification.verifying_components}


In order to enable components verification, we should firstly add the \ic{com.mbeddr.analyses.components} devkit to the current model.

mbeddr allows its users to define interfaces and components that implement them. To each of the runnables of an interface, we can attach pre/post conditions. Furthermore, the expected ordering of calls to functions of an interface can be defined using a protocol specification. Pre-/postconditions and protocol together we call the contract of the interface.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.6\columnwidth]{figures/analyses/C-000-Overview_speed_computer_interface.png}
\end{center}
\vspace{-3mm}
\caption{Example of an interface with pre-/postconditions and protocol attached to its functions.}
\label{C-000-Overview.formal_verification.functional_verification.verifying_components.speed_computer_interface}
\end{figure}


Interfaces can be implemented by components like in the code fragment shown below.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=1.0\columnwidth]{figures/analyses/C-000-Overview_plauzibilized_speed_computer_component.png}
\end{center}
\vspace{-3mm}
\caption{A component implements all methods of the interface. The contracts defined by all interfaces are automatically transfered to the component.}
\label{C-000-Overview.formal_verification.functional_verification.verifying_components.plauzibilized_speed_computer_component}
\end{figure}


Having specified the contract of an interface, we would like to verify if the clients of the components implementing this interface comply with the specified preconditions and call the interface functions in an appropriate order. Furthermore, we would like to check that the implementation of the methods fo the interface fulfilly the specified postconditions.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.6\columnwidth]{figures/analyses/C-000-Overview_component_clients.png}
\end{center}
\vspace{-3mm}
\caption{Example of a client of the component. }
\label{C-000-Overview.formal_verification.functional_verification.verifying_components.component_clients}
\end{figure}


To check the component, we firstly need to add the attribute 'checked' via an intention (having this attribute enabled, we can generate labels for the cases where pre-/postconditions are violated). 

The verification is started either by one-click from the components pop-up menu or via an analysis configuration item which allows to specify an arbitrary entry point. Both of these ways are illustrated below. 

\begin{figure}[h!]
\begin{center}
\includegraphics[width=1.0\columnwidth]{figures/analyses/verification_components_direct_start.png}
\end{center}
\vspace{-3mm}
\caption{One click check of the contracts of all interfaces provided by this component.}
\label{C-000-Overview.formal_verification.functional_verification.verifying_components.verification_components_direct_start}
\end{figure}


\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/analyses/C-000-Overview_components_configuration_item.png}
\end{center}
\vspace{-3mm}
\caption{Example of a configuration item for components analyses.}
\label{C-000-Overview.formal_verification.functional_verification.verifying_components.components_configuration_item}
\end{figure}


Once the verification finishes, a window with results will be automatically opened as illustrated below.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/analyses/verification_components_results.png}
\end{center}
\vspace{-3mm}
\caption{The results of the verification of each pre-/postcondition and protocol are displayed in the results window.}
\label{C-000-Overview.formal_verification.functional_verification.verifying_components.verification_components_results}
\end{figure}


\section{Defining the Environment for Verification}
\label{formal_verification.verification_environment}


Most of the software modules we develop (e.g. functions, statemachines, components) are included within bigger systems. Other systems, that are neighboring with our module that we verify are called the environment of the system. Most of the times, the data types of the inputs of the to-be-verified system are too permissive and in practice, the sub-system we are veryfying should work under much tighter constraints.

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.8\columnwidth]{figures/analyses/C-000-Overview_system_under_verification.png}
\end{center}
\vspace{-3mm}
\caption{Let's consider for example that our system under verification is a simple function that computes the speed of a car. This function takes two parameters: a distance and a time interval, both of type \ic{int16}. Of course that the time interval cannot be smaller than zero; let's assume that it is smaller than 10. We can also assume that the distance cannot be bigger than 1000 and must be positive as well. }
\label{C-000-Overview.formal_verification.verification_environment.system_under_verification}
\end{figure}


The constraints over variables and ranges can be modeled inside \ic{harness modules}. Below we show an example of such a module:

\begin{figure}[h!]
\begin{center}
\includegraphics[width=0.6\columnwidth]{figures/analyses/C-000-Overview_environment_definition.png}
\end{center}
\vspace{-3mm}
\caption{The function \ic{speedComputer} is called from within the harness definition that contains nondeterministic assignments that are further constraint (via an intention on a \ic{nondet assign} to belong to the desired intervals. In the first nondet assignment we use an explicit construct to specify the interval, in the second assignment we use classical C inequalities. When we use the 'in range expression' (as opposed to explicit inequalities), then the harness is generated in an optimal manner and this increases the running efficiency of CBMC.}
\label{C-000-Overview.formal_verification.verification_environment.environment_definition}
\end{figure}
